 % ./bb
 % Args:
DEBUG P1READ: Terminal 0 battery=100.00
DEBUG P1READ: Terminal 1 battery=82.60
DEBUG P1READ: Terminal 2 battery=71.70
DEBUG P1READ: Terminal 3 battery=85.50
DEBUG P1READ: Terminal 4 battery=73.30
DEBUG P1READ: Terminal 5 battery=27.50
DEBUG P1READ: Terminal 6 battery=32.60
DEBUG P1READ: Terminal 7 battery=43.20
DEBUG P1READ: Terminal 8 battery=58.90
DEBUG P1READ: Terminal 9 battery=56.10
DEBUG P1READ: Terminal 10 battery=30.20
DEBUG P1READ: Terminal 11 battery=0.00
DEBUG P1READ: Terminal 12 battery=63.00
DEBUG P1READ: Terminal 13 battery=19.90
DEBUG P1READ: Terminal 14 battery=70.30
DEBUG P1READ: Terminal 15 battery=86.60
DEBUG P1READ: Terminal 16 battery=48.00
DEBUG P1READ: Terminal 17 battery=56.60
DEBUG P1READ: Terminal 18 battery=31.20
DEBUG P1READ: Terminal 19 battery=67.60
DEBUG HG: num_verts=20, num_edges=40
 % Phase 1: 0.00 seconds

%%BeginSetup

0 1 0 1 SetAxes

20 DefineTerminals
	.4588350000000000	.2373240000000000	DT
	.1270640000000000	.3509960000000000	DT
	.1544540000000000	.4808220000000000	DT
	.9474030000000000	.1441120000000000	DT
	.2867390000000000	.0565890000000000	DT
	.1326890000000000	.1166050000000000	DT
	.6273950000000000	.2122140000000000	DT
	.0794880000000000	.7970990000000000	DT
	.0327480000000000	.8803250000000000	DT
	.3110550000000000	.8689670000000000	DT
	.0916180000000000	.0221720000000000	DT
	.3600710000000000	.6382240000000000	DT
	.7197120000000000	.7181670000000000	DT
	.4424420000000000	.1450340000000000	DT
	.9983770000000000	.5729870000000000	DT
	.9654920000000000	.1935700000000000	DT
	.1600100000000000	.4187950000000000	DT
	.2909450000000000	.9620800000000000	DT
	.3330000000000000	.9414120000000000	DT
	.9512590000000000	.5074670000000000	DT

%%EndSetup

DEBUG ALGO: num_verts=20 <= 8? NO, num_edges=40 <= 12? NO
DEBUG ALGO: Forcing BRANCH-AND-CUT for multi-objective optimization (vertices=20 > 1)
DEBUG SPANNING: Adding modified spanning constraint for budget mode
DEBUG SPANNING: Added modified spanning constraint: Σ(|FST|-1)*x + Σnot_covered = 19
DEBUG CONSTRAINT: Adding soft cutset constraints with not_covered variables
DEBUG CONSTRAINT: Added constraint x[2] + not_covered[0] ≤ 1 for terminal 0
DEBUG CONSTRAINT: Added constraint x[27] + not_covered[0] ≤ 1 for terminal 0
DEBUG CONSTRAINT: Added constraint x[31] + not_covered[0] ≤ 1 for terminal 0
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 3·not_covered[0] ≤ 3 for terminal 0
DEBUG CONSTRAINT: Added constraint x[0] + not_covered[1] ≤ 1 for terminal 1
DEBUG CONSTRAINT: Added constraint x[24] + not_covered[1] ≤ 1 for terminal 1
DEBUG CONSTRAINT: Added constraint x[33] + not_covered[1] ≤ 1 for terminal 1
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 3·not_covered[1] ≤ 3 for terminal 1
DEBUG CONSTRAINT: Added constraint x[5] + not_covered[2] ≤ 1 for terminal 2
DEBUG CONSTRAINT: Added constraint x[7] + not_covered[2] ≤ 1 for terminal 2
DEBUG CONSTRAINT: Added constraint x[16] + not_covered[2] ≤ 1 for terminal 2
DEBUG CONSTRAINT: Added constraint x[23] + not_covered[2] ≤ 1 for terminal 2
DEBUG CONSTRAINT: Added constraint x[36] + not_covered[2] ≤ 1 for terminal 2
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 5·not_covered[2] ≤ 5 for terminal 2
DEBUG CONSTRAINT: Added constraint x[3] + not_covered[3] ≤ 1 for terminal 3
DEBUG CONSTRAINT: Added constraint x[4] + not_covered[3] ≤ 1 for terminal 3
DEBUG CONSTRAINT: Added constraint x[17] + not_covered[3] ≤ 1 for terminal 3
DEBUG CONSTRAINT: Added constraint x[20] + not_covered[3] ≤ 1 for terminal 3
DEBUG CONSTRAINT: Added constraint x[22] + not_covered[3] ≤ 1 for terminal 3
DEBUG CONSTRAINT: Added constraint x[39] + not_covered[3] ≤ 1 for terminal 3
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 6·not_covered[3] ≤ 6 for terminal 3
DEBUG CONSTRAINT: Added constraint x[0] + not_covered[4] ≤ 1 for terminal 4
DEBUG CONSTRAINT: Added constraint x[1] + not_covered[4] ≤ 1 for terminal 4
DEBUG CONSTRAINT: Added constraint x[30] + not_covered[4] ≤ 1 for terminal 4
DEBUG CONSTRAINT: Added constraint x[32] + not_covered[4] ≤ 1 for terminal 4
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 4·not_covered[4] ≤ 4 for terminal 4
DEBUG CONSTRAINT: Added constraint x[0] + not_covered[5] ≤ 1 for terminal 5
DEBUG CONSTRAINT: Added constraint x[1] + not_covered[5] ≤ 1 for terminal 5
DEBUG CONSTRAINT: Added constraint x[29] + not_covered[5] ≤ 1 for terminal 5
DEBUG CONSTRAINT: Added constraint x[30] + not_covered[5] ≤ 1 for terminal 5
DEBUG CONSTRAINT: Added constraint x[33] + not_covered[5] ≤ 1 for terminal 5
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 5·not_covered[5] ≤ 5 for terminal 5
DEBUG CONSTRAINT: Added constraint x[2] + not_covered[6] ≤ 1 for terminal 6
DEBUG CONSTRAINT: Added constraint x[3] + not_covered[6] ≤ 1 for terminal 6
DEBUG CONSTRAINT: Added constraint x[4] + not_covered[6] ≤ 1 for terminal 6
DEBUG CONSTRAINT: Added constraint x[11] + not_covered[6] ≤ 1 for terminal 6
DEBUG CONSTRAINT: Added constraint x[17] + not_covered[6] ≤ 1 for terminal 6
DEBUG CONSTRAINT: Added constraint x[18] + not_covered[6] ≤ 1 for terminal 6
DEBUG CONSTRAINT: Added constraint x[20] + not_covered[6] ≤ 1 for terminal 6
DEBUG CONSTRAINT: Added constraint x[31] + not_covered[6] ≤ 1 for terminal 6
DEBUG CONSTRAINT: Added constraint x[39] + not_covered[6] ≤ 1 for terminal 6
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 9·not_covered[6] ≤ 9 for terminal 6
DEBUG CONSTRAINT: Added constraint x[5] + not_covered[7] ≤ 1 for terminal 7
DEBUG CONSTRAINT: Added constraint x[6] + not_covered[7] ≤ 1 for terminal 7
DEBUG CONSTRAINT: Added constraint x[8] + not_covered[7] ≤ 1 for terminal 7
DEBUG CONSTRAINT: Added constraint x[13] + not_covered[7] ≤ 1 for terminal 7
DEBUG CONSTRAINT: Added constraint x[14] + not_covered[7] ≤ 1 for terminal 7
DEBUG CONSTRAINT: Added constraint x[15] + not_covered[7] ≤ 1 for terminal 7
DEBUG CONSTRAINT: Added constraint x[16] + not_covered[7] ≤ 1 for terminal 7
DEBUG CONSTRAINT: Added constraint x[19] + not_covered[7] ≤ 1 for terminal 7
DEBUG CONSTRAINT: Added constraint x[28] + not_covered[7] ≤ 1 for terminal 7
DEBUG CONSTRAINT: Added constraint x[35] + not_covered[7] ≤ 1 for terminal 7
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 10·not_covered[7] ≤ 10 for terminal 7
DEBUG CONSTRAINT: Added constraint x[6] + not_covered[8] ≤ 1 for terminal 8
DEBUG CONSTRAINT: Added constraint x[13] + not_covered[8] ≤ 1 for terminal 8
DEBUG CONSTRAINT: Added constraint x[14] + not_covered[8] ≤ 1 for terminal 8
DEBUG CONSTRAINT: Added constraint x[19] + not_covered[8] ≤ 1 for terminal 8
DEBUG CONSTRAINT: Added constraint x[28] + not_covered[8] ≤ 1 for terminal 8
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 5·not_covered[8] ≤ 5 for terminal 8
DEBUG CONSTRAINT: Added constraint x[6] + not_covered[9] ≤ 1 for terminal 9
DEBUG CONSTRAINT: Added constraint x[7] + not_covered[9] ≤ 1 for terminal 9
DEBUG CONSTRAINT: Added constraint x[8] + not_covered[9] ≤ 1 for terminal 9
DEBUG CONSTRAINT: Added constraint x[9] + not_covered[9] ≤ 1 for terminal 9
DEBUG CONSTRAINT: Added constraint x[12] + not_covered[9] ≤ 1 for terminal 9
DEBUG CONSTRAINT: Added constraint x[13] + not_covered[9] ≤ 1 for terminal 9
DEBUG CONSTRAINT: Added constraint x[14] + not_covered[9] ≤ 1 for terminal 9
DEBUG CONSTRAINT: Added constraint x[15] + not_covered[9] ≤ 1 for terminal 9
DEBUG CONSTRAINT: Added constraint x[16] + not_covered[9] ≤ 1 for terminal 9
DEBUG CONSTRAINT: Added constraint x[19] + not_covered[9] ≤ 1 for terminal 9
DEBUG CONSTRAINT: Added constraint x[25] + not_covered[9] ≤ 1 for terminal 9
DEBUG CONSTRAINT: Added constraint x[34] + not_covered[9] ≤ 1 for terminal 9
DEBUG CONSTRAINT: Added constraint x[35] + not_covered[9] ≤ 1 for terminal 9
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 13·not_covered[9] ≤ 13 for terminal 9
DEBUG CONSTRAINT: Added constraint x[1] + not_covered[10] ≤ 1 for terminal 10
DEBUG CONSTRAINT: Added constraint x[29] + not_covered[10] ≤ 1 for terminal 10
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 2·not_covered[10] ≤ 2 for terminal 10
DEBUG CONSTRAINT: Added constraint x[5] + not_covered[11] ≤ 1 for terminal 11
DEBUG CONSTRAINT: Added constraint x[7] + not_covered[11] ≤ 1 for terminal 11
DEBUG CONSTRAINT: Added constraint x[8] + not_covered[11] ≤ 1 for terminal 11
DEBUG CONSTRAINT: Added constraint x[9] + not_covered[11] ≤ 1 for terminal 11
DEBUG CONSTRAINT: Added constraint x[13] + not_covered[11] ≤ 1 for terminal 11
DEBUG CONSTRAINT: Added constraint x[16] + not_covered[11] ≤ 1 for terminal 11
DEBUG CONSTRAINT: Added constraint x[34] + not_covered[11] ≤ 1 for terminal 11
DEBUG CONSTRAINT: Added constraint x[36] + not_covered[11] ≤ 1 for terminal 11
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 8·not_covered[11] ≤ 8 for terminal 11
DEBUG CONSTRAINT: Added constraint x[9] + not_covered[12] ≤ 1 for terminal 12
DEBUG CONSTRAINT: Added constraint x[10] + not_covered[12] ≤ 1 for terminal 12
DEBUG CONSTRAINT: Added constraint x[18] + not_covered[12] ≤ 1 for terminal 12
DEBUG CONSTRAINT: Added constraint x[20] + not_covered[12] ≤ 1 for terminal 12
DEBUG CONSTRAINT: Added constraint x[37] + not_covered[12] ≤ 1 for terminal 12
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 5·not_covered[12] ≤ 5 for terminal 12
DEBUG CONSTRAINT: Added constraint x[2] + not_covered[13] ≤ 1 for terminal 13
DEBUG CONSTRAINT: Added constraint x[27] + not_covered[13] ≤ 1 for terminal 13
DEBUG CONSTRAINT: Added constraint x[32] + not_covered[13] ≤ 1 for terminal 13
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 3·not_covered[13] ≤ 3 for terminal 13
DEBUG CONSTRAINT: Added constraint x[10] + not_covered[14] ≤ 1 for terminal 14
DEBUG CONSTRAINT: Added constraint x[26] + not_covered[14] ≤ 1 for terminal 14
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 2·not_covered[14] ≤ 2 for terminal 14
DEBUG CONSTRAINT: Added constraint x[3] + not_covered[15] ≤ 1 for terminal 15
DEBUG CONSTRAINT: Added constraint x[11] + not_covered[15] ≤ 1 for terminal 15
DEBUG CONSTRAINT: Added constraint x[17] + not_covered[15] ≤ 1 for terminal 15
DEBUG CONSTRAINT: Added constraint x[18] + not_covered[15] ≤ 1 for terminal 15
DEBUG CONSTRAINT: Added constraint x[20] + not_covered[15] ≤ 1 for terminal 15
DEBUG CONSTRAINT: Added constraint x[22] + not_covered[15] ≤ 1 for terminal 15
DEBUG CONSTRAINT: Added constraint x[38] + not_covered[15] ≤ 1 for terminal 15
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 7·not_covered[15] ≤ 7 for terminal 15
DEBUG CONSTRAINT: Added constraint x[23] + not_covered[16] ≤ 1 for terminal 16
DEBUG CONSTRAINT: Added constraint x[24] + not_covered[16] ≤ 1 for terminal 16
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 2·not_covered[16] ≤ 2 for terminal 16
DEBUG CONSTRAINT: Added constraint x[12] + not_covered[17] ≤ 1 for terminal 17
DEBUG CONSTRAINT: Added constraint x[15] + not_covered[17] ≤ 1 for terminal 17
DEBUG CONSTRAINT: Added constraint x[19] + not_covered[17] ≤ 1 for terminal 17
DEBUG CONSTRAINT: Added constraint x[21] + not_covered[17] ≤ 1 for terminal 17
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 4·not_covered[17] ≤ 4 for terminal 17
DEBUG CONSTRAINT: Added constraint x[12] + not_covered[18] ≤ 1 for terminal 18
DEBUG CONSTRAINT: Added constraint x[14] + not_covered[18] ≤ 1 for terminal 18
DEBUG CONSTRAINT: Added constraint x[15] + not_covered[18] ≤ 1 for terminal 18
DEBUG CONSTRAINT: Added constraint x[19] + not_covered[18] ≤ 1 for terminal 18
DEBUG CONSTRAINT: Added constraint x[21] + not_covered[18] ≤ 1 for terminal 18
DEBUG CONSTRAINT: Added constraint x[25] + not_covered[18] ≤ 1 for terminal 18
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 6·not_covered[18] ≤ 6 for terminal 18
DEBUG CONSTRAINT: Added constraint x[4] + not_covered[19] ≤ 1 for terminal 19
DEBUG CONSTRAINT: Added constraint x[10] + not_covered[19] ≤ 1 for terminal 19
DEBUG CONSTRAINT: Added constraint x[11] + not_covered[19] ≤ 1 for terminal 19
DEBUG CONSTRAINT: Added constraint x[17] + not_covered[19] ≤ 1 for terminal 19
DEBUG CONSTRAINT: Added constraint x[18] + not_covered[19] ≤ 1 for terminal 19
DEBUG CONSTRAINT: Added constraint x[20] + not_covered[19] ≤ 1 for terminal 19
DEBUG CONSTRAINT: Added constraint x[26] + not_covered[19] ≤ 1 for terminal 19
DEBUG CONSTRAINT: Added constraint x[37] + not_covered[19] ≤ 1 for terminal 19
DEBUG CONSTRAINT: Added constraint x[38] + not_covered[19] ≤ 1 for terminal 19
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 9·not_covered[19] ≤ 9 for terminal 19
DEBUG CONSTRAINT: Added source terminal constraint: not_covered[0] = 0
DEBUG BUDGET: Adding budget constraint ≤ 300000.000 to constraint pool
DEBUG BUDGET: Using raw tree costs directly
DEBUG BUDGET: Budget limit: 300000.000
DEBUG BUDGET: Building raw cost constraint coefficients:
DEBUG BUDGET:   x[0] coefficient = 398991 (raw=398991.100)
DEBUG BUDGET:   x[1] coefficient = 260889 (raw=260889.712)
DEBUG BUDGET:   x[2] coefficient = 256773 (raw=256773.057)
DEBUG BUDGET:   x[3] coefficient = 376541 (raw=376541.557)
DEBUG BUDGET:   x[4] coefficient = 646084 (raw=646084.462)
DEBUG BUDGET:   x[5] coefficient = 520973 (raw=520973.020)
DEBUG BUDGET:   x[6] coefficient = 334575 (raw=334575.182)
DEBUG BUDGET:   x[7] coefficient = 494448 (raw=494448.457)
DEBUG BUDGET:   x[8] coefficient = 455905 (raw=455905.519)
DEBUG BUDGET:   x[9] coefficient = 584020 (raw=584020.499)
DEBUG BUDGET:   x[10] coefficient = 380918 (raw=380918.244)
DEBUG BUDGET:   x[11] coefficient = 621357 (raw=621357.781)
DEBUG BUDGET:   x[12] coefficient = 120675 (raw=120675.719)
DEBUG BUDGET:   x[13] coefficient = 551354 (raw=551354.477)
DEBUG BUDGET:   x[14] coefficient = 410262 (raw=410262.679)
DEBUG BUDGET:   x[15] coefficient = 362962 (raw=362962.653)
DEBUG BUDGET:   x[16] coefficient = 702244 (raw=702244.403)
DEBUG BUDGET:   x[17] coefficient = 673894 (raw=673894.542)
DEBUG BUDGET:   x[18] coefficient = 933994 (raw=933994.022)
DEBUG BUDGET:   x[19] coefficient = 454199 (raw=454199.906)
DEBUG BUDGET:   x[20] coefficient = 986439 (raw=986439.144)
DEBUG BUDGET:   x[21] coefficient = 46859 (raw=46859.249)
DEBUG BUDGET:   x[22] coefficient = 52662 (raw=52662.185)
DEBUG BUDGET:   x[23] coefficient = 62275 (raw=62275.339)
DEBUG BUDGET:   x[24] coefficient = 75379 (raw=75379.993)
DEBUG BUDGET:   x[25] coefficient = 75695 (raw=75695.846)
DEBUG BUDGET:   x[26] coefficient = 80703 (raw=80703.013)
DEBUG BUDGET:   x[27] coefficient = 93734 (raw=93734.596)
DEBUG BUDGET:   x[28] coefficient = 95452 (raw=95452.578)
DEBUG BUDGET:   x[29] coefficient = 102977 (raw=102977.757)
DEBUG BUDGET:   x[30] coefficient = 165327 (raw=165327.925)
DEBUG BUDGET:   x[31] coefficient = 170420 (raw=170420.027)
DEBUG BUDGET:   x[32] coefficient = 179069 (raw=179069.657)
DEBUG BUDGET:   x[33] coefficient = 234458 (raw=234458.486)
DEBUG BUDGET:   x[34] coefficient = 235891 (raw=235891.713)
DEBUG BUDGET:   x[35] coefficient = 242462 (raw=242462.956)
DEBUG BUDGET:   x[36] coefficient = 258947 (raw=258947.370)
DEBUG BUDGET:   x[37] coefficient = 313063 (raw=313063.098)
DEBUG BUDGET:   x[38] coefficient = 314219 (raw=314219.517)
DEBUG BUDGET:   x[39] coefficient = 327174 (raw=327174.269)
DEBUG BUDGET: Constraint: Σ tree_cost[i] * x[i] ≤ 300000
DEBUG BUDGET: Budget constraint added to pool with 40 FSTs
DEBUG CONSTRAINT: Adding 'at least one FST' constraint: Σ x[i] ≥ 1
DEBUG CONSTRAINT: Added 'at least one FST' constraint: Σ x[i] ≥ 1
 % _gst_initialize_constraint_pool: 0.00 seconds.
 % Constraint pool initialized with:
 % 	1	Total degree rows	40	coeffs.
 % 	20	Cutset rows		111	coeffs.
 % 	0	Incompatibility rows	0	coeffs.
 % 	29	2-terminal SEC rows	102	coeffs.
 % 	1	At least one FST rows	40	coeffs.
 % 	163	Total rows in pool	135	in LP
 % @PMEM 163 rows, 1 blocks, 415 nzfree, 0 nzwasted, 1172 nztotal
DEBUG SOFT: Found 20 terminals, 40 FSTs
DEBUG SOFT: Adding space for 20 not_covered variables in soft constraints, total ncoeff=514
DEBUG LP_SETUP: Created LP with 0 rows, 60 columns (nedges=40 + nterms=20)
DEBUG SOFT: Set bounds for 40 FST vars [1-40] and 20 coverage vars [41-60]
DEBUG OBJ: Using raw costs - alpha=10000.0 (battery weight), beta=1500000 (coverage penalty)
DEBUG OBJ: Allocated rowvec[0-60] for ncols=60 LP variables
DEBUG OBJ: Full_trees battery_score=0.000 for FST 0
DEBUG OBJ: Recalculating for FST 0 with 3 terminals
DEBUG OBJ: Terminal 0 (idx 5): battery=27.50, running_total=27.50
DEBUG OBJ: Terminal 1 (idx 1): battery=82.60, running_total=110.10
DEBUG OBJ: Terminal 2 (idx 4): battery=73.30, running_total=183.40
DEBUG OBJ: Recalculated battery_score=183.400 for FST 0
DEBUG OBJ: FST 0: tree_cost=398991.100, battery_cost=183.400 (weighted=1834000.0), combined=2232991.1
DEBUG OBJ: Full_trees battery_score=0.000 for FST 1
DEBUG OBJ: Recalculating for FST 1 with 3 terminals
DEBUG OBJ: Terminal 0 (idx 10): battery=30.20, running_total=30.20
DEBUG OBJ: Terminal 1 (idx 5): battery=27.50, running_total=57.70
DEBUG OBJ: Terminal 2 (idx 4): battery=73.30, running_total=131.00
DEBUG OBJ: Recalculated battery_score=131.000 for FST 1
DEBUG OBJ: FST 1: tree_cost=260889.712, battery_cost=131.000 (weighted=1310000.0), combined=1570889.7
DEBUG OBJ: Full_trees battery_score=0.000 for FST 2
DEBUG OBJ: Recalculating for FST 2 with 3 terminals
DEBUG OBJ: Terminal 0 (idx 13): battery=19.90, running_total=19.90
DEBUG OBJ: Terminal 1 (idx 0): battery=100.00, running_total=119.90
DEBUG OBJ: Terminal 2 (idx 6): battery=32.60, running_total=152.50
DEBUG OBJ: Recalculated battery_score=152.500 for FST 2
DEBUG OBJ: FST 2: tree_cost=256773.057, battery_cost=152.500 (weighted=1525000.0), combined=1781773.1
DEBUG OBJ: Full_trees battery_score=0.000 for FST 3
DEBUG OBJ: Recalculating for FST 3 with 3 terminals
DEBUG OBJ: Terminal 0 (idx 15): battery=86.60, running_total=86.60
DEBUG OBJ: Terminal 1 (idx 3): battery=85.50, running_total=172.10
DEBUG OBJ: Terminal 2 (idx 6): battery=32.60, running_total=204.70
DEBUG OBJ: Recalculated battery_score=204.700 for FST 3
DEBUG OBJ: FST 3: tree_cost=376541.557, battery_cost=204.700 (weighted=2047000.0), combined=2423541.6
DEBUG OBJ: Full_trees battery_score=0.000 for FST 4
DEBUG OBJ: Recalculating for FST 4 with 3 terminals
DEBUG OBJ: Terminal 0 (idx 19): battery=67.60, running_total=67.60
DEBUG OBJ: Terminal 1 (idx 3): battery=85.50, running_total=153.10
DEBUG OBJ: Terminal 2 (idx 6): battery=32.60, running_total=185.70
DEBUG OBJ: Recalculated battery_score=185.700 for FST 4
DEBUG OBJ: FST 4: tree_cost=646084.462, battery_cost=185.700 (weighted=1857000.0), combined=2503084.5
DEBUG OBJ: Full_trees battery_score=0.000 for FST 5
DEBUG OBJ: Recalculating for FST 5 with 3 terminals
DEBUG OBJ: Terminal 0 (idx 11): battery=0.00, running_total=0.00
DEBUG OBJ: Terminal 1 (idx 2): battery=71.70, running_total=71.70
DEBUG OBJ: Terminal 2 (idx 7): battery=43.20, running_total=114.90
DEBUG OBJ: Recalculated battery_score=114.900 for FST 5
DEBUG OBJ: FST 5: tree_cost=520973.020, battery_cost=114.900 (weighted=1149000.0), combined=1669973.0
DEBUG OBJ: Full_trees battery_score=0.000 for FST 6
DEBUG OBJ: Recalculating for FST 6 with 3 terminals
DEBUG OBJ: Terminal 0 (idx 9): battery=56.10, running_total=56.10
DEBUG OBJ: Terminal 1 (idx 7): battery=43.20, running_total=99.30
DEBUG OBJ: Terminal 2 (idx 8): battery=58.90, running_total=158.20
DEBUG OBJ: Recalculated battery_score=158.200 for FST 6
DEBUG OBJ: FST 6: tree_cost=334575.182, battery_cost=158.200 (weighted=1582000.0), combined=1916575.2
DEBUG OBJ: Full_trees battery_score=0.000 for FST 7
DEBUG OBJ: Recalculating for FST 7 with 3 terminals
DEBUG OBJ: Terminal 0 (idx 11): battery=0.00, running_total=0.00
DEBUG OBJ: Terminal 1 (idx 2): battery=71.70, running_total=71.70
DEBUG OBJ: Terminal 2 (idx 9): battery=56.10, running_total=127.80
DEBUG OBJ: Recalculated battery_score=127.800 for FST 7
DEBUG OBJ: FST 7: tree_cost=494448.457, battery_cost=127.800 (weighted=1278000.0), combined=1772448.5
DEBUG OBJ: Full_trees battery_score=0.000 for FST 8
DEBUG OBJ: Recalculating for FST 8 with 3 terminals
DEBUG OBJ: Terminal 0 (idx 11): battery=0.00, running_total=0.00
DEBUG OBJ: Terminal 1 (idx 7): battery=43.20, running_total=43.20
DEBUG OBJ: Terminal 2 (idx 9): battery=56.10, running_total=99.30
DEBUG OBJ: Recalculated battery_score=99.300 for FST 8
DEBUG OBJ: FST 8: tree_cost=455905.519, battery_cost=99.300 (weighted=993000.0), combined=1448905.5
DEBUG OBJ: Full_trees battery_score=0.000 for FST 9
DEBUG OBJ: Recalculating for FST 9 with 3 terminals
DEBUG OBJ: Terminal 0 (idx 12): battery=63.00, running_total=63.00
DEBUG OBJ: Terminal 1 (idx 11): battery=0.00, running_total=63.00
DEBUG OBJ: Terminal 2 (idx 9): battery=56.10, running_total=119.10
DEBUG OBJ: Recalculated battery_score=119.100 for FST 9
DEBUG OBJ: FST 9: tree_cost=584020.499, battery_cost=119.100 (weighted=1191000.0), combined=1775020.5
DEBUG OBJ: Full_trees battery_score=0.000 for FST 10
DEBUG OBJ: Recalculating for FST 10 with 3 terminals
DEBUG OBJ: Terminal 0 (idx 19): battery=67.60, running_total=67.60
DEBUG OBJ: Terminal 1 (idx 12): battery=63.00, running_total=130.60
DEBUG OBJ: Terminal 2 (idx 14): battery=70.30, running_total=200.90
DEBUG OBJ: Recalculated battery_score=200.900 for FST 10
DEBUG OBJ: FST 10: tree_cost=380918.244, battery_cost=200.900 (weighted=2009000.0), combined=2389918.2
DEBUG OBJ: Full_trees battery_score=0.000 for FST 11
DEBUG OBJ: Recalculating for FST 11 with 3 terminals
DEBUG OBJ: Terminal 0 (idx 19): battery=67.60, running_total=67.60
DEBUG OBJ: Terminal 1 (idx 15): battery=86.60, running_total=154.20
DEBUG OBJ: Terminal 2 (idx 6): battery=32.60, running_total=186.80
DEBUG OBJ: Recalculated battery_score=186.800 for FST 11
DEBUG OBJ: FST 11: tree_cost=621357.781, battery_cost=186.800 (weighted=1868000.0), combined=2489357.8
DEBUG OBJ: Full_trees battery_score=0.000 for FST 12
DEBUG OBJ: Recalculating for FST 12 with 3 terminals
DEBUG OBJ: Terminal 0 (idx 18): battery=31.20, running_total=31.20
DEBUG OBJ: Terminal 1 (idx 9): battery=56.10, running_total=87.30
DEBUG OBJ: Terminal 2 (idx 17): battery=56.60, running_total=143.90
DEBUG OBJ: Recalculated battery_score=143.900 for FST 12
DEBUG OBJ: FST 12: tree_cost=120675.719, battery_cost=143.900 (weighted=1439000.0), combined=1559675.7
DEBUG OBJ: Full_trees battery_score=0.000 for FST 13
DEBUG OBJ: Recalculating for FST 13 with 4 terminals
DEBUG OBJ: Terminal 0 (idx 11): battery=0.00, running_total=0.00
DEBUG OBJ: Terminal 1 (idx 7): battery=43.20, running_total=43.20
DEBUG OBJ: Terminal 2 (idx 8): battery=58.90, running_total=102.10
DEBUG OBJ: Terminal 3 (idx 9): battery=56.10, running_total=158.20
DEBUG OBJ: Recalculated battery_score=158.200 for FST 13
DEBUG OBJ: FST 13: tree_cost=551354.477, battery_cost=158.200 (weighted=1582000.0), combined=2133354.5
DEBUG OBJ: Full_trees battery_score=0.000 for FST 14
DEBUG OBJ: Recalculating for FST 14 with 4 terminals
DEBUG OBJ: Terminal 0 (idx 18): battery=31.20, running_total=31.20
DEBUG OBJ: Terminal 1 (idx 9): battery=56.10, running_total=87.30
DEBUG OBJ: Terminal 2 (idx 7): battery=43.20, running_total=130.50
DEBUG OBJ: Terminal 3 (idx 8): battery=58.90, running_total=189.40
DEBUG OBJ: Recalculated battery_score=189.400 for FST 14
DEBUG OBJ: FST 14: tree_cost=410262.679, battery_cost=189.400 (weighted=1894000.0), combined=2304262.7
DEBUG OBJ: Full_trees battery_score=0.000 for FST 15
DEBUG OBJ: Recalculating for FST 15 with 4 terminals
DEBUG OBJ: Terminal 0 (idx 18): battery=31.20, running_total=31.20
DEBUG OBJ: Terminal 1 (idx 9): battery=56.10, running_total=87.30
DEBUG OBJ: Terminal 2 (idx 7): battery=43.20, running_total=130.50
DEBUG OBJ: Terminal 3 (idx 17): battery=56.60, running_total=187.10
DEBUG OBJ: Recalculated battery_score=187.100 for FST 15
DEBUG OBJ: FST 15: tree_cost=362962.653, battery_cost=187.100 (weighted=1871000.0), combined=2233962.7
DEBUG OBJ: Full_trees battery_score=0.000 for FST 16
DEBUG OBJ: Recalculating for FST 16 with 4 terminals
DEBUG OBJ: Terminal 0 (idx 11): battery=0.00, running_total=0.00
DEBUG OBJ: Terminal 1 (idx 2): battery=71.70, running_total=71.70
DEBUG OBJ: Terminal 2 (idx 7): battery=43.20, running_total=114.90
DEBUG OBJ: Terminal 3 (idx 9): battery=56.10, running_total=171.00
DEBUG OBJ: Recalculated battery_score=171.000 for FST 16
DEBUG OBJ: FST 16: tree_cost=702244.403, battery_cost=171.000 (weighted=1710000.0), combined=2412244.4
DEBUG OBJ: Full_trees battery_score=0.000 for FST 17
DEBUG OBJ: Recalculating for FST 17 with 4 terminals
DEBUG OBJ: Terminal 0 (idx 19): battery=67.60, running_total=67.60
DEBUG OBJ: Terminal 1 (idx 15): battery=86.60, running_total=154.20
DEBUG OBJ: Terminal 2 (idx 3): battery=85.50, running_total=239.70
DEBUG OBJ: Terminal 3 (idx 6): battery=32.60, running_total=272.30
DEBUG OBJ: Recalculated battery_score=272.300 for FST 17
DEBUG OBJ: FST 17: tree_cost=673894.542, battery_cost=272.300 (weighted=2723000.0), combined=3396894.5
DEBUG OBJ: Full_trees battery_score=0.000 for FST 18
DEBUG OBJ: Recalculating for FST 18 with 4 terminals
DEBUG OBJ: Terminal 0 (idx 19): battery=67.60, running_total=67.60
DEBUG OBJ: Terminal 1 (idx 15): battery=86.60, running_total=154.20
DEBUG OBJ: Terminal 2 (idx 6): battery=32.60, running_total=186.80
DEBUG OBJ: Terminal 3 (idx 12): battery=63.00, running_total=249.80
DEBUG OBJ: Recalculated battery_score=249.800 for FST 18
DEBUG OBJ: FST 18: tree_cost=933994.022, battery_cost=249.800 (weighted=2498000.0), combined=3431994.0
DEBUG OBJ: Full_trees battery_score=0.000 for FST 19
DEBUG OBJ: Recalculating for FST 19 with 5 terminals
DEBUG OBJ: Terminal 0 (idx 18): battery=31.20, running_total=31.20
DEBUG OBJ: Terminal 1 (idx 9): battery=56.10, running_total=87.30
DEBUG OBJ: Terminal 2 (idx 7): battery=43.20, running_total=130.50
DEBUG OBJ: Terminal 3 (idx 8): battery=58.90, running_total=189.40
DEBUG OBJ: Terminal 4 (idx 17): battery=56.60, running_total=246.00
DEBUG OBJ: Recalculated battery_score=246.000 for FST 19
DEBUG OBJ: FST 19: tree_cost=454199.906, battery_cost=246.000 (weighted=2460000.0), combined=2914199.9
DEBUG OBJ: Full_trees battery_score=0.000 for FST 20
DEBUG OBJ: Recalculating for FST 20 with 5 terminals
DEBUG OBJ: Terminal 0 (idx 19): battery=67.60, running_total=67.60
DEBUG OBJ: Terminal 1 (idx 15): battery=86.60, running_total=154.20
DEBUG OBJ: Terminal 2 (idx 3): battery=85.50, running_total=239.70
DEBUG OBJ: Terminal 3 (idx 6): battery=32.60, running_total=272.30
DEBUG OBJ: Terminal 4 (idx 12): battery=63.00, running_total=335.30
DEBUG OBJ: Recalculated battery_score=335.300 for FST 20
DEBUG OBJ: FST 20: tree_cost=986439.144, battery_cost=335.300 (weighted=3353000.0), combined=4339439.1
DEBUG OBJ: Full_trees battery_score=0.000 for FST 21
DEBUG OBJ: Recalculating for FST 21 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 18): battery=31.20, running_total=31.20
DEBUG OBJ: Terminal 1 (idx 17): battery=56.60, running_total=87.80
DEBUG OBJ: Recalculated battery_score=87.800 for FST 21
DEBUG OBJ: FST 21: tree_cost=46859.249, battery_cost=87.800 (weighted=878000.0), combined=924859.2
DEBUG OBJ: Full_trees battery_score=0.000 for FST 22
DEBUG OBJ: Recalculating for FST 22 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 15): battery=86.60, running_total=86.60
DEBUG OBJ: Terminal 1 (idx 3): battery=85.50, running_total=172.10
DEBUG OBJ: Recalculated battery_score=172.100 for FST 22
DEBUG OBJ: FST 22: tree_cost=52662.185, battery_cost=172.100 (weighted=1721000.0), combined=1773662.2
DEBUG OBJ: Full_trees battery_score=0.000 for FST 23
DEBUG OBJ: Recalculating for FST 23 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 16): battery=48.00, running_total=48.00
DEBUG OBJ: Terminal 1 (idx 2): battery=71.70, running_total=119.70
DEBUG OBJ: Recalculated battery_score=119.700 for FST 23
DEBUG OBJ: FST 23: tree_cost=62275.339, battery_cost=119.700 (weighted=1197000.0), combined=1259275.3
DEBUG OBJ: Full_trees battery_score=0.000 for FST 24
DEBUG OBJ: Recalculating for FST 24 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 16): battery=48.00, running_total=48.00
DEBUG OBJ: Terminal 1 (idx 1): battery=82.60, running_total=130.60
DEBUG OBJ: Recalculated battery_score=130.600 for FST 24
DEBUG OBJ: FST 24: tree_cost=75379.993, battery_cost=130.600 (weighted=1306000.0), combined=1381380.0
DEBUG OBJ: Full_trees battery_score=0.000 for FST 25
DEBUG OBJ: Recalculating for FST 25 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 18): battery=31.20, running_total=31.20
DEBUG OBJ: Terminal 1 (idx 9): battery=56.10, running_total=87.30
DEBUG OBJ: Recalculated battery_score=87.300 for FST 25
DEBUG OBJ: FST 25: tree_cost=75695.846, battery_cost=87.300 (weighted=873000.0), combined=948695.8
DEBUG OBJ: Full_trees battery_score=0.000 for FST 26
DEBUG OBJ: Recalculating for FST 26 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 14): battery=70.30, running_total=70.30
DEBUG OBJ: Terminal 1 (idx 19): battery=67.60, running_total=137.90
DEBUG OBJ: Recalculated battery_score=137.900 for FST 26
DEBUG OBJ: FST 26: tree_cost=80703.013, battery_cost=137.900 (weighted=1379000.0), combined=1459703.0
DEBUG OBJ: Full_trees battery_score=0.000 for FST 27
DEBUG OBJ: Recalculating for FST 27 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 0): battery=100.00, running_total=100.00
DEBUG OBJ: Terminal 1 (idx 13): battery=19.90, running_total=119.90
DEBUG OBJ: Recalculated battery_score=119.900 for FST 27
DEBUG OBJ: FST 27: tree_cost=93734.596, battery_cost=119.900 (weighted=1199000.0), combined=1292734.6
DEBUG OBJ: Full_trees battery_score=0.000 for FST 28
DEBUG OBJ: Recalculating for FST 28 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 8): battery=58.90, running_total=58.90
DEBUG OBJ: Terminal 1 (idx 7): battery=43.20, running_total=102.10
DEBUG OBJ: Recalculated battery_score=102.100 for FST 28
DEBUG OBJ: FST 28: tree_cost=95452.578, battery_cost=102.100 (weighted=1021000.0), combined=1116452.6
DEBUG OBJ: Full_trees battery_score=0.000 for FST 29
DEBUG OBJ: Recalculating for FST 29 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 5): battery=27.50, running_total=27.50
DEBUG OBJ: Terminal 1 (idx 10): battery=30.20, running_total=57.70
DEBUG OBJ: Recalculated battery_score=57.700 for FST 29
DEBUG OBJ: FST 29: tree_cost=102977.757, battery_cost=57.700 (weighted=577000.0), combined=679977.8
DEBUG OBJ: Full_trees battery_score=0.000 for FST 30
DEBUG OBJ: Recalculating for FST 30 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 4): battery=73.30, running_total=73.30
DEBUG OBJ: Terminal 1 (idx 5): battery=27.50, running_total=100.80
DEBUG OBJ: Recalculated battery_score=100.800 for FST 30
DEBUG OBJ: FST 30: tree_cost=165327.925, battery_cost=100.800 (weighted=1008000.0), combined=1173327.9
DEBUG OBJ: Full_trees battery_score=0.000 for FST 31
DEBUG OBJ: Recalculating for FST 31 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 6): battery=32.60, running_total=32.60
DEBUG OBJ: Terminal 1 (idx 0): battery=100.00, running_total=132.60
DEBUG OBJ: Recalculated battery_score=132.600 for FST 31
DEBUG OBJ: FST 31: tree_cost=170420.027, battery_cost=132.600 (weighted=1326000.0), combined=1496420.0
DEBUG OBJ: Full_trees battery_score=0.000 for FST 32
DEBUG OBJ: Recalculating for FST 32 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 13): battery=19.90, running_total=19.90
DEBUG OBJ: Terminal 1 (idx 4): battery=73.30, running_total=93.20
DEBUG OBJ: Recalculated battery_score=93.200 for FST 32
DEBUG OBJ: FST 32: tree_cost=179069.657, battery_cost=93.200 (weighted=932000.0), combined=1111069.7
DEBUG OBJ: Full_trees battery_score=0.000 for FST 33
DEBUG OBJ: Recalculating for FST 33 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 5): battery=27.50, running_total=27.50
DEBUG OBJ: Terminal 1 (idx 1): battery=82.60, running_total=110.10
DEBUG OBJ: Recalculated battery_score=110.100 for FST 33
DEBUG OBJ: FST 33: tree_cost=234458.486, battery_cost=110.100 (weighted=1101000.0), combined=1335458.5
DEBUG OBJ: Full_trees battery_score=0.000 for FST 34
DEBUG OBJ: Recalculating for FST 34 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 11): battery=0.00, running_total=0.00
DEBUG OBJ: Terminal 1 (idx 9): battery=56.10, running_total=56.10
DEBUG OBJ: Recalculated battery_score=56.100 for FST 34
DEBUG OBJ: FST 34: tree_cost=235891.713, battery_cost=56.100 (weighted=561000.0), combined=796891.7
DEBUG OBJ: Full_trees battery_score=0.000 for FST 35
DEBUG OBJ: Recalculating for FST 35 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 9): battery=56.10, running_total=56.10
DEBUG OBJ: Terminal 1 (idx 7): battery=43.20, running_total=99.30
DEBUG OBJ: Recalculated battery_score=99.300 for FST 35
DEBUG OBJ: FST 35: tree_cost=242462.956, battery_cost=99.300 (weighted=993000.0), combined=1235463.0
DEBUG OBJ: Full_trees battery_score=0.000 for FST 36
DEBUG OBJ: Recalculating for FST 36 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 2): battery=71.70, running_total=71.70
DEBUG OBJ: Terminal 1 (idx 11): battery=0.00, running_total=71.70
DEBUG OBJ: Recalculated battery_score=71.700 for FST 36
DEBUG OBJ: FST 36: tree_cost=258947.370, battery_cost=71.700 (weighted=717000.0), combined=975947.4
DEBUG OBJ: Full_trees battery_score=0.000 for FST 37
DEBUG OBJ: Recalculating for FST 37 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 19): battery=67.60, running_total=67.60
DEBUG OBJ: Terminal 1 (idx 12): battery=63.00, running_total=130.60
DEBUG OBJ: Recalculated battery_score=130.600 for FST 37
DEBUG OBJ: FST 37: tree_cost=313063.098, battery_cost=130.600 (weighted=1306000.0), combined=1619063.1
DEBUG OBJ: Full_trees battery_score=0.000 for FST 38
DEBUG OBJ: Recalculating for FST 38 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 15): battery=86.60, running_total=86.60
DEBUG OBJ: Terminal 1 (idx 19): battery=67.60, running_total=154.20
DEBUG OBJ: Recalculated battery_score=154.200 for FST 38
DEBUG OBJ: FST 38: tree_cost=314219.517, battery_cost=154.200 (weighted=1542000.0), combined=1856219.5
DEBUG OBJ: Full_trees battery_score=0.000 for FST 39
DEBUG OBJ: Recalculating for FST 39 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 3): battery=85.50, running_total=85.50
DEBUG OBJ: Terminal 1 (idx 6): battery=32.60, running_total=118.10
DEBUG OBJ: Recalculated battery_score=118.100 for FST 39
DEBUG OBJ: FST 39: tree_cost=327174.269, battery_cost=118.100 (weighted=1181000.0), combined=1508174.3
DEBUG OBJ: Added penalty terms beta=1500000 for 20 not_covered variables [41-60]
DEBUG LP_MATRIX: LP has 0 rows, 60 columns after setup
DEBUG EXTRA_COEFF: Calculated extra_coeff=1 for 135 rows
DEBUG SOFT: Added not_covered_0 (RC_var 43 -> matrix_idx 40) to soft constraint 134
DEBUG MATRIX_CHECK: nzi=495, ncoeff=514, extra_coeff=1, expected=515
ERROR: Matrix coefficient count mismatch! nzi=495 != ncoeff=514 + extra_coeff=1
WARNING: Allowing discrepancy in budget mode (nzi=495 vs expected=515)
DEBUG MATRIX: Total matrix has 495 entries (nzi=495)
DEBUG MATRIX: matbeg[135] = 495 (should equal nzi)
DEBUG LP: Calling add_rows with 135 rows
DEBUG LP: Before add_rows: LP has 0 rows, 60 cols, 60 nonzeros
DEBUG LP: After add_rows: LP has 135 rows, 60 cols, 555 nonzeros
DEBUG NLPROWS: nrows=135, extra_rows=0, setting nlprows=135
 % _gst_build_initial_formulation: 0.00 seconds.
DEBUG BB: Expected nlprows=135, total rows=163
DEBUG BB: Row 0 (uid=0) has lprow=0 (included, j=0)
DEBUG BB: Row 1 (uid=1) has lprow=1 (included, j=1)
DEBUG BB: Row 2 (uid=2) has lprow=2 (included, j=2)
DEBUG BB: Row 3 (uid=3) has lprow=3 (included, j=3)
DEBUG BB: Row 4 (uid=4) has lprow=4 (included, j=4)
DEBUG BB: Row 5 (uid=5) has lprow=5 (included, j=5)
DEBUG BB: Row 6 (uid=6) has lprow=6 (included, j=6)
DEBUG BB: Row 7 (uid=7) has lprow=7 (included, j=7)
DEBUG BB: Row 8 (uid=8) has lprow=8 (included, j=8)
DEBUG BB: Row 9 (uid=9) has lprow=9 (included, j=9)
DEBUG BB: Row 10 (uid=10) has lprow=10 (included, j=10)
DEBUG BB: Row 11 (uid=11) has lprow=11 (included, j=11)
DEBUG BB: Row 12 (uid=12) has lprow=12 (included, j=12)
DEBUG BB: Row 13 (uid=13) has lprow=13 (included, j=13)
DEBUG BB: Row 14 (uid=14) has lprow=14 (included, j=14)
DEBUG BB: Row 15 (uid=15) has lprow=15 (included, j=15)
DEBUG BB: Row 16 (uid=16) has lprow=16 (included, j=16)
DEBUG BB: Row 17 (uid=17) has lprow=17 (included, j=17)
DEBUG BB: Row 18 (uid=18) has lprow=18 (included, j=18)
DEBUG BB: Row 19 (uid=19) has lprow=19 (included, j=19)
DEBUG BB: Row 20 (uid=20) has lprow=20 (included, j=20)
DEBUG BB: Row 21 (uid=21) has lprow=21 (included, j=21)
DEBUG BB: Row 22 (uid=22) has lprow=22 (included, j=22)
DEBUG BB: Row 23 (uid=23) has lprow=23 (included, j=23)
DEBUG BB: Row 24 (uid=24) has lprow=24 (included, j=24)
DEBUG BB: Row 25 (uid=25) has lprow=25 (included, j=25)
DEBUG BB: Row 26 (uid=26) has lprow=26 (included, j=26)
DEBUG BB: Row 27 (uid=27) has lprow=27 (included, j=27)
DEBUG BB: Row 28 (uid=28) has lprow=28 (included, j=28)
DEBUG BB: Row 29 (uid=29) has lprow=29 (included, j=29)
DEBUG BB: Row 30 (uid=30) has lprow=30 (included, j=30)
DEBUG BB: Row 31 (uid=31) has lprow=31 (included, j=31)
DEBUG BB: Row 32 (uid=32) has lprow=32 (included, j=32)
DEBUG BB: Row 33 (uid=33) has lprow=33 (included, j=33)
DEBUG BB: Row 34 (uid=34) has lprow=34 (included, j=34)
DEBUG BB: Row 35 (uid=35) has lprow=35 (included, j=35)
DEBUG BB: Row 36 (uid=36) has lprow=36 (included, j=36)
DEBUG BB: Row 37 (uid=37) has lprow=37 (included, j=37)
DEBUG BB: Row 38 (uid=38) has lprow=38 (included, j=38)
DEBUG BB: Row 39 (uid=39) has lprow=39 (included, j=39)
DEBUG BB: Row 40 (uid=40) has lprow=40 (included, j=40)
DEBUG BB: Row 41 (uid=41) has lprow=41 (included, j=41)
DEBUG BB: Row 42 (uid=42) has lprow=42 (included, j=42)
DEBUG BB: Row 43 (uid=43) has lprow=43 (included, j=43)
DEBUG BB: Row 44 (uid=44) has lprow=44 (included, j=44)
DEBUG BB: Row 45 (uid=45) has lprow=45 (included, j=45)
DEBUG BB: Row 46 (uid=46) has lprow=46 (included, j=46)
DEBUG BB: Row 47 (uid=47) has lprow=47 (included, j=47)
DEBUG BB: Row 48 (uid=48) has lprow=48 (included, j=48)
DEBUG BB: Row 49 (uid=49) has lprow=49 (included, j=49)
DEBUG BB: Row 50 (uid=50) has lprow=50 (included, j=50)
DEBUG BB: Row 51 (uid=51) has lprow=51 (included, j=51)
DEBUG BB: Row 52 (uid=52) has lprow=52 (included, j=52)
DEBUG BB: Row 53 (uid=53) has lprow=53 (included, j=53)
DEBUG BB: Row 54 (uid=54) has lprow=54 (included, j=54)
DEBUG BB: Row 55 (uid=55) has lprow=55 (included, j=55)
DEBUG BB: Row 56 (uid=56) has lprow=56 (included, j=56)
DEBUG BB: Row 57 (uid=57) has lprow=57 (included, j=57)
DEBUG BB: Row 58 (uid=58) has lprow=58 (included, j=58)
DEBUG BB: Row 59 (uid=59) has lprow=59 (included, j=59)
DEBUG BB: Row 60 (uid=60) has lprow=60 (included, j=60)
DEBUG BB: Row 61 (uid=61) has lprow=61 (included, j=61)
DEBUG BB: Row 62 (uid=62) has lprow=62 (included, j=62)
DEBUG BB: Row 63 (uid=63) has lprow=63 (included, j=63)
DEBUG BB: Row 64 (uid=64) has lprow=64 (included, j=64)
DEBUG BB: Row 65 (uid=65) has lprow=65 (included, j=65)
DEBUG BB: Row 66 (uid=66) has lprow=66 (included, j=66)
DEBUG BB: Row 67 (uid=67) has lprow=67 (included, j=67)
DEBUG BB: Row 68 (uid=68) has lprow=68 (included, j=68)
DEBUG BB: Row 69 (uid=69) has lprow=69 (included, j=69)
DEBUG BB: Row 70 (uid=70) has lprow=70 (included, j=70)
DEBUG BB: Row 71 (uid=71) has lprow=71 (included, j=71)
DEBUG BB: Row 72 (uid=72) has lprow=72 (included, j=72)
DEBUG BB: Row 73 (uid=73) has lprow=73 (included, j=73)
DEBUG BB: Row 74 (uid=74) has lprow=74 (included, j=74)
DEBUG BB: Row 75 (uid=75) has lprow=75 (included, j=75)
DEBUG BB: Row 76 (uid=76) has lprow=76 (included, j=76)
DEBUG BB: Row 77 (uid=77) has lprow=77 (included, j=77)
DEBUG BB: Row 78 (uid=78) has lprow=78 (included, j=78)
DEBUG BB: Row 79 (uid=79) has lprow=79 (included, j=79)
DEBUG BB: Row 80 (uid=80) has lprow=80 (included, j=80)
DEBUG BB: Row 81 (uid=81) has lprow=81 (included, j=81)
DEBUG BB: Row 82 (uid=82) has lprow=82 (included, j=82)
DEBUG BB: Row 83 (uid=83) has lprow=83 (included, j=83)
DEBUG BB: Row 84 (uid=84) has lprow=84 (included, j=84)
DEBUG BB: Row 85 (uid=85) has lprow=85 (included, j=85)
DEBUG BB: Row 86 (uid=86) has lprow=86 (included, j=86)
DEBUG BB: Row 87 (uid=87) has lprow=87 (included, j=87)
DEBUG BB: Row 88 (uid=88) has lprow=88 (included, j=88)
DEBUG BB: Row 89 (uid=89) has lprow=89 (included, j=89)
DEBUG BB: Row 90 (uid=90) has lprow=90 (included, j=90)
DEBUG BB: Row 91 (uid=91) has lprow=91 (included, j=91)
DEBUG BB: Row 92 (uid=92) has lprow=92 (included, j=92)
DEBUG BB: Row 93 (uid=93) has lprow=93 (included, j=93)
DEBUG BB: Row 94 (uid=94) has lprow=94 (included, j=94)
DEBUG BB: Row 95 (uid=95) has lprow=95 (included, j=95)
DEBUG BB: Row 96 (uid=96) has lprow=96 (included, j=96)
DEBUG BB: Row 97 (uid=97) has lprow=97 (included, j=97)
DEBUG BB: Row 98 (uid=98) has lprow=98 (included, j=98)
DEBUG BB: Row 99 (uid=99) has lprow=99 (included, j=99)
DEBUG BB: Row 100 (uid=100) has lprow=100 (included, j=100)
DEBUG BB: Row 101 (uid=101) has lprow=101 (included, j=101)
DEBUG BB: Row 102 (uid=102) has lprow=102 (included, j=102)
DEBUG BB: Row 103 (uid=103) has lprow=103 (included, j=103)
DEBUG BB: Row 104 (uid=104) has lprow=104 (included, j=104)
DEBUG BB: Row 105 (uid=105) has lprow=105 (included, j=105)
DEBUG BB: Row 106 (uid=106) has lprow=106 (included, j=106)
DEBUG BB: Row 107 (uid=107) has lprow=107 (included, j=107)
DEBUG BB: Row 108 (uid=108) has lprow=108 (included, j=108)
DEBUG BB: Row 109 (uid=109) has lprow=109 (included, j=109)
DEBUG BB: Row 110 (uid=110) has lprow=110 (included, j=110)
DEBUG BB: Row 111 (uid=111) has lprow=111 (included, j=111)
DEBUG BB: Row 112 (uid=112) has lprow=112 (included, j=112)
DEBUG BB: Row 113 (uid=113) has lprow=113 (included, j=113)
DEBUG BB: Row 114 (uid=114) has lprow=114 (included, j=114)
DEBUG BB: Row 115 (uid=115) has lprow=115 (included, j=115)
DEBUG BB: Row 116 (uid=116) has lprow=116 (included, j=116)
DEBUG BB: Row 117 (uid=117) has lprow=117 (included, j=117)
DEBUG BB: Row 118 (uid=118) has lprow=118 (included, j=118)
DEBUG BB: Row 119 (uid=119) has lprow=119 (included, j=119)
DEBUG BB: Row 120 (uid=120) has lprow=120 (included, j=120)
DEBUG BB: Row 121 (uid=121) has lprow=121 (included, j=121)
DEBUG BB: Row 122 (uid=122) has lprow=122 (included, j=122)
DEBUG BB: Row 123 (uid=123) has lprow=123 (included, j=123)
DEBUG BB: Row 124 (uid=124) has lprow=124 (included, j=124)
DEBUG BB: Row 125 (uid=125) has lprow=125 (included, j=125)
DEBUG BB: Row 126 (uid=126) has lprow=126 (included, j=126)
DEBUG BB: Row 127 (uid=127) has lprow=127 (included, j=127)
DEBUG BB: Row 128 (uid=128) has lprow=128 (included, j=128)
DEBUG BB: Row 129 (uid=129) has lprow=129 (included, j=129)
DEBUG BB: Row 130 (uid=130) has lprow=130 (included, j=130)
DEBUG BB: Row 131 (uid=131) has lprow=131 (included, j=131)
DEBUG BB: Row 132 (uid=132) has lprow=132 (included, j=132)
DEBUG BB: Row 133 (uid=133) has lprow=-1 (skipped)
DEBUG BB: Row 134 (uid=134) has lprow=-1 (skipped)
DEBUG BB: Row 135 (uid=135) has lprow=-1 (skipped)
DEBUG BB: Row 136 (uid=136) has lprow=-1 (skipped)
DEBUG BB: Row 137 (uid=137) has lprow=-1 (skipped)
DEBUG BB: Row 138 (uid=138) has lprow=-1 (skipped)
DEBUG BB: Row 139 (uid=139) has lprow=-1 (skipped)
DEBUG BB: Row 140 (uid=140) has lprow=-1 (skipped)
DEBUG BB: Row 141 (uid=141) has lprow=-1 (skipped)
DEBUG BB: Row 142 (uid=142) has lprow=-1 (skipped)
DEBUG BB: Row 143 (uid=143) has lprow=-1 (skipped)
DEBUG BB: Row 144 (uid=144) has lprow=-1 (skipped)
DEBUG BB: Row 145 (uid=145) has lprow=-1 (skipped)
DEBUG BB: Row 146 (uid=146) has lprow=-1 (skipped)
DEBUG BB: Row 147 (uid=147) has lprow=-1 (skipped)
DEBUG BB: Row 148 (uid=148) has lprow=-1 (skipped)
DEBUG BB: Row 149 (uid=149) has lprow=-1 (skipped)
DEBUG BB: Row 150 (uid=150) has lprow=-1 (skipped)
DEBUG BB: Row 151 (uid=151) has lprow=-1 (skipped)
DEBUG BB: Row 152 (uid=152) has lprow=-1 (skipped)
DEBUG BB: Row 153 (uid=153) has lprow=-1 (skipped)
DEBUG BB: Row 154 (uid=154) has lprow=-1 (skipped)
DEBUG BB: Row 155 (uid=155) has lprow=-1 (skipped)
DEBUG BB: Row 156 (uid=156) has lprow=-1 (skipped)
DEBUG BB: Row 157 (uid=157) has lprow=-1 (skipped)
DEBUG BB: Row 158 (uid=158) has lprow=-1 (skipped)
DEBUG BB: Row 159 (uid=159) has lprow=-1 (skipped)
DEBUG BB: Row 160 (uid=160) has lprow=-1 (skipped)
DEBUG BB: Row 161 (uid=161) has lprow=133 (included, j=133)
DEBUG BB: Row 162 (uid=162) has lprow=134 (included, j=134)
DEBUG BB: Found 135 actual LP rows, expected 135
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x563ae8f36600
% Resuming node 0
DEBUG CONSTRNT: LP rows=135, pool->nlprows=135, pool->npend=0
DEBUG CONSTRNT: Checking 135 LP rows (pool tracks 135, total LP rows 135)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 1
DEBUG CONSTRNT: Pool row 1 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 2
DEBUG CONSTRNT: Pool row 2 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 3
DEBUG CONSTRNT: Pool row 3 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 4
DEBUG CONSTRNT: Pool row 4 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 8
DEBUG CONSTRNT: Pool row 8 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 9
DEBUG CONSTRNT: Pool row 9 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 11
DEBUG CONSTRNT: Pool row 11 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 14
DEBUG CONSTRNT: Pool row 14 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 22
DEBUG CONSTRNT: Pool row 22 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 24
DEBUG CONSTRNT: Pool row 24 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 26
DEBUG CONSTRNT: Pool row 26 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 27
DEBUG CONSTRNT: Pool row 27 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 28
DEBUG CONSTRNT: Pool row 28 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 30
DEBUG CONSTRNT: Pool row 30 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 31
DEBUG CONSTRNT: Pool row 31 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 32
DEBUG CONSTRNT: Pool row 32 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 34
DEBUG CONSTRNT: Pool row 34 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 35
DEBUG CONSTRNT: Pool row 35 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 36
DEBUG CONSTRNT: Pool row 36 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 37
DEBUG CONSTRNT: Pool row 37 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 38
DEBUG CONSTRNT: Pool row 38 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 39
DEBUG CONSTRNT: Pool row 39 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 40
DEBUG CONSTRNT: Pool row 40 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 41
DEBUG CONSTRNT: Pool row 41 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 42
DEBUG CONSTRNT: Pool row 42 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 44
DEBUG CONSTRNT: Pool row 44 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 45
DEBUG CONSTRNT: Pool row 45 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 46
DEBUG CONSTRNT: Pool row 46 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 47
DEBUG CONSTRNT: Pool row 47 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 48
DEBUG CONSTRNT: Pool row 48 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 49
DEBUG CONSTRNT: Pool row 49 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 50
DEBUG CONSTRNT: Pool row 50 has lprow=50, expected 50
DEBUG CONSTRNT: Checking LP row 51 -> pool row 51
DEBUG CONSTRNT: Pool row 51 has lprow=51, expected 51
DEBUG CONSTRNT: Checking LP row 52 -> pool row 52
DEBUG CONSTRNT: Pool row 52 has lprow=52, expected 52
DEBUG CONSTRNT: Checking LP row 53 -> pool row 53
DEBUG CONSTRNT: Pool row 53 has lprow=53, expected 53
DEBUG CONSTRNT: Checking LP row 54 -> pool row 54
DEBUG CONSTRNT: Pool row 54 has lprow=54, expected 54
DEBUG CONSTRNT: Checking LP row 55 -> pool row 55
DEBUG CONSTRNT: Pool row 55 has lprow=55, expected 55
DEBUG CONSTRNT: Checking LP row 56 -> pool row 56
DEBUG CONSTRNT: Pool row 56 has lprow=56, expected 56
DEBUG CONSTRNT: Checking LP row 57 -> pool row 57
DEBUG CONSTRNT: Pool row 57 has lprow=57, expected 57
DEBUG CONSTRNT: Checking LP row 58 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=58, expected 58
DEBUG CONSTRNT: Checking LP row 59 -> pool row 59
DEBUG CONSTRNT: Pool row 59 has lprow=59, expected 59
DEBUG CONSTRNT: Checking LP row 60 -> pool row 60
DEBUG CONSTRNT: Pool row 60 has lprow=60, expected 60
DEBUG CONSTRNT: Checking LP row 61 -> pool row 61
DEBUG CONSTRNT: Pool row 61 has lprow=61, expected 61
DEBUG CONSTRNT: Checking LP row 62 -> pool row 62
DEBUG CONSTRNT: Pool row 62 has lprow=62, expected 62
DEBUG CONSTRNT: Checking LP row 63 -> pool row 63
DEBUG CONSTRNT: Pool row 63 has lprow=63, expected 63
DEBUG CONSTRNT: Checking LP row 64 -> pool row 64
DEBUG CONSTRNT: Pool row 64 has lprow=64, expected 64
DEBUG CONSTRNT: Checking LP row 65 -> pool row 65
DEBUG CONSTRNT: Pool row 65 has lprow=65, expected 65
DEBUG CONSTRNT: Checking LP row 66 -> pool row 66
DEBUG CONSTRNT: Pool row 66 has lprow=66, expected 66
DEBUG CONSTRNT: Checking LP row 67 -> pool row 67
DEBUG CONSTRNT: Pool row 67 has lprow=67, expected 67
DEBUG CONSTRNT: Checking LP row 68 -> pool row 68
DEBUG CONSTRNT: Pool row 68 has lprow=68, expected 68
DEBUG CONSTRNT: Checking LP row 69 -> pool row 69
DEBUG CONSTRNT: Pool row 69 has lprow=69, expected 69
DEBUG CONSTRNT: Checking LP row 70 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=70, expected 70
DEBUG CONSTRNT: Checking LP row 71 -> pool row 71
DEBUG CONSTRNT: Pool row 71 has lprow=71, expected 71
DEBUG CONSTRNT: Checking LP row 72 -> pool row 72
DEBUG CONSTRNT: Pool row 72 has lprow=72, expected 72
DEBUG CONSTRNT: Checking LP row 73 -> pool row 73
DEBUG CONSTRNT: Pool row 73 has lprow=73, expected 73
DEBUG CONSTRNT: Checking LP row 74 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=74, expected 74
DEBUG CONSTRNT: Checking LP row 75 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=75, expected 75
DEBUG CONSTRNT: Checking LP row 76 -> pool row 76
DEBUG CONSTRNT: Pool row 76 has lprow=76, expected 76
DEBUG CONSTRNT: Checking LP row 77 -> pool row 77
DEBUG CONSTRNT: Pool row 77 has lprow=77, expected 77
DEBUG CONSTRNT: Checking LP row 78 -> pool row 78
DEBUG CONSTRNT: Pool row 78 has lprow=78, expected 78
DEBUG CONSTRNT: Checking LP row 79 -> pool row 79
DEBUG CONSTRNT: Pool row 79 has lprow=79, expected 79
DEBUG CONSTRNT: Checking LP row 80 -> pool row 80
DEBUG CONSTRNT: Pool row 80 has lprow=80, expected 80
DEBUG CONSTRNT: Checking LP row 81 -> pool row 81
DEBUG CONSTRNT: Pool row 81 has lprow=81, expected 81
DEBUG CONSTRNT: Checking LP row 82 -> pool row 82
DEBUG CONSTRNT: Pool row 82 has lprow=82, expected 82
DEBUG CONSTRNT: Checking LP row 83 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=83, expected 83
DEBUG CONSTRNT: Checking LP row 84 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=84, expected 84
DEBUG CONSTRNT: Checking LP row 85 -> pool row 85
DEBUG CONSTRNT: Pool row 85 has lprow=85, expected 85
DEBUG CONSTRNT: Checking LP row 86 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=86, expected 86
DEBUG CONSTRNT: Checking LP row 87 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=87, expected 87
DEBUG CONSTRNT: Checking LP row 88 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=88, expected 88
DEBUG CONSTRNT: Checking LP row 89 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=89, expected 89
DEBUG CONSTRNT: Checking LP row 90 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=90, expected 90
DEBUG CONSTRNT: Checking LP row 91 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=91, expected 91
DEBUG CONSTRNT: Checking LP row 92 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=92, expected 92
DEBUG CONSTRNT: Checking LP row 93 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=93, expected 93
DEBUG CONSTRNT: Checking LP row 94 -> pool row 94
DEBUG CONSTRNT: Pool row 94 has lprow=94, expected 94
DEBUG CONSTRNT: Checking LP row 95 -> pool row 95
DEBUG CONSTRNT: Pool row 95 has lprow=95, expected 95
DEBUG CONSTRNT: Checking LP row 96 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=96, expected 96
DEBUG CONSTRNT: Checking LP row 97 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=97, expected 97
DEBUG CONSTRNT: Checking LP row 98 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=98, expected 98
DEBUG CONSTRNT: Checking LP row 99 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=99, expected 99
DEBUG CONSTRNT: Checking LP row 100 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=100, expected 100
DEBUG CONSTRNT: Checking LP row 101 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=101, expected 101
DEBUG CONSTRNT: Checking LP row 102 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=102, expected 102
DEBUG CONSTRNT: Checking LP row 103 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=103, expected 103
DEBUG CONSTRNT: Checking LP row 104 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=104, expected 104
DEBUG CONSTRNT: Checking LP row 105 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=105, expected 105
DEBUG CONSTRNT: Checking LP row 106 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=106, expected 106
DEBUG CONSTRNT: Checking LP row 107 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=107, expected 107
DEBUG CONSTRNT: Checking LP row 108 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=108, expected 108
DEBUG CONSTRNT: Checking LP row 109 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=109, expected 109
DEBUG CONSTRNT: Checking LP row 110 -> pool row 110
DEBUG CONSTRNT: Pool row 110 has lprow=110, expected 110
DEBUG CONSTRNT: Checking LP row 111 -> pool row 111
DEBUG CONSTRNT: Pool row 111 has lprow=111, expected 111
DEBUG CONSTRNT: Checking LP row 112 -> pool row 112
DEBUG CONSTRNT: Pool row 112 has lprow=112, expected 112
DEBUG CONSTRNT: Checking LP row 113 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=113, expected 113
DEBUG CONSTRNT: Checking LP row 114 -> pool row 114
DEBUG CONSTRNT: Pool row 114 has lprow=114, expected 114
DEBUG CONSTRNT: Checking LP row 115 -> pool row 115
DEBUG CONSTRNT: Pool row 115 has lprow=115, expected 115
DEBUG CONSTRNT: Checking LP row 116 -> pool row 116
DEBUG CONSTRNT: Pool row 116 has lprow=116, expected 116
DEBUG CONSTRNT: Checking LP row 117 -> pool row 117
DEBUG CONSTRNT: Pool row 117 has lprow=117, expected 117
DEBUG CONSTRNT: Checking LP row 118 -> pool row 118
DEBUG CONSTRNT: Pool row 118 has lprow=118, expected 118
DEBUG CONSTRNT: Checking LP row 119 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=119, expected 119
DEBUG CONSTRNT: Checking LP row 120 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=120, expected 120
DEBUG CONSTRNT: Checking LP row 121 -> pool row 121
DEBUG CONSTRNT: Pool row 121 has lprow=121, expected 121
DEBUG CONSTRNT: Checking LP row 122 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=122, expected 122
DEBUG CONSTRNT: Checking LP row 123 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=123, expected 123
DEBUG CONSTRNT: Checking LP row 124 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=124, expected 124
DEBUG CONSTRNT: Checking LP row 125 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=125, expected 125
DEBUG CONSTRNT: Checking LP row 126 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=126, expected 126
DEBUG CONSTRNT: Checking LP row 127 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=127, expected 127
DEBUG CONSTRNT: Checking LP row 128 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=128, expected 128
DEBUG CONSTRNT: Checking LP row 129 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=129, expected 129
DEBUG CONSTRNT: Checking LP row 130 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=130, expected 130
DEBUG CONSTRNT: Checking LP row 131 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=131, expected 131
DEBUG CONSTRNT: Checking LP row 132 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=132, expected 132
DEBUG CONSTRNT: Checking LP row 133 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=133, expected 133
DEBUG CONSTRNT: Checking LP row 134 -> pool row 162
DEBUG CONSTRNT: Pool row 162 has lprow=134, expected 134
 % @PAP adding 135 rows, 494 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=1, varin=165, theta=19.000000, up=1.000000
ITER 2: row=1, varin=149, theta=6.000000, up=1.000000
ITER 3: row=1, varin=144, theta=7.500000, up=1.000000
ITER 4: row=1, varin=155, theta=3.250000, up=1.000000
ITER 5: row=1, varin=151, theta=3.000000, up=1.000000
ITER 6: row=1, varin=150, theta=2.000000, up=1.000000
ITER 7: row=1, varin=148, theta=1.500000, up=1.000000
ITER 8: row=1, varin=137, theta=0.500000, up=1.000000
ITER 9: row=134, varin=144, theta=11.736363, up=1.000000
ITER 10: row=134, varin=149, theta=13.084339, up=1.000000
LP PHASE: Switching to primal (iter=45)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=135)
DEBUG SOLUTION: LP solution array indices: FST[136-175], not_covered[176-195]
DEBUG SOLUTION: lp->best_solution[0] = 25467844.482874
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 0.000000
DEBUG SOLUTION: lp->best_solution[3] = 0.000000
DEBUG SOLUTION: lp->best_solution[4] = 0.000000
DEBUG SOLUTION: lp->best_solution[5] = 0.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 3.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
  % @PL 135 rows, 60 cols, 554 nonzeros, 33 slack, 102 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
  % @D deleting 33 slack rows
  % @PAP adding 2 rows, 9 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=104, varin=126, theta=1.000000, up=1.000000
ITER 2: row=103, varin=117, theta=0.908278, up=1.000000
ITER 3: row=88, varin=124, theta=0.183111, up=1.000000
ITER 4: row=42, varin=106, theta=0.271819, up=1.000000
ITER 5: row=20, varin=152, theta=0.215070, up=1.000000
ITER 6: row=49, varin=153, theta=0.260542, up=1.000000
LP PHASE: Switching to primal (iter=6)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=104)
DEBUG SOLUTION: LP solution array indices: FST[105-144], not_covered[145-164]
DEBUG SOLUTION: lp->best_solution[0] = 26016523.875997
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
  % @PL 104 rows, 60 cols, 432 nonzeros, 15 slack, 89 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
  % @D deleting 15 slack rows
  % Node 0 LP 1 Solution, length = 26016523.875997, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.369729 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.260542 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.369729 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.369729 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.890813 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 0.109187 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 1.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 0.739458 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 0.739458 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.630271 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 0.109187 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 1.000000 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 1.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.630271 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.630271 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 5 fractional variables
DEBUG CG: LP optimal, z=26016523.875997, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
 % @LO 0.00  26.01652387599745352986 99.9000000000
 % @LN 0.00  26.01652387599745352986 99.9000000000
DEBUG CG: Second cutoff check: z=26016523.875997, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 0 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 0
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.369729
DEBUG CAREFUL: Adding var 12 to fractional list (xi=0.369729)
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.260542
DEBUG CAREFUL: Adding var 19 to fractional list (xi=0.260542)
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.369729
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.369729)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.369729
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.369729)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.000000
DEBUG CAREFUL: Skipping var 27: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.890813
DEBUG CAREFUL: Adding var 29 to fractional list (xi=0.890813)
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 5 fractional variables

  %  Carefully choosing branching variable, nfrac = 5
DEBUG CAREFUL: Testing fvar[0] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 21
DEBUG CAREFUL: New best var: 21
DEBUG CAREFUL: Testing fvar[1] = var 29
DEBUG CAREFUL: Calling compare_branch_vars for var 29
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 29
DEBUG CAREFUL: Testing fvar[2] = var 12
DEBUG CAREFUL: Calling compare_branch_vars for var 12
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 12
DEBUG CAREFUL: Testing fvar[3] = var 19
DEBUG CAREFUL: Calling compare_branch_vars for var 19
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 19
DEBUG CAREFUL: Testing fvar[4] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 25
  % Initial guess is x21, Z0 = 26016523.8759975        , Z1 = 26016523.8759975        

DEBUG EVAL: Testing var 21 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=37, varin=73, theta=0.560589, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 21 = 0 gives z=26075676.091946
  % 	x21 = 0,	Z0 = 26075676.0919464        
DEBUG EVAL: First branch cutoff check: z=26075676.091946, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 21 = 1
ITER 1: row=37, varin=134, theta=1.687289, up=1.000000
ITER 2: row=37, varin=72, theta=0.463561, up=999999999999999983222784.000000
ITER 3: row=35, varin=134, theta=0.795339, up=1.000000
ITER 4: row=75, varin=74, theta=1.000000, up=999999999999999983222784.000000
  % 	x21 = 1,	Z1 = 26276723.9236282        
DEBUG EVAL: Second branch cutoff check: z=26276723.923628, best_z=INF, threshold=INF
  %   New best:  x21, Z = 26075676.0919464        
DEBUG EVAL: Testing var 29 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=24, varin=105, theta=0.113283, up=1.000000
DEBUG EVAL: Branch var 29 = 1 gives z=26024774.896393
  % 	x29 = 1,	Z1 = 26024774.8963926        
DEBUG EVAL: First branch cutoff check: z=26024774.896393, best_z=INF, threshold=INF
DEBUG EVAL: Testing var 12 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=1, varin=72, theta=0.828658, up=999999999999999983222784.000000
ITER 2: row=75, varin=20, theta=0.771465, up=999999999999999983222784.000000
ITER 3: row=20, varin=74, theta=0.669929, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 12 = 0 gives z=26185496.570688
  % 	x12 = 0,	Z0 = 26185496.570688         
DEBUG EVAL: First branch cutoff check: z=26185496.570688, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 12 = 1
ITER 1: row=1, varin=134, theta=1.687289, up=1.000000
ITER 2: row=1, varin=104, theta=0.462667, up=1.000000
ITER 3: row=35, varin=73, theta=1.000000, up=999999999999999983222784.000000
ITER 4: row=24, varin=118, theta=1.135491, up=1.000000
ITER 5: row=24, varin=134, theta=0.103974, up=1.000000
ITER 6: row=1, varin=118, theta=0.506978, up=1.000000
  % 	x12 = 1,	Z1 = 26146050.4173454        
DEBUG EVAL: Second branch cutoff check: z=26146050.417345, best_z=INF, threshold=INF
  %   New best:  x12, Z = 26146050.4173454        
DEBUG EVAL: Testing var 19 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=35, varin=134, theta=0.348747, up=1.000000
DEBUG EVAL: Branch var 19 = 0 gives z=26022227.150606
  % 	x19 = 0,	Z0 = 26022227.1506057        
DEBUG EVAL: First branch cutoff check: z=26022227.150606, best_z=INF, threshold=INF
DEBUG EVAL: Testing var 25 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=73, varin=73, theta=0.560589, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 25 = 0 gives z=26075676.091946
  % 	x25 = 0,	Z0 = 26075676.0919464        
DEBUG EVAL: First branch cutoff check: z=26075676.091946, best_z=INF, threshold=INF
  % Best branch is x12, Z0 = 26185496.570688         , Z1 = 26146050.4173454        

DEBUG CAREFUL: Final result - returning best.var = 12
DEBUG BB: Branching variable chosen: j=12
 % @NC    1    0	x12 = 1	26146050.417345
 % @NC    2    0	x12 = 0	26185496.570688
 %       0     2 26016523.8760               26146050.4173
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x563ae8f3f2c0
% @LO 0.00  26.01652387599745352986 99.9000000000
% @LN 0.00  26.14605041734542112408 99.9000000000
% Resuming node 1 at  26.14605041734542112408
DEBUG CONSTRNT: LP rows=89, pool->nlprows=89, pool->npend=0
DEBUG CONSTRNT: Checking 89 LP rows (pool tracks 89, total LP rows 89)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 8
DEBUG CONSTRNT: Pool row 8 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 9
DEBUG CONSTRNT: Pool row 9 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 11
DEBUG CONSTRNT: Pool row 11 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 14
DEBUG CONSTRNT: Pool row 14 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 22
DEBUG CONSTRNT: Pool row 22 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 24
DEBUG CONSTRNT: Pool row 24 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 26
DEBUG CONSTRNT: Pool row 26 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 34
DEBUG CONSTRNT: Pool row 34 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 35
DEBUG CONSTRNT: Pool row 35 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 36
DEBUG CONSTRNT: Pool row 36 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 37
DEBUG CONSTRNT: Pool row 37 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 38
DEBUG CONSTRNT: Pool row 38 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 39
DEBUG CONSTRNT: Pool row 39 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 40
DEBUG CONSTRNT: Pool row 40 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 41
DEBUG CONSTRNT: Pool row 41 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 42
DEBUG CONSTRNT: Pool row 42 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 50
DEBUG CONSTRNT: Pool row 50 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 57
DEBUG CONSTRNT: Pool row 57 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 64
DEBUG CONSTRNT: Pool row 64 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 77
DEBUG CONSTRNT: Pool row 77 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 78
DEBUG CONSTRNT: Pool row 78 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 79
DEBUG CONSTRNT: Pool row 79 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 80
DEBUG CONSTRNT: Pool row 80 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 81
DEBUG CONSTRNT: Pool row 81 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 82
DEBUG CONSTRNT: Pool row 82 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 85
DEBUG CONSTRNT: Pool row 85 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=50, expected 50
DEBUG CONSTRNT: Checking LP row 51 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=51, expected 51
DEBUG CONSTRNT: Checking LP row 52 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=52, expected 52
DEBUG CONSTRNT: Checking LP row 53 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=53, expected 53
DEBUG CONSTRNT: Checking LP row 54 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=54, expected 54
DEBUG CONSTRNT: Checking LP row 55 -> pool row 94
DEBUG CONSTRNT: Pool row 94 has lprow=55, expected 55
DEBUG CONSTRNT: Checking LP row 56 -> pool row 95
DEBUG CONSTRNT: Pool row 95 has lprow=56, expected 56
DEBUG CONSTRNT: Checking LP row 57 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=57, expected 57
DEBUG CONSTRNT: Checking LP row 58 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=58, expected 58
DEBUG CONSTRNT: Checking LP row 59 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=59, expected 59
DEBUG CONSTRNT: Checking LP row 60 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=60, expected 60
DEBUG CONSTRNT: Checking LP row 61 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=61, expected 61
DEBUG CONSTRNT: Checking LP row 62 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=62, expected 62
DEBUG CONSTRNT: Checking LP row 63 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=63, expected 63
DEBUG CONSTRNT: Checking LP row 64 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=64, expected 64
DEBUG CONSTRNT: Checking LP row 65 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=65, expected 65
DEBUG CONSTRNT: Checking LP row 66 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=66, expected 66
DEBUG CONSTRNT: Checking LP row 67 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=67, expected 67
DEBUG CONSTRNT: Checking LP row 68 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=68, expected 68
DEBUG CONSTRNT: Checking LP row 69 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=69, expected 69
DEBUG CONSTRNT: Checking LP row 70 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=70, expected 70
DEBUG CONSTRNT: Checking LP row 71 -> pool row 110
DEBUG CONSTRNT: Pool row 110 has lprow=71, expected 71
DEBUG CONSTRNT: Checking LP row 72 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=72, expected 72
DEBUG CONSTRNT: Checking LP row 73 -> pool row 115
DEBUG CONSTRNT: Pool row 115 has lprow=73, expected 73
DEBUG CONSTRNT: Checking LP row 74 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=74, expected 74
DEBUG CONSTRNT: Checking LP row 75 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=75, expected 75
DEBUG CONSTRNT: Checking LP row 76 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=76, expected 76
DEBUG CONSTRNT: Checking LP row 77 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=77, expected 77
DEBUG CONSTRNT: Checking LP row 78 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=78, expected 78
DEBUG CONSTRNT: Checking LP row 79 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=79, expected 79
DEBUG CONSTRNT: Checking LP row 80 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=80, expected 80
DEBUG CONSTRNT: Checking LP row 81 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=81, expected 81
DEBUG CONSTRNT: Checking LP row 82 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=82, expected 82
DEBUG CONSTRNT: Checking LP row 83 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=83, expected 83
DEBUG CONSTRNT: Checking LP row 84 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=84, expected 84
DEBUG CONSTRNT: Checking LP row 85 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=85, expected 85
DEBUG CONSTRNT: Checking LP row 86 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=86, expected 86
DEBUG CONSTRNT: Checking LP row 87 -> pool row 155
DEBUG CONSTRNT: Pool row 155 has lprow=87, expected 87
DEBUG CONSTRNT: Checking LP row 88 -> pool row 160
DEBUG CONSTRNT: Pool row 160 has lprow=88, expected 88
 % @PAP adding 89 rows, 329 nz to LP
DEBUG BB: Processing node 1, calling compute_good_lower_bound
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=1, varin=134, theta=1.687289, up=1.000000
ITER 2: row=1, varin=104, theta=0.462667, up=1.000000
ITER 3: row=35, varin=73, theta=1.000000, up=999999999999999983222784.000000
ITER 4: row=24, varin=118, theta=1.135491, up=1.000000
ITER 5: row=24, varin=134, theta=0.103974, up=1.000000
ITER 6: row=1, varin=118, theta=0.506978, up=1.000000
LP PHASE: Switching to primal (iter=6)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=89)
DEBUG SOLUTION: LP solution array indices: FST[90-129], not_covered[130-149]
DEBUG SOLUTION: lp->best_solution[0] = 26146050.417345
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
  % @PL 89 rows, 60 cols, 389 nonzeros, 6 slack, 83 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
  % @D deleting 6 slack rows
  % @PAP adding 8 rows, 34 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=84, varin=121, theta=0.230505, up=1.000000
ITER 2: row=86, varin=106, theta=0.500000, up=1.000000
ITER 3: row=82, varin=94, theta=0.600000, up=1.000000
ITER 4: row=21, varin=115, theta=2.000000, up=1.000000
ITER 5: row=21, varin=105, theta=0.166667, up=1.000000
ITER 6: row=9, varin=115, theta=1.000000, up=1.000000
ITER 7: row=39, varin=98, theta=0.500000, up=1.000000
ITER 8: row=87, varin=31, theta=0.055556, up=999999999999999983222784.000000
ITER 9: row=89, varin=118, theta=1.125000, up=1.000000
ITER 10: row=89, varin=111, theta=0.013889, up=1.000000
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=91)
DEBUG SOLUTION: LP solution array indices: FST[92-131], not_covered[132-151]
DEBUG SOLUTION: lp->best_solution[0] = 999999999999999983222784.000000
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
  % @PL 91 rows, 60 cols, 408 nonzeros, 13 slack, 78 tight.
  % Node 1 LP 1 Solution, length = 999999999999999983222784.000000, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.506978 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 1.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.000000 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.000000 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.493022 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 0.493022 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 1.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 1.000000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.000000 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 1.000000 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 1.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.000000 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.000000 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
DEBUG BB: compute_good_lower_bound returned status=1
DEBUG BB: Node 1 is INFEASIBLE
 %       1     1    infeasible               26185496.5707   x12 U     0     1
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x563ae8f40ea0
% @LO 0.00  26.14605041734542112408 99.9000000000
% @LN 0.00  26.18549657068801295168 99.9000000000
% Resuming node 2 at  26.18549657068801295168
DEBUG CONSTRNT: LP rows=91, pool->nlprows=91, pool->npend=0
DEBUG CONSTRNT: Checking 91 LP rows (pool tracks 91, total LP rows 91)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 8
DEBUG CONSTRNT: Pool row 8 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 9
DEBUG CONSTRNT: Pool row 9 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 11
DEBUG CONSTRNT: Pool row 11 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 14
DEBUG CONSTRNT: Pool row 14 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 34
DEBUG CONSTRNT: Pool row 34 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 35
DEBUG CONSTRNT: Pool row 35 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 36
DEBUG CONSTRNT: Pool row 36 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 37
DEBUG CONSTRNT: Pool row 37 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 38
DEBUG CONSTRNT: Pool row 38 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 39
DEBUG CONSTRNT: Pool row 39 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 40
DEBUG CONSTRNT: Pool row 40 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 41
DEBUG CONSTRNT: Pool row 41 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 42
DEBUG CONSTRNT: Pool row 42 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 50
DEBUG CONSTRNT: Pool row 50 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 57
DEBUG CONSTRNT: Pool row 57 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 64
DEBUG CONSTRNT: Pool row 64 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 77
DEBUG CONSTRNT: Pool row 77 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 78
DEBUG CONSTRNT: Pool row 78 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 79
DEBUG CONSTRNT: Pool row 79 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 80
DEBUG CONSTRNT: Pool row 80 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 81
DEBUG CONSTRNT: Pool row 81 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 82
DEBUG CONSTRNT: Pool row 82 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 85
DEBUG CONSTRNT: Pool row 85 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=50, expected 50
DEBUG CONSTRNT: Checking LP row 51 -> pool row 94
DEBUG CONSTRNT: Pool row 94 has lprow=51, expected 51
DEBUG CONSTRNT: Checking LP row 52 -> pool row 95
DEBUG CONSTRNT: Pool row 95 has lprow=52, expected 52
DEBUG CONSTRNT: Checking LP row 53 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=53, expected 53
DEBUG CONSTRNT: Checking LP row 54 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=54, expected 54
DEBUG CONSTRNT: Checking LP row 55 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=55, expected 55
DEBUG CONSTRNT: Checking LP row 56 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=56, expected 56
DEBUG CONSTRNT: Checking LP row 57 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=57, expected 57
DEBUG CONSTRNT: Checking LP row 58 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=58, expected 58
DEBUG CONSTRNT: Checking LP row 59 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=59, expected 59
DEBUG CONSTRNT: Checking LP row 60 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=60, expected 60
DEBUG CONSTRNT: Checking LP row 61 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=61, expected 61
DEBUG CONSTRNT: Checking LP row 62 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=62, expected 62
DEBUG CONSTRNT: Checking LP row 63 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=63, expected 63
DEBUG CONSTRNT: Checking LP row 64 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=64, expected 64
DEBUG CONSTRNT: Checking LP row 65 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=65, expected 65
DEBUG CONSTRNT: Checking LP row 66 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=66, expected 66
DEBUG CONSTRNT: Checking LP row 67 -> pool row 110
DEBUG CONSTRNT: Pool row 110 has lprow=67, expected 67
DEBUG CONSTRNT: Checking LP row 68 -> pool row 115
DEBUG CONSTRNT: Pool row 115 has lprow=68, expected 68
DEBUG CONSTRNT: Checking LP row 69 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=69, expected 69
DEBUG CONSTRNT: Checking LP row 70 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=70, expected 70
DEBUG CONSTRNT: Checking LP row 71 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=71, expected 71
DEBUG CONSTRNT: Checking LP row 72 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=72, expected 72
DEBUG CONSTRNT: Checking LP row 73 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=73, expected 73
DEBUG CONSTRNT: Checking LP row 74 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=74, expected 74
DEBUG CONSTRNT: Checking LP row 75 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=75, expected 75
DEBUG CONSTRNT: Checking LP row 76 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=76, expected 76
DEBUG CONSTRNT: Checking LP row 77 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=77, expected 77
DEBUG CONSTRNT: Checking LP row 78 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=78, expected 78
DEBUG CONSTRNT: Checking LP row 79 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=79, expected 79
DEBUG CONSTRNT: Checking LP row 80 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=80, expected 80
DEBUG CONSTRNT: Checking LP row 81 -> pool row 155
DEBUG CONSTRNT: Pool row 155 has lprow=81, expected 81
DEBUG CONSTRNT: Checking LP row 82 -> pool row 160
DEBUG CONSTRNT: Pool row 160 has lprow=82, expected 82
DEBUG CONSTRNT: Checking LP row 83 -> pool row 28
DEBUG CONSTRNT: Pool row 28 has lprow=83, expected 83
DEBUG CONSTRNT: Checking LP row 84 -> pool row 32
DEBUG CONSTRNT: Pool row 32 has lprow=84, expected 84
DEBUG CONSTRNT: Checking LP row 85 -> pool row 51
DEBUG CONSTRNT: Pool row 51 has lprow=85, expected 85
DEBUG CONSTRNT: Checking LP row 86 -> pool row 53
DEBUG CONSTRNT: Pool row 53 has lprow=86, expected 86
DEBUG CONSTRNT: Checking LP row 87 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=87, expected 87
DEBUG CONSTRNT: Checking LP row 88 -> pool row 59
DEBUG CONSTRNT: Pool row 59 has lprow=88, expected 88
DEBUG CONSTRNT: Checking LP row 89 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=89, expected 89
DEBUG CONSTRNT: Checking LP row 90 -> pool row 76
DEBUG CONSTRNT: Pool row 76 has lprow=90, expected 90
 % @PAP adding 89 rows, 329 nz to LP
DEBUG BB: Processing node 2, calling compute_good_lower_bound
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=1, varin=72, theta=0.828658, up=999999999999999983222784.000000
ITER 2: row=75, varin=20, theta=0.771465, up=999999999999999983222784.000000
ITER 3: row=20, varin=74, theta=0.669929, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=3)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=89)
DEBUG SOLUTION: LP solution array indices: FST[90-129], not_covered[130-149]
DEBUG SOLUTION: lp->best_solution[0] = 26185496.570688
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
  % @PL 89 rows, 60 cols, 389 nonzeros, 2 slack, 87 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
  % @PAP adding 3 rows, 18 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=92, varin=37, theta=0.076923, up=999999999999999983222784.000000
ITER 2: row=91, varin=92, theta=6.309030, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=92)
DEBUG SOLUTION: LP solution array indices: FST[93-132], not_covered[133-152]
DEBUG SOLUTION: lp->best_solution[0] = 26258900.496396
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
  % @PL 92 rows, 60 cols, 407 nonzeros, 5 slack, 87 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
  % @D deleting 5 slack rows
  % Node 2 LP 1 Solution, length = 26258900.496396, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.437767 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.562233 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.562233 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.313301 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 0.686699 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 1.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 0.562233 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 0.562233 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.437767 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 0.686699 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 1.000000 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 1.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.437767 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.437767 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 4 fractional variables
DEBUG CG: LP optimal, z=26258900.496396, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
 % @LO 0.00  26.18549657068801295168 99.9000000000
 % @LN 0.00  26.25890049639558299077 99.9000000000
DEBUG CG: Second cutoff check: z=26258900.496396, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 2 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 2
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.437767
DEBUG CAREFUL: Adding var 19 to fractional list (xi=0.437767)
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.562233
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.562233)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.562233
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.562233)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.000000
DEBUG CAREFUL: Skipping var 27: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.313301
DEBUG CAREFUL: Adding var 29 to fractional list (xi=0.313301)
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 4 fractional variables

  %  Carefully choosing branching variable, nfrac = 4
DEBUG CAREFUL: Testing fvar[0] = var 19
DEBUG CAREFUL: Calling compare_branch_vars for var 19
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 19
DEBUG CAREFUL: New best var: 19
DEBUG CAREFUL: Testing fvar[1] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 25
DEBUG CAREFUL: Testing fvar[2] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 21
DEBUG CAREFUL: New best var: 21
DEBUG CAREFUL: Testing fvar[3] = var 29
DEBUG CAREFUL: Calling compare_branch_vars for var 29
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 29
  % Initial guess is x21, Z0 = 26258900.4963956        , Z1 = 26276723.9236282        

DEBUG EVAL: Testing var 19 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=1, varin=103, theta=0.429888, up=1.000000
DEBUG EVAL: Branch var 19 = 0 gives z=26293608.119377
  % 	x19 = 0,	Z0 = 26293608.1193773        
DEBUG EVAL: First branch cutoff check: z=26293608.119377, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 19 = 1
ITER 1: row=1, varin=85, theta=4.757950, up=999999999999999983222784.000000
ITER 2: row=71, varin=36, theta=3.497412, up=999999999999999983222784.000000
ITER 3: row=84, varin=35, theta=3.497412, up=999999999999999983222784.000000
ITER 4: row=36, varin=87, theta=3.497412, up=999999999999999983222784.000000
ITER 5: row=85, varin=24, theta=2.497412, up=999999999999999983222784.000000
ITER 6: row=24, varin=86, theta=3.290702, up=999999999999999983222784.000000
  % 	x19 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: Second branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=1, varin=103, theta=0.429888, up=1.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=87)
DEBUG SOLUTION: LP solution array indices: FST[88-127], not_covered[128-147]
DEBUG SOLUTION: lp->best_solution[0] = 26293608.119377
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 87 rows, 60 cols, 385 nonzeros, 0 slack, 87 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @PAP adding 2 rows, 13 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=88, varin=91, theta=0.600679, up=1.000000
ITER 2: row=20, varin=35, theta=0.510473, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=89)
DEBUG SOLUTION: LP solution array indices: FST[90-129], not_covered[130-149]
DEBUG SOLUTION: lp->best_solution[0] = 26356046.735864
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 89 rows, 60 cols, 398 nonzeros, 2 slack, 87 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 2 slack rows
   % @PAP adding 3 rows, 6 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=88, varin=105, theta=0.015599, up=1.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=90)
DEBUG SOLUTION: LP solution array indices: FST[91-130], not_covered[131-150]
DEBUG SOLUTION: lp->best_solution[0] = 26357796.299562
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 90 rows, 60 cols, 391 nonzeros, 2 slack, 88 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 2 slack rows
   % @PAP adding 2 rows, 8 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=89, varin=135, theta=0.015812, up=1.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=90)
DEBUG SOLUTION: LP solution array indices: FST[91-130], not_covered[131-150]
DEBUG SOLUTION: lp->best_solution[0] = 26358184.155332
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 90 rows, 60 cols, 395 nonzeros, 4 slack, 86 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 4 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 2 at  26.35818415533187319966
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x563ae8f40ea0
% @LO 0.00  26.25890049639558299077 99.9000000000
% @LN 0.00  26.35818415533187319966 99.9000000000
% Resuming node 2 at  26.35818415533187319966
DEBUG CONSTRNT: LP rows=86, pool->nlprows=86, pool->npend=0
DEBUG CONSTRNT: Checking 86 LP rows (pool tracks 86, total LP rows 86)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 8
DEBUG CONSTRNT: Pool row 8 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 9
DEBUG CONSTRNT: Pool row 9 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 11
DEBUG CONSTRNT: Pool row 11 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 14
DEBUG CONSTRNT: Pool row 14 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 34
DEBUG CONSTRNT: Pool row 34 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 35
DEBUG CONSTRNT: Pool row 35 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 36
DEBUG CONSTRNT: Pool row 36 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 37
DEBUG CONSTRNT: Pool row 37 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 38
DEBUG CONSTRNT: Pool row 38 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 39
DEBUG CONSTRNT: Pool row 39 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 40
DEBUG CONSTRNT: Pool row 40 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 41
DEBUG CONSTRNT: Pool row 41 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 42
DEBUG CONSTRNT: Pool row 42 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 57
DEBUG CONSTRNT: Pool row 57 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 77
DEBUG CONSTRNT: Pool row 77 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 78
DEBUG CONSTRNT: Pool row 78 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 79
DEBUG CONSTRNT: Pool row 79 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 80
DEBUG CONSTRNT: Pool row 80 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 81
DEBUG CONSTRNT: Pool row 81 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 82
DEBUG CONSTRNT: Pool row 82 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 85
DEBUG CONSTRNT: Pool row 85 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 94
DEBUG CONSTRNT: Pool row 94 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 95
DEBUG CONSTRNT: Pool row 95 has lprow=50, expected 50
DEBUG CONSTRNT: Checking LP row 51 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=51, expected 51
DEBUG CONSTRNT: Checking LP row 52 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=52, expected 52
DEBUG CONSTRNT: Checking LP row 53 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=53, expected 53
DEBUG CONSTRNT: Checking LP row 54 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=54, expected 54
DEBUG CONSTRNT: Checking LP row 55 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=55, expected 55
DEBUG CONSTRNT: Checking LP row 56 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=56, expected 56
DEBUG CONSTRNT: Checking LP row 57 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=57, expected 57
DEBUG CONSTRNT: Checking LP row 58 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=58, expected 58
DEBUG CONSTRNT: Checking LP row 59 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=59, expected 59
DEBUG CONSTRNT: Checking LP row 60 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=60, expected 60
DEBUG CONSTRNT: Checking LP row 61 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=61, expected 61
DEBUG CONSTRNT: Checking LP row 62 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=62, expected 62
DEBUG CONSTRNT: Checking LP row 63 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=63, expected 63
DEBUG CONSTRNT: Checking LP row 64 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=64, expected 64
DEBUG CONSTRNT: Checking LP row 65 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=65, expected 65
DEBUG CONSTRNT: Checking LP row 66 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=66, expected 66
DEBUG CONSTRNT: Checking LP row 67 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=67, expected 67
DEBUG CONSTRNT: Checking LP row 68 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=68, expected 68
DEBUG CONSTRNT: Checking LP row 69 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=69, expected 69
DEBUG CONSTRNT: Checking LP row 70 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=70, expected 70
DEBUG CONSTRNT: Checking LP row 71 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=71, expected 71
DEBUG CONSTRNT: Checking LP row 72 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=72, expected 72
DEBUG CONSTRNT: Checking LP row 73 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=73, expected 73
DEBUG CONSTRNT: Checking LP row 74 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=74, expected 74
DEBUG CONSTRNT: Checking LP row 75 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=75, expected 75
DEBUG CONSTRNT: Checking LP row 76 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=76, expected 76
DEBUG CONSTRNT: Checking LP row 77 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=77, expected 77
DEBUG CONSTRNT: Checking LP row 78 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=78, expected 78
DEBUG CONSTRNT: Checking LP row 79 -> pool row 155
DEBUG CONSTRNT: Pool row 155 has lprow=79, expected 79
DEBUG CONSTRNT: Checking LP row 80 -> pool row 160
DEBUG CONSTRNT: Pool row 160 has lprow=80, expected 80
DEBUG CONSTRNT: Checking LP row 81 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=81, expected 81
DEBUG CONSTRNT: Checking LP row 82 -> pool row 48
DEBUG CONSTRNT: Pool row 48 has lprow=82, expected 82
DEBUG CONSTRNT: Checking LP row 83 -> pool row 67
DEBUG CONSTRNT: Pool row 67 has lprow=83, expected 83
DEBUG CONSTRNT: Checking LP row 84 -> pool row 56
DEBUG CONSTRNT: Pool row 56 has lprow=84, expected 84
DEBUG CONSTRNT: Checking LP row 85 -> pool row 59
DEBUG CONSTRNT: Pool row 59 has lprow=85, expected 85
 % @PAP adding 86 rows, 324 nz to LP
DEBUG BB: Processing node 2, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 2 LP 2 Solution, length = 26358184.155332, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.015812 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.500000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.500000 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.500000 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.515812 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 0.984188 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 0.484188 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 1.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 0.500000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.500000 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 0.484188 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 1.000000 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 1.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.500000 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.500000 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 5 fractional variables
DEBUG CG: LP optimal, z=26358184.155332, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=26358184.155332, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 2 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 2
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.015812
DEBUG CAREFUL: Adding var 1 to fractional list (xi=0.015812)
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.500000
DEBUG CAREFUL: Adding var 15 to fractional list (xi=0.500000)
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.500000
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.500000)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.500000
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.500000)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.000000
DEBUG CAREFUL: Skipping var 27: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.515812
DEBUG CAREFUL: Adding var 29 to fractional list (xi=0.515812)
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 5 fractional variables

  %  Carefully choosing branching variable, nfrac = 5
DEBUG CAREFUL: Testing fvar[0] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 25
DEBUG CAREFUL: New best var: 25
DEBUG CAREFUL: Testing fvar[1] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
DEBUG CAREFUL: Testing fvar[2] = var 15
DEBUG CAREFUL: Calling compare_branch_vars for var 15
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 15
DEBUG CAREFUL: Testing fvar[3] = var 1
DEBUG CAREFUL: Calling compare_branch_vars for var 1
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 1
DEBUG CAREFUL: New best var: 1
DEBUG CAREFUL: Testing fvar[4] = var 29
DEBUG CAREFUL: Calling compare_branch_vars for var 29
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 29
  % Initial guess is x1, Z0 = 26358184.1553319        , Z1 = 26410559.7812575        

DEBUG EVAL: Testing var 25 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=79, varin=85, theta=1.000000, up=999999999999999983222784.000000
ITER 2: row=85, varin=84, theta=1.000000, up=999999999999999983222784.000000
ITER 3: row=20, varin=115, theta=0.504379, up=1.000000
ITER 4: row=86, varin=81, theta=0.271141, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 25 = 1 gives z=26487878.783614
  % 	x25 = 1,	Z1 = 26487878.7836138        
DEBUG EVAL: First branch cutoff check: z=26487878.783614, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 25 = 0
ITER 1: row=79, varin=82, theta=1.000000, up=999999999999999983222784.000000
ITER 2: row=1, varin=80, theta=0.317856, up=999999999999999983222784.000000
  % 	x25 = 0,	Z0 = 26472700.3394979        
DEBUG EVAL: Second branch cutoff check: z=26472700.339498, best_z=INF, threshold=INF
  %   New best:  x25, Z = 26472700.3394979        
DEBUG EVAL: Testing var 21 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=66, varin=85, theta=1.000000, up=999999999999999983222784.000000
ITER 2: row=85, varin=81, theta=0.500000, up=999999999999999983222784.000000
ITER 3: row=1, varin=84, theta=0.090448, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 21 = 0 gives z=26423023.972595
  % 	x21 = 0,	Z0 = 26423023.9725945        
DEBUG EVAL: First branch cutoff check: z=26423023.972595, best_z=INF, threshold=INF
DEBUG EVAL: Testing var 15 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=19, varin=84, theta=1.000000, up=999999999999999983222784.000000
ITER 2: row=20, varin=115, theta=0.504379, up=1.000000
ITER 3: row=86, varin=31, theta=0.098289, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 15 = 0 gives z=26474813.967060
  % 	x15 = 0,	Z0 = 26474813.9670599        
DEBUG EVAL: First branch cutoff check: z=26474813.967060, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 15 = 1
ITER 1: row=19, varin=85, theta=1.000000, up=999999999999999983222784.000000
ITER 2: row=85, varin=82, theta=1.000000, up=999999999999999983222784.000000
ITER 3: row=1, varin=80, theta=0.928735, up=999999999999999983222784.000000
ITER 4: row=79, varin=84, theta=1.611418, up=999999999999999983222784.000000
ITER 5: row=82, varin=31, theta=1.611418, up=999999999999999983222784.000000
ITER 6: row=20, varin=81, theta=1.343648, up=999999999999999983222784.000000
ITER 7: row=67, varin=66, theta=1.343648, up=999999999999999983222784.000000
ITER 8: row=84, varin=67, theta=1.343648, up=999999999999999983222784.000000
ITER 9: row=86, varin=136, theta=0.343648, up=1.000000
  % 	x15 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: Second branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=19, varin=84, theta=1.000000, up=999999999999999983222784.000000
ITER 2: row=20, varin=115, theta=0.504379, up=1.000000
ITER 3: row=86, varin=31, theta=0.098289, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=3)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=86)
DEBUG SOLUTION: LP solution array indices: FST[87-126], not_covered[127-146]
DEBUG SOLUTION: lp->best_solution[0] = 26474813.967060
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 86 rows, 60 cols, 384 nonzeros, 2 slack, 84 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 2 slack rows
   % @PAP adding 8 rows, 30 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=89, varin=80, theta=0.271141, up=999999999999999983222784.000000
ITER 2: row=85, varin=82, theta=0.115135, up=999999999999999983222784.000000
ITER 3: row=88, varin=95, theta=0.669824, up=1.000000
ITER 4: row=21, varin=84, theta=1.987504, up=999999999999999983222784.000000
ITER 5: row=87, varin=122, theta=0.616449, up=1.000000
LP PHASE: Switching to primal (iter=5)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=92)
DEBUG SOLUTION: LP solution array indices: FST[93-132], not_covered[133-152]
DEBUG SOLUTION: lp->best_solution[0] = 26562219.306909
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 92 rows, 60 cols, 410 nonzeros, 2 slack, 90 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 2 slack rows
   % @PAP adding 3 rows, 11 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=91, varin=117, theta=2.000000, up=1.000000
ITER 2: row=91, varin=87, theta=1.333333, up=999999999999999983222784.000000
ITER 3: row=9, varin=117, theta=1.000000, up=1.000000
LP PHASE: Switching to primal (iter=3)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=93)
DEBUG SOLUTION: LP solution array indices: FST[94-133], not_covered[134-153]
DEBUG SOLUTION: lp->best_solution[0] = 26581908.249551
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 93 rows, 60 cols, 411 nonzeros, 5 slack, 88 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 5 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 2 at  26.58190824955054054612
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x563ae8f40ea0
% @LO 0.00  26.35818415533187319966 99.9000000000
% @LN 0.00  26.58190824955054054612 99.9000000000
% Resuming node 2 at  26.58190824955054054612
DEBUG CONSTRNT: LP rows=88, pool->nlprows=88, pool->npend=0
DEBUG CONSTRNT: Checking 88 LP rows (pool tracks 88, total LP rows 88)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 8
DEBUG CONSTRNT: Pool row 8 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 9
DEBUG CONSTRNT: Pool row 9 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 11
DEBUG CONSTRNT: Pool row 11 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 14
DEBUG CONSTRNT: Pool row 14 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 34
DEBUG CONSTRNT: Pool row 34 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 35
DEBUG CONSTRNT: Pool row 35 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 36
DEBUG CONSTRNT: Pool row 36 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 37
DEBUG CONSTRNT: Pool row 37 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 38
DEBUG CONSTRNT: Pool row 38 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 39
DEBUG CONSTRNT: Pool row 39 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 40
DEBUG CONSTRNT: Pool row 40 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 41
DEBUG CONSTRNT: Pool row 41 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 42
DEBUG CONSTRNT: Pool row 42 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 77
DEBUG CONSTRNT: Pool row 77 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 78
DEBUG CONSTRNT: Pool row 78 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 79
DEBUG CONSTRNT: Pool row 79 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 80
DEBUG CONSTRNT: Pool row 80 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 81
DEBUG CONSTRNT: Pool row 81 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 82
DEBUG CONSTRNT: Pool row 82 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 85
DEBUG CONSTRNT: Pool row 85 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 94
DEBUG CONSTRNT: Pool row 94 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 95
DEBUG CONSTRNT: Pool row 95 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=50, expected 50
DEBUG CONSTRNT: Checking LP row 51 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=51, expected 51
DEBUG CONSTRNT: Checking LP row 52 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=52, expected 52
DEBUG CONSTRNT: Checking LP row 53 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=53, expected 53
DEBUG CONSTRNT: Checking LP row 54 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=54, expected 54
DEBUG CONSTRNT: Checking LP row 55 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=55, expected 55
DEBUG CONSTRNT: Checking LP row 56 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=56, expected 56
DEBUG CONSTRNT: Checking LP row 57 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=57, expected 57
DEBUG CONSTRNT: Checking LP row 58 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=58, expected 58
DEBUG CONSTRNT: Checking LP row 59 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=59, expected 59
DEBUG CONSTRNT: Checking LP row 60 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=60, expected 60
DEBUG CONSTRNT: Checking LP row 61 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=61, expected 61
DEBUG CONSTRNT: Checking LP row 62 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=62, expected 62
DEBUG CONSTRNT: Checking LP row 63 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=63, expected 63
DEBUG CONSTRNT: Checking LP row 64 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=64, expected 64
DEBUG CONSTRNT: Checking LP row 65 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=65, expected 65
DEBUG CONSTRNT: Checking LP row 66 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=66, expected 66
DEBUG CONSTRNT: Checking LP row 67 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=67, expected 67
DEBUG CONSTRNT: Checking LP row 68 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=68, expected 68
DEBUG CONSTRNT: Checking LP row 69 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=69, expected 69
DEBUG CONSTRNT: Checking LP row 70 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=70, expected 70
DEBUG CONSTRNT: Checking LP row 71 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=71, expected 71
DEBUG CONSTRNT: Checking LP row 72 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=72, expected 72
DEBUG CONSTRNT: Checking LP row 73 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=73, expected 73
DEBUG CONSTRNT: Checking LP row 74 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=74, expected 74
DEBUG CONSTRNT: Checking LP row 75 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=75, expected 75
DEBUG CONSTRNT: Checking LP row 76 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=76, expected 76
DEBUG CONSTRNT: Checking LP row 77 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=77, expected 77
DEBUG CONSTRNT: Checking LP row 78 -> pool row 155
DEBUG CONSTRNT: Pool row 155 has lprow=78, expected 78
DEBUG CONSTRNT: Checking LP row 79 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=79, expected 79
DEBUG CONSTRNT: Checking LP row 80 -> pool row 56
DEBUG CONSTRNT: Pool row 56 has lprow=80, expected 80
DEBUG CONSTRNT: Checking LP row 81 -> pool row 28
DEBUG CONSTRNT: Pool row 28 has lprow=81, expected 81
DEBUG CONSTRNT: Checking LP row 82 -> pool row 47
DEBUG CONSTRNT: Pool row 47 has lprow=82, expected 82
DEBUG CONSTRNT: Checking LP row 83 -> pool row 51
DEBUG CONSTRNT: Pool row 51 has lprow=83, expected 83
DEBUG CONSTRNT: Checking LP row 84 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=84, expected 84
DEBUG CONSTRNT: Checking LP row 85 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=85, expected 85
DEBUG CONSTRNT: Checking LP row 86 -> pool row 76
DEBUG CONSTRNT: Pool row 76 has lprow=86, expected 86
DEBUG CONSTRNT: Checking LP row 87 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=87, expected 87
 % @PAP adding 88 rows, 323 nz to LP
DEBUG BB: Processing node 2, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 2 LP 3 Solution, length = 26581908.249551, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.136660 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.333333 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.666667 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.666667 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.333333 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.136660 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 0.863340 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 0.863340 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 1.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 0.666667 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 0.666667 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.333333 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 0.863340 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 1.000000 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 1.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.333333 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.333333 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 6 fractional variables
DEBUG CG: LP optimal, z=26581908.249551, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=26581908.249551, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 2 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 2
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.136660
DEBUG CAREFUL: Adding var 1 to fractional list (xi=0.136660)
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.333333
DEBUG CAREFUL: Adding var 14 to fractional list (xi=0.333333)
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.666667
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.666667)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.666667
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.666667)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.000000
DEBUG CAREFUL: Skipping var 27: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.333333
DEBUG CAREFUL: Adding var 28 to fractional list (xi=0.333333)
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.136660
DEBUG CAREFUL: Adding var 29 to fractional list (xi=0.136660)
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 6 fractional variables

  %  Carefully choosing branching variable, nfrac = 6
DEBUG CAREFUL: Testing fvar[0] = var 14
DEBUG CAREFUL: Calling compare_branch_vars for var 14
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 14
DEBUG CAREFUL: New best var: 14
DEBUG CAREFUL: Testing fvar[1] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 25
DEBUG CAREFUL: Testing fvar[2] = var 28
DEBUG CAREFUL: Calling compare_branch_vars for var 28
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 28
DEBUG CAREFUL: Testing fvar[3] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
DEBUG CAREFUL: Testing fvar[4] = var 1
DEBUG CAREFUL: Calling compare_branch_vars for var 1
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 1
DEBUG CAREFUL: Testing fvar[5] = var 29
DEBUG CAREFUL: Calling compare_branch_vars for var 29
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 29
  % Initial guess is x14, Z0 = 26581908.2495505        , Z1 = 26593981.7984589        

DEBUG EVAL: Testing var 14 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=19, varin=9, theta=4.000000, up=999999999999999983222784.000000
ITER 2: row=9, varin=88, theta=2.000000, up=999999999999999983222784.000000
ITER 3: row=66, varin=21, theta=0.600000, up=999999999999999983222784.000000
ITER 4: row=21, varin=84, theta=1.000000, up=999999999999999983222784.000000
ITER 5: row=31, varin=82, theta=0.949733, up=999999999999999983222784.000000
ITER 6: row=1, varin=146, theta=1.104068, up=1.000000
ITER 7: row=1, varin=79, theta=0.195654, up=999999999999999983222784.000000
ITER 8: row=79, varin=146, theta=1.000000, up=1.000000
ITER 9: row=78, varin=20, theta=1.525787, up=999999999999999983222784.000000
ITER 10: row=20, varin=66, theta=3.353059, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 14 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x14 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=19, varin=102, theta=0.333333, up=1.000000
ITER 2: row=36, varin=79, theta=1.000000, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=88)
DEBUG SOLUTION: LP solution array indices: FST[89-128], not_covered[129-148]
DEBUG SOLUTION: lp->best_solution[0] = 26645636.692785
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 88 rows, 60 cols, 383 nonzeros, 1 slack, 87 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 1 slack rows
   % @PAP adding 1 rows, 2 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=88, varin=135, theta=0.348820, up=1.000000
ITER 2: row=47, varin=140, theta=0.148239, up=1.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=88)
DEBUG SOLUTION: LP solution array indices: FST[89-128], not_covered[129-148]
DEBUG SOLUTION: lp->best_solution[0] = 26690636.872924
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 88 rows, 60 cols, 380 nonzeros, 8 slack, 80 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 8 slack rows
   % @PAP adding 4 rows, 21 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=81, varin=91, theta=0.203675, up=1.000000
ITER 2: row=82, varin=74, theta=0.021353, up=999999999999999983222784.000000
ITER 3: row=84, varin=112, theta=0.342546, up=1.000000
ITER 4: row=40, varin=72, theta=0.044686, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=4)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=84)
DEBUG SOLUTION: LP solution array indices: FST[85-124], not_covered[125-144]
DEBUG SOLUTION: lp->best_solution[0] = 26717636.857608
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 84 rows, 60 cols, 378 nonzeros, 4 slack, 80 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 4 slack rows
   % @PAP adding 2 rows, 4 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=81, varin=109, theta=0.622585, up=1.000000
ITER 2: row=44, varin=79, theta=0.591152, up=999999999999999983222784.000000
ITER 3: row=82, varin=81, theta=0.052686, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=3)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=82)
DEBUG SOLUTION: LP solution array indices: FST[83-122], not_covered[123-142]
DEBUG SOLUTION: lp->best_solution[0] = 26731820.032286
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 82 rows, 60 cols, 374 nonzeros, 2 slack, 80 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 2 slack rows
   % @PAP adding 2 rows, 4 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=82, varin=91, theta=0.168423, up=1.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=82)
DEBUG SOLUTION: LP solution array indices: FST[83-122], not_covered[123-142]
DEBUG SOLUTION: lp->best_solution[0] = 26734753.728426
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 82 rows, 60 cols, 365 nonzeros, 0 slack, 82 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @PAP adding 4 rows, 24 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=86, varin=79, theta=0.037744, up=999999999999999983222784.000000
ITER 2: row=83, varin=42, theta=0.249581, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=86)
DEBUG SOLUTION: LP solution array indices: FST[87-126], not_covered[127-146]
DEBUG SOLUTION: lp->best_solution[0] = 26738518.885517
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 86 rows, 60 cols, 389 nonzeros, 11 slack, 75 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 11 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 2 at  26.73851888551714139908
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x563ae8f40ea0
% @LO 0.00  26.58190824955054054612 99.9000000000
% @LN 0.00  26.73851888551714139908 99.9000000000
% Resuming node 2 at  26.73851888551714139908
DEBUG CONSTRNT: LP rows=75, pool->nlprows=75, pool->npend=0
DEBUG CONSTRNT: Checking 75 LP rows (pool tracks 75, total LP rows 75)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 8
DEBUG CONSTRNT: Pool row 8 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 9
DEBUG CONSTRNT: Pool row 9 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 11
DEBUG CONSTRNT: Pool row 11 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 14
DEBUG CONSTRNT: Pool row 14 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 81
DEBUG CONSTRNT: Pool row 81 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=50, expected 50
DEBUG CONSTRNT: Checking LP row 51 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=51, expected 51
DEBUG CONSTRNT: Checking LP row 52 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=52, expected 52
DEBUG CONSTRNT: Checking LP row 53 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=53, expected 53
DEBUG CONSTRNT: Checking LP row 54 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=54, expected 54
DEBUG CONSTRNT: Checking LP row 55 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=55, expected 55
DEBUG CONSTRNT: Checking LP row 56 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=56, expected 56
DEBUG CONSTRNT: Checking LP row 57 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=57, expected 57
DEBUG CONSTRNT: Checking LP row 58 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=58, expected 58
DEBUG CONSTRNT: Checking LP row 59 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=59, expected 59
DEBUG CONSTRNT: Checking LP row 60 -> pool row 28
DEBUG CONSTRNT: Pool row 28 has lprow=60, expected 60
DEBUG CONSTRNT: Checking LP row 61 -> pool row 51
DEBUG CONSTRNT: Pool row 51 has lprow=61, expected 61
DEBUG CONSTRNT: Checking LP row 62 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=62, expected 62
DEBUG CONSTRNT: Checking LP row 63 -> pool row 76
DEBUG CONSTRNT: Pool row 76 has lprow=63, expected 63
DEBUG CONSTRNT: Checking LP row 64 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=64, expected 64
DEBUG CONSTRNT: Checking LP row 65 -> pool row 143
DEBUG CONSTRNT: Pool row 143 has lprow=65, expected 65
DEBUG CONSTRNT: Checking LP row 66 -> pool row 46
DEBUG CONSTRNT: Pool row 46 has lprow=66, expected 66
DEBUG CONSTRNT: Checking LP row 67 -> pool row 59
DEBUG CONSTRNT: Pool row 59 has lprow=67, expected 67
DEBUG CONSTRNT: Checking LP row 68 -> pool row 54
DEBUG CONSTRNT: Pool row 54 has lprow=68, expected 68
DEBUG CONSTRNT: Checking LP row 69 -> pool row 55
DEBUG CONSTRNT: Pool row 55 has lprow=69, expected 69
DEBUG CONSTRNT: Checking LP row 70 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=70, expected 70
DEBUG CONSTRNT: Checking LP row 71 -> pool row 45
DEBUG CONSTRNT: Pool row 45 has lprow=71, expected 71
DEBUG CONSTRNT: Checking LP row 72 -> pool row 53
DEBUG CONSTRNT: Pool row 53 has lprow=72, expected 72
DEBUG CONSTRNT: Checking LP row 73 -> pool row 79
DEBUG CONSTRNT: Pool row 79 has lprow=73, expected 73
DEBUG CONSTRNT: Checking LP row 74 -> pool row 85
DEBUG CONSTRNT: Pool row 85 has lprow=74, expected 74
 % @PAP adding 75 rows, 297 nz to LP
DEBUG BB: Processing node 2, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 2 LP 4 Solution, length = 26738518.885517, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.500000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.249581 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.249581 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.249581 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.249581 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.500000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 0.500000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 0.500000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.750419 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 1.000000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.750419 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 0.500000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 1.000000 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.750419 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.750419 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.750419 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 6 fractional variables
DEBUG CG: LP optimal, z=26738518.885517, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=26738518.885517, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 3 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 2 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 2
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.500000
DEBUG CAREFUL: Adding var 1 to fractional list (xi=0.500000)
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.249581
DEBUG CAREFUL: Adding var 2 to fractional list (xi=0.249581)
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.249581
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.249581)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.249581
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.249581)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.249581
DEBUG CAREFUL: Adding var 27 to fractional list (xi=0.249581)
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.500000
DEBUG CAREFUL: Adding var 29 to fractional list (xi=0.500000)
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 6 fractional variables

  %  Carefully choosing branching variable, nfrac = 6
DEBUG CAREFUL: Testing fvar[0] = var 1
DEBUG CAREFUL: Calling compare_branch_vars for var 1
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 1
DEBUG CAREFUL: New best var: 1
DEBUG CAREFUL: Testing fvar[1] = var 29
DEBUG CAREFUL: Calling compare_branch_vars for var 29
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 29
DEBUG CAREFUL: Testing fvar[2] = var 27
DEBUG CAREFUL: Calling compare_branch_vars for var 27
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 27
DEBUG CAREFUL: New best var: 27
DEBUG CAREFUL: Testing fvar[3] = var 2
DEBUG CAREFUL: Calling compare_branch_vars for var 2
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 2
DEBUG CAREFUL: Testing fvar[4] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 25
DEBUG CAREFUL: Testing fvar[5] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
  % Initial guess is x27, Z0 = 26738518.8855171        , Z1 = 26771819.077138         

DEBUG EVAL: Testing var 1 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=1, varin=66, theta=1.000000, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 1 = 0 gives z=26881643.856681
  % 	x1 = 0,	Z0 = 26881643.8566807        
DEBUG EVAL: First branch cutoff check: z=26881643.856681, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 1 = 1
ITER 1: row=1, varin=20, theta=1.000000, up=999999999999999983222784.000000
ITER 2: row=63, varin=22, theta=1.000000, up=999999999999999983222784.000000
ITER 3: row=46, varin=75, theta=5.926667, up=999999999999999983222784.000000
ITER 4: row=19, varin=100, theta=3.633470, up=1.000000
ITER 5: row=19, varin=106, theta=1.473809, up=1.000000
ITER 6: row=19, varin=98, theta=0.298696, up=1.000000
ITER 7: row=3, varin=100, theta=1.000000, up=1.000000
ITER 8: row=73, varin=106, theta=1.214924, up=1.000000
ITER 9: row=73, varin=3, theta=0.499961, up=999999999999999983222784.000000
ITER 10: row=16, varin=72, theta=0.416120, up=999999999999999983222784.000000
  % 	x1 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: Second branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=1, varin=66, theta=1.000000, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=75)
DEBUG SOLUTION: LP solution array indices: FST[76-115], not_covered[116-135]
DEBUG SOLUTION: lp->best_solution[0] = 26881643.856681
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 75 rows, 60 cols, 357 nonzeros, 1 slack, 74 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 1 slack rows
   % @PAP adding 1 rows, 2 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=75, varin=74, theta=0.185759, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=75)
DEBUG SOLUTION: LP solution array indices: FST[76-115], not_covered[116-135]
DEBUG SOLUTION: lp->best_solution[0] = 26882948.267991
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 75 rows, 60 cols, 357 nonzeros, 3 slack, 72 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 3 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 2 at  26.88294826799116776783
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x563ae8f40ea0
% @LO 0.00  26.73851888551714139908 99.9000000000
% @LN 0.00  26.88294826799116776783 99.9000000000
% Resuming node 2 at  26.88294826799116776783
DEBUG CONSTRNT: LP rows=72, pool->nlprows=72, pool->npend=0
DEBUG CONSTRNT: Checking 72 LP rows (pool tracks 72, total LP rows 72)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 8
DEBUG CONSTRNT: Pool row 8 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 9
DEBUG CONSTRNT: Pool row 9 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 11
DEBUG CONSTRNT: Pool row 11 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 14
DEBUG CONSTRNT: Pool row 14 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 81
DEBUG CONSTRNT: Pool row 81 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=50, expected 50
DEBUG CONSTRNT: Checking LP row 51 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=51, expected 51
DEBUG CONSTRNT: Checking LP row 52 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=52, expected 52
DEBUG CONSTRNT: Checking LP row 53 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=53, expected 53
DEBUG CONSTRNT: Checking LP row 54 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=54, expected 54
DEBUG CONSTRNT: Checking LP row 55 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=55, expected 55
DEBUG CONSTRNT: Checking LP row 56 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=56, expected 56
DEBUG CONSTRNT: Checking LP row 57 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=57, expected 57
DEBUG CONSTRNT: Checking LP row 58 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=58, expected 58
DEBUG CONSTRNT: Checking LP row 59 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=59, expected 59
DEBUG CONSTRNT: Checking LP row 60 -> pool row 28
DEBUG CONSTRNT: Pool row 28 has lprow=60, expected 60
DEBUG CONSTRNT: Checking LP row 61 -> pool row 51
DEBUG CONSTRNT: Pool row 51 has lprow=61, expected 61
DEBUG CONSTRNT: Checking LP row 62 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=62, expected 62
DEBUG CONSTRNT: Checking LP row 63 -> pool row 76
DEBUG CONSTRNT: Pool row 76 has lprow=63, expected 63
DEBUG CONSTRNT: Checking LP row 64 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=64, expected 64
DEBUG CONSTRNT: Checking LP row 65 -> pool row 46
DEBUG CONSTRNT: Pool row 46 has lprow=65, expected 65
DEBUG CONSTRNT: Checking LP row 66 -> pool row 54
DEBUG CONSTRNT: Pool row 54 has lprow=66, expected 66
DEBUG CONSTRNT: Checking LP row 67 -> pool row 55
DEBUG CONSTRNT: Pool row 55 has lprow=67, expected 67
DEBUG CONSTRNT: Checking LP row 68 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=68, expected 68
DEBUG CONSTRNT: Checking LP row 69 -> pool row 45
DEBUG CONSTRNT: Pool row 45 has lprow=69, expected 69
DEBUG CONSTRNT: Checking LP row 70 -> pool row 79
DEBUG CONSTRNT: Pool row 79 has lprow=70, expected 70
DEBUG CONSTRNT: Checking LP row 71 -> pool row 133
DEBUG CONSTRNT: Pool row 133 has lprow=71, expected 71
 % @PAP adding 72 rows, 271 nz to LP
DEBUG BB: Processing node 2, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 2 LP 5 Solution, length = 26882948.267991, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.500000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.030960 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.030960 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.030960 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.654799 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.654799 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.500000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.030960 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.500000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 0.969040 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 0.969040 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.345201 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.969040 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.500000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.345201 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.345201 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 8 fractional variables
DEBUG CG: LP optimal, z=26882948.267991, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=26882948.267991, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 2 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 2
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.500000
DEBUG CAREFUL: Adding var 2 to fractional list (xi=0.500000)
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.030960
DEBUG CAREFUL: Adding var 6 to fractional list (xi=0.030960)
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.030960
DEBUG CAREFUL: Adding var 8 to fractional list (xi=0.030960)
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.030960
DEBUG CAREFUL: Adding var 13 to fractional list (xi=0.030960)
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.654799
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.654799)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.654799
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.654799)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.500000
DEBUG CAREFUL: Adding var 27 to fractional list (xi=0.500000)
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.030960
DEBUG CAREFUL: Adding var 28 to fractional list (xi=0.030960)
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 8 fractional variables

  %  Carefully choosing branching variable, nfrac = 8
DEBUG CAREFUL: Testing fvar[0] = var 2
DEBUG CAREFUL: Calling compare_branch_vars for var 2
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 2
DEBUG CAREFUL: New best var: 2
DEBUG CAREFUL: Testing fvar[1] = var 27
DEBUG CAREFUL: Calling compare_branch_vars for var 27
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 27
DEBUG CAREFUL: Testing fvar[2] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 25
DEBUG CAREFUL: Testing fvar[3] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
DEBUG CAREFUL: Testing fvar[4] = var 6
DEBUG CAREFUL: Calling compare_branch_vars for var 6
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 6
DEBUG CAREFUL: New best var: 6
DEBUG CAREFUL: Testing fvar[5] = var 13
DEBUG CAREFUL: Calling compare_branch_vars for var 13
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 13
DEBUG CAREFUL: New best var: 13
DEBUG CAREFUL: Testing fvar[6] = var 8
DEBUG CAREFUL: Calling compare_branch_vars for var 8
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 8
DEBUG CAREFUL: New best var: 8
DEBUG CAREFUL: Testing fvar[7] = var 28
DEBUG CAREFUL: Calling compare_branch_vars for var 28
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 28
  % Initial guess is x8, Z0 = 26882948.2679912        , Z1 = 27634017.7910851        

DEBUG EVAL: Testing var 2 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=1, varin=72, theta=1.000000, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 2 = 0 gives z=26887809.391199
  % 	x2 = 0,	Z0 = 26887809.3911995        
DEBUG EVAL: First branch cutoff check: z=26887809.391199, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 2 = 1
ITER 1: row=1, varin=31, theta=1.000000, up=999999999999999983222784.000000
  % 	x2 = 1,	Z1 = 27049472.5121309        
DEBUG EVAL: Second branch cutoff check: z=27049472.512131, best_z=INF, threshold=INF
  %   New best:  x2, Z = 26887809.3911995        
DEBUG EVAL: Testing var 27 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=31, varin=72, theta=1.000000, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 27 = 0 gives z=26887809.391199
  % 	x27 = 0,	Z0 = 26887809.3911995        
DEBUG EVAL: First branch cutoff check: z=26887809.391199, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 27 = 1
ITER 1: row=31, varin=30, theta=1.000000, up=999999999999999983222784.000000
  % 	x27 = 1,	Z1 = 27184267.5692797        
DEBUG EVAL: Second branch cutoff check: z=27184267.569280, best_z=INF, threshold=INF
  %   New best:  x27, Z = 26887809.3911995        
DEBUG EVAL: Testing var 25 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=60, varin=72, theta=4.489661, up=999999999999999983222784.000000
ITER 2: row=1, varin=97, theta=1.609537, up=1.000000
ITER 3: row=1, varin=103, theta=0.341124, up=1.000000
ITER 4: row=3, varin=97, theta=1.000000, up=1.000000
DEBUG EVAL: Branch var 25 = 1 gives z=26972433.566306
  % 	x25 = 1,	Z1 = 26972433.5663057        
DEBUG EVAL: First branch cutoff check: z=26972433.566306, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 25 = 0
ITER 1: row=60, varin=33, theta=1.535771, up=999999999999999983222784.000000
ITER 2: row=33, varin=70, theta=2.255915, up=999999999999999983222784.000000
ITER 3: row=59, varin=65, theta=0.770911, up=999999999999999983222784.000000
  % 	x25 = 0,	Z0 = 26997681.3645981        
DEBUG EVAL: Second branch cutoff check: z=26997681.364598, best_z=INF, threshold=INF
  %   New best:  x25, Z = 26972433.5663057        
DEBUG EVAL: Testing var 21 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=46, varin=72, theta=4.489661, up=999999999999999983222784.000000
ITER 2: row=1, varin=97, theta=1.609537, up=1.000000
ITER 3: row=1, varin=103, theta=0.341124, up=1.000000
ITER 4: row=3, varin=97, theta=1.000000, up=1.000000
DEBUG EVAL: Branch var 21 = 1 gives z=26972433.566306
  % 	x21 = 1,	Z1 = 26972433.5663057        
DEBUG EVAL: First branch cutoff check: z=26972433.566306, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 21 = 0
ITER 1: row=46, varin=33, theta=1.535771, up=999999999999999983222784.000000
ITER 2: row=33, varin=70, theta=2.255915, up=999999999999999983222784.000000
ITER 3: row=59, varin=61, theta=0.670326, up=999999999999999983222784.000000
  % 	x21 = 0,	Z0 = 27019916.1530126        
DEBUG EVAL: Second branch cutoff check: z=27019916.153013, best_z=INF, threshold=INF
  %   New best:  x21, Z = 26972433.5663057        
DEBUG EVAL: Testing var 6 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=21, varin=72, theta=8.398860, up=999999999999999983222784.000000
ITER 2: row=1, varin=70, theta=2.496467, up=999999999999999983222784.000000
ITER 3: row=59, varin=33, theta=5.531763, up=999999999999999983222784.000000
ITER 4: row=33, varin=69, theta=1.176171, up=999999999999999983222784.000000
ITER 5: row=23, varin=31, theta=0.726480, up=999999999999999983222784.000000
ITER 6: row=31, varin=9, theta=1.271764, up=999999999999999983222784.000000
ITER 7: row=9, varin=62, theta=0.720755, up=999999999999999983222784.000000
ITER 8: row=62, varin=65, theta=2.075817, up=999999999999999983222784.000000
ITER 9: row=65, varin=20, theta=0.790798, up=999999999999999983222784.000000
ITER 10: row=20, varin=60, theta=0.664474, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 6 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x6 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=21, varin=62, theta=0.046162, up=999999999999999983222784.000000
ITER 2: row=68, varin=67, theta=0.043166, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=72)
DEBUG SOLUTION: LP solution array indices: FST[73-112], not_covered[113-132]
DEBUG SOLUTION: lp->best_solution[0] = 26892492.882227
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 72 rows, 60 cols, 331 nonzeros, 1 slack, 71 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 1 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 2 at  26.89249288222713119012
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x563ae8f40ea0
% @LO 0.00  26.88294826799116776783 99.9000000000
% @LN 0.00  26.89249288222713119012 99.9000000000
% Resuming node 2 at  26.89249288222713119012
DEBUG CONSTRNT: LP rows=71, pool->nlprows=71, pool->npend=0
DEBUG CONSTRNT: Checking 71 LP rows (pool tracks 71, total LP rows 71)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 8
DEBUG CONSTRNT: Pool row 8 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 9
DEBUG CONSTRNT: Pool row 9 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 11
DEBUG CONSTRNT: Pool row 11 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 14
DEBUG CONSTRNT: Pool row 14 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 81
DEBUG CONSTRNT: Pool row 81 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=50, expected 50
DEBUG CONSTRNT: Checking LP row 51 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=51, expected 51
DEBUG CONSTRNT: Checking LP row 52 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=52, expected 52
DEBUG CONSTRNT: Checking LP row 53 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=53, expected 53
DEBUG CONSTRNT: Checking LP row 54 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=54, expected 54
DEBUG CONSTRNT: Checking LP row 55 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=55, expected 55
DEBUG CONSTRNT: Checking LP row 56 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=56, expected 56
DEBUG CONSTRNT: Checking LP row 57 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=57, expected 57
DEBUG CONSTRNT: Checking LP row 58 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=58, expected 58
DEBUG CONSTRNT: Checking LP row 59 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=59, expected 59
DEBUG CONSTRNT: Checking LP row 60 -> pool row 28
DEBUG CONSTRNT: Pool row 28 has lprow=60, expected 60
DEBUG CONSTRNT: Checking LP row 61 -> pool row 51
DEBUG CONSTRNT: Pool row 51 has lprow=61, expected 61
DEBUG CONSTRNT: Checking LP row 62 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=62, expected 62
DEBUG CONSTRNT: Checking LP row 63 -> pool row 76
DEBUG CONSTRNT: Pool row 76 has lprow=63, expected 63
DEBUG CONSTRNT: Checking LP row 64 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=64, expected 64
DEBUG CONSTRNT: Checking LP row 65 -> pool row 46
DEBUG CONSTRNT: Pool row 46 has lprow=65, expected 65
DEBUG CONSTRNT: Checking LP row 66 -> pool row 55
DEBUG CONSTRNT: Pool row 55 has lprow=66, expected 66
DEBUG CONSTRNT: Checking LP row 67 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=67, expected 67
DEBUG CONSTRNT: Checking LP row 68 -> pool row 45
DEBUG CONSTRNT: Pool row 45 has lprow=68, expected 68
DEBUG CONSTRNT: Checking LP row 69 -> pool row 79
DEBUG CONSTRNT: Pool row 79 has lprow=69, expected 69
DEBUG CONSTRNT: Checking LP row 70 -> pool row 133
DEBUG CONSTRNT: Pool row 133 has lprow=70, expected 70
 % @PAP adding 71 rows, 269 nz to LP
DEBUG BB: Processing node 2, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 2 LP 6 Solution, length = 26892492.882227, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.500000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.043166 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.043166 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.629497 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.629497 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.500000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.043166 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.500000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 0.956834 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 0.956834 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.370503 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.956834 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.500000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.370503 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.370503 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 7 fractional variables
DEBUG CG: LP optimal, z=26892492.882227, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=26892492.882227, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 2 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 2
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.500000
DEBUG CAREFUL: Adding var 2 to fractional list (xi=0.500000)
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.043166
DEBUG CAREFUL: Adding var 8 to fractional list (xi=0.043166)
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.043166
DEBUG CAREFUL: Adding var 13 to fractional list (xi=0.043166)
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.629497
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.629497)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.629497
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.629497)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.500000
DEBUG CAREFUL: Adding var 27 to fractional list (xi=0.500000)
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.043166
DEBUG CAREFUL: Adding var 28 to fractional list (xi=0.043166)
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 7 fractional variables

  %  Carefully choosing branching variable, nfrac = 7
DEBUG CAREFUL: Testing fvar[0] = var 27
DEBUG CAREFUL: Calling compare_branch_vars for var 27
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 27
DEBUG CAREFUL: New best var: 27
DEBUG CAREFUL: Testing fvar[1] = var 2
DEBUG CAREFUL: Calling compare_branch_vars for var 2
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 2
DEBUG CAREFUL: Testing fvar[2] = var 13
DEBUG CAREFUL: Calling compare_branch_vars for var 13
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 13
DEBUG CAREFUL: New best var: 13
DEBUG CAREFUL: Testing fvar[3] = var 8
DEBUG CAREFUL: Calling compare_branch_vars for var 8
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 8
DEBUG CAREFUL: New best var: 8
DEBUG CAREFUL: Testing fvar[4] = var 28
DEBUG CAREFUL: Calling compare_branch_vars for var 28
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 28
DEBUG CAREFUL: Testing fvar[5] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 25
DEBUG CAREFUL: New best var: 25
DEBUG CAREFUL: Testing fvar[6] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 21
DEBUG CAREFUL: New best var: 21
  % Initial guess is x21, Z0 = 27019916.1530126        , Z1 = 26972433.5663057        

DEBUG EVAL: Testing var 27 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=31, varin=30, theta=1.000000, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 27 = 1 gives z=27215286.080533
  % 	x27 = 1,	Z1 = 27215286.0805331        
DEBUG EVAL: First branch cutoff check: z=27215286.080533, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 27 = 0
ITER 1: row=31, varin=71, theta=1.000000, up=999999999999999983222784.000000
  % 	x27 = 0,	Z0 = 26932923.7259711        
DEBUG EVAL: Second branch cutoff check: z=26932923.725971, best_z=INF, threshold=INF
DEBUG EVAL: Testing var 2 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=1, varin=31, theta=1.000000, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 2 = 1 gives z=27055973.036628
  % 	x2 = 1,	Z1 = 27055973.0366282        
DEBUG EVAL: First branch cutoff check: z=27055973.036628, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 2 = 0
ITER 1: row=1, varin=71, theta=1.000000, up=999999999999999983222784.000000
  % 	x2 = 0,	Z0 = 26932923.7259711        
DEBUG EVAL: Second branch cutoff check: z=26932923.725971, best_z=INF, threshold=INF
DEBUG EVAL: Testing var 13 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=23, varin=33, theta=7.418816, up=999999999999999983222784.000000
ITER 2: row=33, varin=71, theta=5.948085, up=999999999999999983222784.000000
ITER 3: row=1, varin=69, theta=1.669545, up=999999999999999983222784.000000
ITER 4: row=21, varin=31, theta=2.170070, up=999999999999999983222784.000000
ITER 5: row=31, varin=9, theta=3.798886, up=999999999999999983222784.000000
ITER 6: row=9, varin=68, theta=2.152968, up=999999999999999983222784.000000
ITER 7: row=60, varin=65, theta=3.320616, up=999999999999999983222784.000000
ITER 8: row=59, varin=20, theta=2.440875, up=999999999999999983222784.000000
ITER 9: row=20, varin=47, theta=5.364050, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 13 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x13 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=23, varin=88, theta=0.059323, up=1.000000
ITER 2: row=8, varin=106, theta=0.177069, up=1.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=71)
DEBUG SOLUTION: LP solution array indices: FST[72-111], not_covered[112-131]
DEBUG SOLUTION: lp->best_solution[0] = 26900074.208290
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 71 rows, 60 cols, 329 nonzeros, 0 slack, 71 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @PAP adding 2 rows, 11 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=72, varin=104, theta=0.220471, up=1.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=73)
DEBUG SOLUTION: LP solution array indices: FST[74-113], not_covered[114-133]
DEBUG SOLUTION: lp->best_solution[0] = 26903660.775987
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 73 rows, 60 cols, 340 nonzeros, 0 slack, 73 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @PAP adding 4 rows, 15 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=74, varin=110, theta=0.210427, up=1.000000
ITER 2: row=75, varin=102, theta=0.464447, up=1.000000
ITER 3: row=3, varin=120, theta=0.059267, up=1.000000
ITER 4: row=73, varin=23, theta=0.008208, up=999999999999999983222784.000000
ITER 5: row=43, varin=19, theta=0.059306, up=999999999999999983222784.000000
ITER 6: row=76, varin=85, theta=0.082081, up=1.000000
ITER 7: row=7, varin=83, theta=0.079359, up=1.000000
ITER 8: row=6, varin=9, theta=0.024850, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=8)
ITER 9: row=19, varin=76, theta=0.000000, up=999999999999999983222784.000000
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=77)
DEBUG SOLUTION: LP solution array indices: FST[78-117], not_covered[118-137]
DEBUG SOLUTION: lp->best_solution[0] = 26933151.563581
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 0.975150
DEBUG SOLUTION: lp->best_solution[10] = 0.975150
DEBUG SOLUTION: lp->best_solution[11] = 4.950300
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 77 rows, 60 cols, 355 nonzeros, 5 slack, 72 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 5 slack rows
   % @PAP adding 6 rows, 21 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=75, varin=62, theta=0.005243, up=999999999999999983222784.000000
ITER 2: row=73, varin=75, theta=0.140320, up=999999999999999983222784.000000
ITER 3: row=76, varin=6, theta=0.016421, up=999999999999999983222784.000000
ITER 4: row=74, varin=73, theta=0.011472, up=999999999999999983222784.000000
ITER 5: row=77, varin=74, theta=0.038061, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=5)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=78)
DEBUG SOLUTION: LP solution array indices: FST[79-118], not_covered[119-138]
DEBUG SOLUTION: lp->best_solution[0] = 26934548.485451
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 78 rows, 60 cols, 362 nonzeros, 5 slack, 73 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 5 slack rows
   % @PAP adding 1 rows, 2 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=74, varin=16, theta=0.059306, up=999999999999999983222784.000000
ITER 2: row=69, varin=67, theta=0.058555, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=74)
DEBUG SOLUTION: LP solution array indices: FST[75-114], not_covered[115-134]
DEBUG SOLUTION: lp->best_solution[0] = 26935061.394135
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 74 rows, 60 cols, 345 nonzeros, 2 slack, 72 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 2 slack rows
   % @PAP adding 1 rows, 2 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=73, varin=7, theta=0.031167, up=999999999999999983222784.000000
ITER 2: row=71, varin=65, theta=0.058276, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=73)
DEBUG SOLUTION: LP solution array indices: FST[74-113], not_covered[114-133]
DEBUG SOLUTION: lp->best_solution[0] = 26936833.008497
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 73 rows, 60 cols, 343 nonzeros, 1 slack, 72 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 1 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 2 at  26.93683300849744099992
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x563ae8f40ea0
% @LO 0.00  26.89249288222713119012 99.9000000000
% @LN 0.00  26.93683300849744099992 99.9000000000
% Resuming node 2 at  26.93683300849744099992
DEBUG CONSTRNT: LP rows=72, pool->nlprows=72, pool->npend=0
DEBUG CONSTRNT: Checking 72 LP rows (pool tracks 72, total LP rows 72)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 8
DEBUG CONSTRNT: Pool row 8 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 9
DEBUG CONSTRNT: Pool row 9 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 11
DEBUG CONSTRNT: Pool row 11 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=50, expected 50
DEBUG CONSTRNT: Checking LP row 51 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=51, expected 51
DEBUG CONSTRNT: Checking LP row 52 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=52, expected 52
DEBUG CONSTRNT: Checking LP row 53 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=53, expected 53
DEBUG CONSTRNT: Checking LP row 54 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=54, expected 54
DEBUG CONSTRNT: Checking LP row 55 -> pool row 28
DEBUG CONSTRNT: Pool row 28 has lprow=55, expected 55
DEBUG CONSTRNT: Checking LP row 56 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=56, expected 56
DEBUG CONSTRNT: Checking LP row 57 -> pool row 76
DEBUG CONSTRNT: Pool row 76 has lprow=57, expected 57
DEBUG CONSTRNT: Checking LP row 58 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=58, expected 58
DEBUG CONSTRNT: Checking LP row 59 -> pool row 55
DEBUG CONSTRNT: Pool row 55 has lprow=59, expected 59
DEBUG CONSTRNT: Checking LP row 60 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=60, expected 60
DEBUG CONSTRNT: Checking LP row 61 -> pool row 45
DEBUG CONSTRNT: Pool row 45 has lprow=61, expected 61
DEBUG CONSTRNT: Checking LP row 62 -> pool row 133
DEBUG CONSTRNT: Pool row 133 has lprow=62, expected 62
DEBUG CONSTRNT: Checking LP row 63 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=63, expected 63
DEBUG CONSTRNT: Checking LP row 64 -> pool row 26
DEBUG CONSTRNT: Pool row 26 has lprow=64, expected 64
DEBUG CONSTRNT: Checking LP row 65 -> pool row 30
DEBUG CONSTRNT: Pool row 30 has lprow=65, expected 65
DEBUG CONSTRNT: Checking LP row 66 -> pool row 32
DEBUG CONSTRNT: Pool row 32 has lprow=66, expected 66
DEBUG CONSTRNT: Checking LP row 67 -> pool row 77
DEBUG CONSTRNT: Pool row 77 has lprow=67, expected 67
DEBUG CONSTRNT: Checking LP row 68 -> pool row 78
DEBUG CONSTRNT: Pool row 78 has lprow=68, expected 68
DEBUG CONSTRNT: Checking LP row 69 -> pool row 82
DEBUG CONSTRNT: Pool row 82 has lprow=69, expected 69
DEBUG CONSTRNT: Checking LP row 70 -> pool row 79
DEBUG CONSTRNT: Pool row 79 has lprow=70, expected 70
DEBUG CONSTRNT: Checking LP row 71 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=71, expected 71
 % @PAP adding 72 rows, 274 nz to LP
DEBUG BB: Processing node 2, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 2 LP 7 Solution, length = 26936833.008497, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.500000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.019425 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.019425 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.019425 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.019425 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.635978 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.635978 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.500000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.019425 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 0.980575 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.500000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 0.980575 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.364022 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.980575 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.500000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.364022 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.364022 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 9 fractional variables
DEBUG CG: LP optimal, z=26936833.008497, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=26936833.008497, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 2 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 2
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.500000
DEBUG CAREFUL: Adding var 2 to fractional list (xi=0.500000)
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.019425
DEBUG CAREFUL: Adding var 5 to fractional list (xi=0.019425)
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.019425
DEBUG CAREFUL: Adding var 7 to fractional list (xi=0.019425)
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.019425
DEBUG CAREFUL: Adding var 8 to fractional list (xi=0.019425)
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.019425
DEBUG CAREFUL: Adding var 16 to fractional list (xi=0.019425)
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.635978
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.635978)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.635978
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.635978)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.500000
DEBUG CAREFUL: Adding var 27 to fractional list (xi=0.500000)
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.019425
DEBUG CAREFUL: Adding var 34 to fractional list (xi=0.019425)
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 9 fractional variables

  %  Carefully choosing branching variable, nfrac = 9
DEBUG CAREFUL: Testing fvar[0] = var 2
DEBUG CAREFUL: Calling compare_branch_vars for var 2
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 2
DEBUG CAREFUL: New best var: 2
DEBUG CAREFUL: Testing fvar[1] = var 27
DEBUG CAREFUL: Calling compare_branch_vars for var 27
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 27
DEBUG CAREFUL: New best var: 27
DEBUG CAREFUL: Testing fvar[2] = var 16
DEBUG CAREFUL: Calling compare_branch_vars for var 16
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 16
DEBUG CAREFUL: New best var: 16
DEBUG CAREFUL: Testing fvar[3] = var 7
DEBUG CAREFUL: Calling compare_branch_vars for var 7
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 7
DEBUG CAREFUL: Testing fvar[4] = var 5
DEBUG CAREFUL: Calling compare_branch_vars for var 5
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 5
DEBUG CAREFUL: Testing fvar[5] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 25
DEBUG CAREFUL: New best var: 25
DEBUG CAREFUL: Testing fvar[6] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 21
DEBUG CAREFUL: New best var: 21
DEBUG CAREFUL: Testing fvar[7] = var 8
DEBUG CAREFUL: Calling compare_branch_vars for var 8
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 8
DEBUG CAREFUL: Testing fvar[8] = var 34
DEBUG CAREFUL: Calling compare_branch_vars for var 34
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 34
  % Initial guess is x21, Z0 = 27019916.1530126        , Z1 = 26972433.5663057        

DEBUG EVAL: Testing var 2 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=1, varin=26, theta=1.000000, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 2 = 1 gives z=27086171.646012
  % 	x2 = 1,	Z1 = 27086171.646012         
DEBUG EVAL: First branch cutoff check: z=27086171.646012, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 2 = 0
ITER 1: row=1, varin=63, theta=1.000000, up=999999999999999983222784.000000
  % 	x2 = 0,	Z0 = 27142505.3026512        
DEBUG EVAL: Second branch cutoff check: z=27142505.302651, best_z=INF, threshold=INF
  %   New best:  x2, Z = 27086171.646012         
DEBUG EVAL: Testing var 27 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=26, varin=25, theta=1.000000, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 27 = 1 gives z=27359384.592185
  % 	x27 = 1,	Z1 = 27359384.5921847        
DEBUG EVAL: First branch cutoff check: z=27359384.592185, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 27 = 0
ITER 1: row=26, varin=26, theta=1.000000, up=999999999999999983222784.000000
  % 	x27 = 0,	Z0 = 27086171.646012         
DEBUG EVAL: Second branch cutoff check: z=27086171.646012, best_z=INF, threshold=INF
  %   New best:  x27, Z = 27086171.646012         
DEBUG EVAL: Testing var 16 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=8, varin=66, theta=9.217894, up=999999999999999983222784.000000
ITER 2: row=66, varin=72, theta=8.867305, up=999999999999999983222784.000000
ITER 3: row=65, varin=71, theta=5.538628, up=999999999999999983222784.000000
ITER 4: row=70, varin=68, theta=3.427066, up=999999999999999983222784.000000
ITER 5: row=17, varin=69, theta=2.514116, up=999999999999999983222784.000000
ITER 6: row=54, varin=64, theta=3.123976, up=999999999999999983222784.000000
ITER 7: row=64, varin=63, theta=3.218733, up=999999999999999983222784.000000
ITER 8: row=25, varin=62, theta=0.748628, up=999999999999999983222784.000000
ITER 9: row=62, varin=28, theta=2.767340, up=999999999999999983222784.000000
ITER 10: row=28, varin=3, theta=2.016840, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 16 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x16 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=8, varin=70, theta=0.027358, up=999999999999999983222784.000000
ITER 2: row=6, varin=73, theta=0.090183, up=1.000000
ITER 3: row=2, varin=83, theta=0.103639, up=1.000000
ITER 4: row=20, varin=76, theta=0.105057, up=1.000000
ITER 5: row=9, varin=68, theta=0.040845, up=999999999999999983222784.000000
ITER 6: row=7, varin=95, theta=0.402449, up=1.000000
ITER 7: row=13, varin=109, theta=0.166368, up=1.000000
LP PHASE: Switching to primal (iter=7)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=72)
DEBUG SOLUTION: LP solution array indices: FST[73-112], not_covered[113-132]
DEBUG SOLUTION: lp->best_solution[0] = 26949441.652714
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 72 rows, 60 cols, 334 nonzeros, 0 slack, 72 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @PAP adding 4 rows, 19 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=73, varin=8, theta=0.024611, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=76)
DEBUG SOLUTION: LP solution array indices: FST[77-116], not_covered[117-136]
DEBUG SOLUTION: lp->best_solution[0] = 26954099.229477
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 0.975389
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 76 rows, 60 cols, 353 nonzeros, 4 slack, 72 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 4 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 2 at  26.95409922947732184184
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x563ae8f40ea0
% @LO 0.00  26.93683300849744099992 99.9000000000
% @LN 0.00  26.95409922947732184184 99.9000000000
% Resuming node 2 at  26.95409922947732184184
DEBUG CONSTRNT: LP rows=72, pool->nlprows=72, pool->npend=0
DEBUG CONSTRNT: Checking 72 LP rows (pool tracks 72, total LP rows 72)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 8
DEBUG CONSTRNT: Pool row 8 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 9
DEBUG CONSTRNT: Pool row 9 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=50, expected 50
DEBUG CONSTRNT: Checking LP row 51 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=51, expected 51
DEBUG CONSTRNT: Checking LP row 52 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=52, expected 52
DEBUG CONSTRNT: Checking LP row 53 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=53, expected 53
DEBUG CONSTRNT: Checking LP row 54 -> pool row 28
DEBUG CONSTRNT: Pool row 28 has lprow=54, expected 54
DEBUG CONSTRNT: Checking LP row 55 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=55, expected 55
DEBUG CONSTRNT: Checking LP row 56 -> pool row 76
DEBUG CONSTRNT: Pool row 76 has lprow=56, expected 56
DEBUG CONSTRNT: Checking LP row 57 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=57, expected 57
DEBUG CONSTRNT: Checking LP row 58 -> pool row 55
DEBUG CONSTRNT: Pool row 55 has lprow=58, expected 58
DEBUG CONSTRNT: Checking LP row 59 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=59, expected 59
DEBUG CONSTRNT: Checking LP row 60 -> pool row 45
DEBUG CONSTRNT: Pool row 45 has lprow=60, expected 60
DEBUG CONSTRNT: Checking LP row 61 -> pool row 133
DEBUG CONSTRNT: Pool row 133 has lprow=61, expected 61
DEBUG CONSTRNT: Checking LP row 62 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=62, expected 62
DEBUG CONSTRNT: Checking LP row 63 -> pool row 26
DEBUG CONSTRNT: Pool row 26 has lprow=63, expected 63
DEBUG CONSTRNT: Checking LP row 64 -> pool row 30
DEBUG CONSTRNT: Pool row 30 has lprow=64, expected 64
DEBUG CONSTRNT: Checking LP row 65 -> pool row 32
DEBUG CONSTRNT: Pool row 32 has lprow=65, expected 65
DEBUG CONSTRNT: Checking LP row 66 -> pool row 77
DEBUG CONSTRNT: Pool row 77 has lprow=66, expected 66
DEBUG CONSTRNT: Checking LP row 67 -> pool row 78
DEBUG CONSTRNT: Pool row 78 has lprow=67, expected 67
DEBUG CONSTRNT: Checking LP row 68 -> pool row 79
DEBUG CONSTRNT: Pool row 79 has lprow=68, expected 68
DEBUG CONSTRNT: Checking LP row 69 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=69, expected 69
DEBUG CONSTRNT: Checking LP row 70 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=70, expected 70
DEBUG CONSTRNT: Checking LP row 71 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=71, expected 71
 % @PAP adding 72 rows, 274 nz to LP
DEBUG BB: Processing node 2, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 2 LP 8 Solution, length = 26954099.229477, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.500000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.024611 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.024611 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.024611 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.623054 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.623054 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.500000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.024611 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.024611 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 0.975389 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.500000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 0.975389 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.376946 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.975389 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.500000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.376946 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.376946 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 9 fractional variables
DEBUG CG: LP optimal, z=26954099.229477, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=26954099.229477, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 2 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 2
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.500000
DEBUG CAREFUL: Adding var 2 to fractional list (xi=0.500000)
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.024611
DEBUG CAREFUL: Adding var 5 to fractional list (xi=0.024611)
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.024611
DEBUG CAREFUL: Adding var 7 to fractional list (xi=0.024611)
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.024611
DEBUG CAREFUL: Adding var 8 to fractional list (xi=0.024611)
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.623054
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.623054)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.623054
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.623054)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.500000
DEBUG CAREFUL: Adding var 27 to fractional list (xi=0.500000)
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.024611
DEBUG CAREFUL: Adding var 34 to fractional list (xi=0.024611)
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.024611
DEBUG CAREFUL: Adding var 36 to fractional list (xi=0.024611)
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 9 fractional variables

  %  Carefully choosing branching variable, nfrac = 9
DEBUG CAREFUL: Testing fvar[0] = var 27
DEBUG CAREFUL: Calling compare_branch_vars for var 27
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 27
DEBUG CAREFUL: New best var: 27
DEBUG CAREFUL: Testing fvar[1] = var 2
DEBUG CAREFUL: Calling compare_branch_vars for var 2
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 2
DEBUG CAREFUL: Testing fvar[2] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 25
DEBUG CAREFUL: Testing fvar[3] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
DEBUG CAREFUL: Testing fvar[4] = var 7
DEBUG CAREFUL: Calling compare_branch_vars for var 7
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 7
DEBUG CAREFUL: Testing fvar[5] = var 5
DEBUG CAREFUL: Calling compare_branch_vars for var 5
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 5
DEBUG CAREFUL: Testing fvar[6] = var 8
DEBUG CAREFUL: Calling compare_branch_vars for var 8
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 8
DEBUG CAREFUL: Testing fvar[7] = var 34
DEBUG CAREFUL: Calling compare_branch_vars for var 34
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 34
DEBUG CAREFUL: Testing fvar[8] = var 36
DEBUG CAREFUL: Calling compare_branch_vars for var 36
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 36
  % Initial guess is x27, Z0 = 27086171.646012         , Z1 = 27359384.5921847        

DEBUG EVAL: Testing var 27 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=25, varin=25, theta=1.000000, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 27 = 0 gives z=27097931.104245
  % 	x27 = 0,	Z0 = 27097931.1042446        
DEBUG EVAL: First branch cutoff check: z=27097931.104245, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 27 = 1
ITER 1: row=25, varin=24, theta=1.000000, up=999999999999999983222784.000000
  % 	x27 = 1,	Z1 = 27415497.1239777        
DEBUG EVAL: Second branch cutoff check: z=27415497.123978, best_z=INF, threshold=INF
  %   New best:  x27, Z = 27097931.1042446        
DEBUG EVAL: Testing var 2 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=1, varin=25, theta=1.000000, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 2 = 1 gives z=27097931.104245
  % 	x2 = 1,	Z1 = 27097931.1042446        
DEBUG EVAL: First branch cutoff check: z=27097931.104245, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 2 = 0
ITER 1: row=1, varin=62, theta=1.000000, up=999999999999999983222784.000000
  % 	x2 = 0,	Z0 = 27224117.199609         
DEBUG EVAL: Second branch cutoff check: z=27224117.199609, best_z=INF, threshold=INF
DEBUG EVAL: Testing var 25 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=53, varin=82, theta=0.960376, up=1.000000
ITER 2: row=18, varin=90, theta=0.478952, up=1.000000
ITER 3: row=10, varin=114, theta=1.022579, up=1.000000
ITER 4: row=10, varin=104, theta=0.019267, up=1.000000
ITER 5: row=66, varin=114, theta=1.000000, up=1.000000
ITER 6: row=63, varin=66, theta=0.324929, up=999999999999999983222784.000000
ITER 7: row=2, varin=18, theta=0.341383, up=999999999999999983222784.000000
ITER 8: row=53, varin=7, theta=0.122992, up=999999999999999983222784.000000
ITER 9: row=61, varin=10, theta=0.403163, up=999999999999999983222784.000000
ITER 10: row=10, varin=69, theta=0.216269, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 25 = 1 gives z=27314499.955619
  % 	x25 = 1,	Z1 = 27314499.9556194        
DEBUG EVAL: First branch cutoff check: z=27314499.955619, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 25 = 0
ITER 1: row=53, varin=12, theta=1.129989, up=999999999999999983222784.000000
ITER 2: row=12, varin=71, theta=2.393126, up=999999999999999983222784.000000
ITER 3: row=63, varin=59, theta=3.542604, up=999999999999999983222784.000000
ITER 4: row=59, varin=8, theta=0.583271, up=999999999999999983222784.000000
ITER 5: row=8, varin=68, theta=0.915865, up=999999999999999983222784.000000
ITER 6: row=6, varin=19, theta=0.405260, up=999999999999999983222784.000000
ITER 7: row=19, varin=2, theta=0.405652, up=999999999999999983222784.000000
ITER 8: row=2, varin=55, theta=1.143902, up=999999999999999983222784.000000
ITER 9: row=61, varin=65, theta=0.500000, up=999999999999999983222784.000000
ITER 10: row=65, varin=70, theta=0.064945, up=999999999999999983222784.000000
  % 	x25 = 0,	Z0 = 27082875.7247941        
DEBUG EVAL: Second branch cutoff check: z=27082875.724794, best_z=INF, threshold=INF
DEBUG EVAL: Testing var 21 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=40, varin=82, theta=0.960376, up=1.000000
ITER 2: row=18, varin=90, theta=0.478952, up=1.000000
ITER 3: row=10, varin=114, theta=1.022579, up=1.000000
ITER 4: row=10, varin=104, theta=0.019267, up=1.000000
ITER 5: row=66, varin=114, theta=1.000000, up=1.000000
ITER 6: row=63, varin=66, theta=0.324929, up=999999999999999983222784.000000
ITER 7: row=2, varin=18, theta=0.341383, up=999999999999999983222784.000000
ITER 8: row=40, varin=7, theta=0.122992, up=999999999999999983222784.000000
ITER 9: row=61, varin=10, theta=0.403163, up=999999999999999983222784.000000
ITER 10: row=10, varin=69, theta=0.216269, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 21 = 1 gives z=27268139.330436
  % 	x21 = 1,	Z1 = 27268139.3304363        
DEBUG EVAL: First branch cutoff check: z=27268139.330436, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 21 = 0
ITER 1: row=40, varin=12, theta=1.129989, up=999999999999999983222784.000000
ITER 2: row=12, varin=71, theta=2.393126, up=999999999999999983222784.000000
ITER 3: row=63, varin=59, theta=3.542604, up=999999999999999983222784.000000
ITER 4: row=59, varin=8, theta=0.583271, up=999999999999999983222784.000000
ITER 5: row=8, varin=68, theta=0.915865, up=999999999999999983222784.000000
ITER 6: row=6, varin=19, theta=0.405260, up=999999999999999983222784.000000
  % 	x21 = 0,	Z0 = 27052478.7581416        
DEBUG EVAL: Second branch cutoff check: z=27052478.758142, best_z=INF, threshold=INF
DEBUG EVAL: Testing var 7 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=7, varin=12, theta=15.950110, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 7 = 1 gives z=27291248.224554
  % 	x7 = 1,	Z1 = 28223474.1864239        
DEBUG EVAL: First branch cutoff check: z=28223474.186424, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 7 = 0
ITER 1: row=7, varin=82, theta=0.076550, up=1.000000
  % 	x7 = 0,	Z0 = 26957801.5203373        
DEBUG EVAL: Second branch cutoff check: z=26957801.520337, best_z=INF, threshold=INF
DEBUG EVAL: Testing var 5 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=6, varin=12, theta=15.950110, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 5 = 1 gives z=27291248.224554
  % 	x5 = 1,	Z1 = 28303998.3720643        
DEBUG EVAL: First branch cutoff check: z=28303998.372064, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 5 = 0
ITER 1: row=6, varin=82, theta=0.076550, up=1.000000
  % 	x5 = 0,	Z0 = 26957801.5203373        
DEBUG EVAL: Second branch cutoff check: z=26957801.520337, best_z=INF, threshold=INF
DEBUG EVAL: Testing var 8 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=16, varin=68, theta=1.425528, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 8 = 1 gives z=27072042.011320
  % 	x8 = 1,	Z1 = 27634017.7910851        
DEBUG EVAL: First branch cutoff check: z=27634017.791085, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 8 = 0
ITER 1: row=16, varin=82, theta=0.076550, up=1.000000
  % 	x8 = 0,	Z0 = 26957801.5203373        
DEBUG EVAL: Second branch cutoff check: z=26957801.520337, best_z=INF, threshold=INF
DEBUG EVAL: Testing var 34 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=61, varin=68, theta=1.425528, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 34 = 1 gives z=27072042.011320
  % 	x34 = 1,	Z1 = 27073666.900529         
DEBUG EVAL: First branch cutoff check: z=27073666.900529, best_z=INF, threshold=INF
DEBUG EVAL: Testing var 36 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=63, varin=12, theta=15.950110, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 36 = 1 gives z=27291248.224553
  % 	x36 = 1,	Z1 = 27411789.0718663        
DEBUG EVAL: First branch cutoff check: z=27411789.071866, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 36 = 0
ITER 1: row=63, varin=71, theta=0.028883, up=999999999999999983222784.000000
  % 	x36 = 0,	Z0 = 26954907.8412496        
DEBUG EVAL: Second branch cutoff check: z=26954907.841250, best_z=INF, threshold=INF
  % Best branch is x27, Z0 = 27097931.1042446        , Z1 = 27415497.1239777        

DEBUG CAREFUL: Final result - returning best.var = 27
DEBUG BB: Branching variable chosen: j=27
 % @NC    3    2	x27 = 0	27097931.104245
 % @NC    4    2	x27 = 1	27415497.123978
 %       2     2 26954099.2295               27097931.1042   x12 D     0     1
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x563ae8f3f2c0
% @LO 0.00  26.95409922947732184184 99.9000000000
% @LN 0.00  27.09793110424463336017 99.9000000000
% Resuming node 3 at  27.09793110424463336017
DEBUG CONSTRNT: LP rows=72, pool->nlprows=72, pool->npend=0
DEBUG CONSTRNT: Checking 72 LP rows (pool tracks 72, total LP rows 72)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 8
DEBUG CONSTRNT: Pool row 8 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 9
DEBUG CONSTRNT: Pool row 9 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=50, expected 50
DEBUG CONSTRNT: Checking LP row 51 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=51, expected 51
DEBUG CONSTRNT: Checking LP row 52 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=52, expected 52
DEBUG CONSTRNT: Checking LP row 53 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=53, expected 53
DEBUG CONSTRNT: Checking LP row 54 -> pool row 28
DEBUG CONSTRNT: Pool row 28 has lprow=54, expected 54
DEBUG CONSTRNT: Checking LP row 55 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=55, expected 55
DEBUG CONSTRNT: Checking LP row 56 -> pool row 76
DEBUG CONSTRNT: Pool row 76 has lprow=56, expected 56
DEBUG CONSTRNT: Checking LP row 57 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=57, expected 57
DEBUG CONSTRNT: Checking LP row 58 -> pool row 55
DEBUG CONSTRNT: Pool row 55 has lprow=58, expected 58
DEBUG CONSTRNT: Checking LP row 59 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=59, expected 59
DEBUG CONSTRNT: Checking LP row 60 -> pool row 45
DEBUG CONSTRNT: Pool row 45 has lprow=60, expected 60
DEBUG CONSTRNT: Checking LP row 61 -> pool row 133
DEBUG CONSTRNT: Pool row 133 has lprow=61, expected 61
DEBUG CONSTRNT: Checking LP row 62 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=62, expected 62
DEBUG CONSTRNT: Checking LP row 63 -> pool row 26
DEBUG CONSTRNT: Pool row 26 has lprow=63, expected 63
DEBUG CONSTRNT: Checking LP row 64 -> pool row 30
DEBUG CONSTRNT: Pool row 30 has lprow=64, expected 64
DEBUG CONSTRNT: Checking LP row 65 -> pool row 32
DEBUG CONSTRNT: Pool row 32 has lprow=65, expected 65
DEBUG CONSTRNT: Checking LP row 66 -> pool row 77
DEBUG CONSTRNT: Pool row 77 has lprow=66, expected 66
DEBUG CONSTRNT: Checking LP row 67 -> pool row 78
DEBUG CONSTRNT: Pool row 78 has lprow=67, expected 67
DEBUG CONSTRNT: Checking LP row 68 -> pool row 79
DEBUG CONSTRNT: Pool row 79 has lprow=68, expected 68
DEBUG CONSTRNT: Checking LP row 69 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=69, expected 69
DEBUG CONSTRNT: Checking LP row 70 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=70, expected 70
DEBUG CONSTRNT: Checking LP row 71 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=71, expected 71
 % @PAP adding 72 rows, 274 nz to LP
DEBUG BB: Processing node 3, calling compute_good_lower_bound
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=25, varin=25, theta=1.000000, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=72)
DEBUG SOLUTION: LP solution array indices: FST[73-112], not_covered[113-132]
DEBUG SOLUTION: lp->best_solution[0] = 27097931.104245
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 6.000000
  % @PL 72 rows, 60 cols, 334 nonzeros, 1 slack, 71 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
  % @D deleting 1 slack rows
  % Node 3 LP 1 Solution, length = 27097931.104245, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 1.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.016762 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.016762 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.016762 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.083808 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.083808 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.016762 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.016762 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 0.983238 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 0.983238 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.916192 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.983238 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.916192 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.916192 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 7 fractional variables
DEBUG CG: LP optimal, z=27097931.104245, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
 % @LO 0.01  27.09793110424463336017 99.9000000000
 % @LN 0.01  27.09793110424464046559 99.9000000000
DEBUG CG: Second cutoff check: z=27097931.104245, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 3 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 3
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=1.000000
DEBUG CAREFUL: Skipping var 2: xi+FUZZ=1.000001 >= 1.0
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.016762
DEBUG CAREFUL: Adding var 5 to fractional list (xi=0.016762)
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.016762
DEBUG CAREFUL: Adding var 7 to fractional list (xi=0.016762)
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.016762
DEBUG CAREFUL: Adding var 8 to fractional list (xi=0.016762)
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.083808
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.083808)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.083808
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.083808)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.000000
DEBUG CAREFUL: Skipping var 27: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.016762
DEBUG CAREFUL: Adding var 34 to fractional list (xi=0.016762)
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.016762
DEBUG CAREFUL: Adding var 36 to fractional list (xi=0.016762)
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 7 fractional variables

  %  Carefully choosing branching variable, nfrac = 7
DEBUG CAREFUL: Testing fvar[0] = var 7
DEBUG CAREFUL: Calling compare_branch_vars for var 7
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 7
DEBUG CAREFUL: New best var: 7
DEBUG CAREFUL: Testing fvar[1] = var 5
DEBUG CAREFUL: Calling compare_branch_vars for var 5
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 5
DEBUG CAREFUL: New best var: 5
DEBUG CAREFUL: Testing fvar[2] = var 8
DEBUG CAREFUL: Calling compare_branch_vars for var 8
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 8
DEBUG CAREFUL: Testing fvar[3] = var 34
DEBUG CAREFUL: Calling compare_branch_vars for var 34
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 34
DEBUG CAREFUL: Testing fvar[4] = var 36
DEBUG CAREFUL: Calling compare_branch_vars for var 36
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 36
DEBUG CAREFUL: Testing fvar[5] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 25
DEBUG CAREFUL: Testing fvar[6] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
  % Initial guess is x5, Z0 = 27097931.1042446        , Z1 = 28303998.3720643        

DEBUG EVAL: Testing var 7 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=6, varin=12, theta=16.078464, up=999999999999999983222784.000000
ITER 2: row=12, varin=70, theta=6.646659, up=999999999999999983222784.000000
ITER 3: row=62, varin=8, theta=3.565732, up=999999999999999983222784.000000
ITER 4: row=8, varin=19, theta=3.517594, up=999999999999999983222784.000000
ITER 5: row=19, varin=2, theta=3.060871, up=999999999999999983222784.000000
ITER 6: row=2, varin=69, theta=5.962166, up=999999999999999983222784.000000
ITER 7: row=53, varin=64, theta=8.374223, up=999999999999999983222784.000000
ITER 8: row=64, varin=68, theta=3.724043, up=999999999999999983222784.000000
ITER 9: row=7, varin=6, theta=2.056893, up=999999999999999983222784.000000
ITER 10: row=39, varin=61, theta=1.661489, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 7 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x7 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=6, varin=81, theta=0.052135, up=1.000000
ITER 2: row=18, varin=113, theta=0.051372, up=1.000000
ITER 3: row=65, varin=89, theta=0.042781, up=1.000000
ITER 4: row=10, varin=67, theta=0.053082, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=4)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=71)
DEBUG SOLUTION: LP solution array indices: FST[72-111], not_covered[112-131]
DEBUG SOLUTION: lp->best_solution[0] = 27102322.873426
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 6.000000
   % @PL 71 rows, 60 cols, 332 nonzeros, 3 slack, 68 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 3 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 3 at  27.10232287342574508671
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x563ae8f3f2c0
% @LO 0.01  27.09793110424464046559 99.9000000000
% @LN 0.01  27.10232287342574508671 99.9000000000
% Resuming node 3 at  27.10232287342574508671
DEBUG CONSTRNT: LP rows=68, pool->nlprows=68, pool->npend=0
DEBUG CONSTRNT: Checking 68 LP rows (pool tracks 68, total LP rows 68)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 8
DEBUG CONSTRNT: Pool row 8 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 9
DEBUG CONSTRNT: Pool row 9 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=50, expected 50
DEBUG CONSTRNT: Checking LP row 51 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=51, expected 51
DEBUG CONSTRNT: Checking LP row 52 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=52, expected 52
DEBUG CONSTRNT: Checking LP row 53 -> pool row 28
DEBUG CONSTRNT: Pool row 28 has lprow=53, expected 53
DEBUG CONSTRNT: Checking LP row 54 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=54, expected 54
DEBUG CONSTRNT: Checking LP row 55 -> pool row 76
DEBUG CONSTRNT: Pool row 76 has lprow=55, expected 55
DEBUG CONSTRNT: Checking LP row 56 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=56, expected 56
DEBUG CONSTRNT: Checking LP row 57 -> pool row 55
DEBUG CONSTRNT: Pool row 55 has lprow=57, expected 57
DEBUG CONSTRNT: Checking LP row 58 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=58, expected 58
DEBUG CONSTRNT: Checking LP row 59 -> pool row 45
DEBUG CONSTRNT: Pool row 45 has lprow=59, expected 59
DEBUG CONSTRNT: Checking LP row 60 -> pool row 133
DEBUG CONSTRNT: Pool row 133 has lprow=60, expected 60
DEBUG CONSTRNT: Checking LP row 61 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=61, expected 61
DEBUG CONSTRNT: Checking LP row 62 -> pool row 26
DEBUG CONSTRNT: Pool row 26 has lprow=62, expected 62
DEBUG CONSTRNT: Checking LP row 63 -> pool row 30
DEBUG CONSTRNT: Pool row 30 has lprow=63, expected 63
DEBUG CONSTRNT: Checking LP row 64 -> pool row 32
DEBUG CONSTRNT: Pool row 32 has lprow=64, expected 64
DEBUG CONSTRNT: Checking LP row 65 -> pool row 79
DEBUG CONSTRNT: Pool row 79 has lprow=65, expected 65
DEBUG CONSTRNT: Checking LP row 66 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=66, expected 66
DEBUG CONSTRNT: Checking LP row 67 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=67, expected 67
 % @PAP adding 68 rows, 266 nz to LP
DEBUG BB: Processing node 3, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 3 LP 2 Solution, length = 27102322.873426, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 1.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.053082 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.053082 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.053082 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.053082 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 0.946918 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.946918 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.946918 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.946918 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.946918 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 4 fractional variables
DEBUG CG: LP optimal, z=27102322.873426, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27102322.873426, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 3 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 3
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=1.000000
DEBUG CAREFUL: Skipping var 2: xi+FUZZ=1.000001 >= 1.0
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.053082
DEBUG CAREFUL: Adding var 8 to fractional list (xi=0.053082)
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.053082
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.053082)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.053082
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.053082)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.000000
DEBUG CAREFUL: Skipping var 27: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.053082
DEBUG CAREFUL: Adding var 34 to fractional list (xi=0.053082)
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 4 fractional variables

  %  Carefully choosing branching variable, nfrac = 4
DEBUG CAREFUL: Testing fvar[0] = var 8
DEBUG CAREFUL: Calling compare_branch_vars for var 8
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 8
DEBUG CAREFUL: New best var: 8
DEBUG CAREFUL: Testing fvar[1] = var 34
DEBUG CAREFUL: Calling compare_branch_vars for var 34
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 34
DEBUG CAREFUL: Testing fvar[2] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 25
DEBUG CAREFUL: Testing fvar[3] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
  % Initial guess is x8, Z0 = 27102322.8734257        , Z1 = 27634017.7910851        

DEBUG EVAL: Testing var 8 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=1, varin=10, theta=0.763162, up=999999999999999983222784.000000
ITER 2: row=39, varin=65, theta=3.820660, up=999999999999999983222784.000000
ITER 3: row=2, varin=18, theta=4.325452, up=999999999999999983222784.000000
ITER 4: row=18, varin=61, theta=1.570113, up=999999999999999983222784.000000
ITER 5: row=16, varin=100, theta=1.952212, up=1.000000
ITER 6: row=16, varin=57, theta=0.943299, up=999999999999999983222784.000000
ITER 7: row=57, varin=15, theta=0.693388, up=999999999999999983222784.000000
ITER 8: row=10, varin=68, theta=2.000000, up=999999999999999983222784.000000
ITER 9: row=68, varin=6, theta=1.000000, up=999999999999999983222784.000000
ITER 10: row=6, varin=67, theta=2.000000, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 8 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x8 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=1, varin=54, theta=0.015155, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=68)
DEBUG SOLUTION: LP solution array indices: FST[69-108], not_covered[109-128]
DEBUG SOLUTION: lp->best_solution[0] = 27102898.349059
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 0.954535
DEBUG SOLUTION: lp->best_solution[5] = 2.954535
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 6.000000
   % @PL 68 rows, 60 cols, 326 nonzeros, 5 slack, 63 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 5 slack rows
   % @PAP adding 4 rows, 12 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=64, varin=5, theta=0.021878, up=999999999999999983222784.000000
ITER 2: row=67, varin=88, theta=0.029904, up=1.000000
ITER 3: row=9, varin=60, theta=0.039396, up=999999999999999983222784.000000
ITER 4: row=66, varin=67, theta=0.017137, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=4)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=67)
DEBUG SOLUTION: LP solution array indices: FST[68-107], not_covered[108-127]
DEBUG SOLUTION: lp->best_solution[0] = 27107516.390211
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 0.982863
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 6.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 67 rows, 60 cols, 325 nonzeros, 4 slack, 63 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 4 slack rows
   % @PAP adding 6 rows, 28 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=69, varin=59, theta=0.004769, up=999999999999999983222784.000000
ITER 2: row=65, varin=113, theta=0.013966, up=1.000000
ITER 3: row=18, varin=122, theta=0.009718, up=1.000000
ITER 4: row=22, varin=8, theta=0.026203, up=999999999999999983222784.000000
ITER 5: row=41, varin=63, theta=0.043931, up=999999999999999983222784.000000
ITER 6: row=64, varin=52, theta=0.452866, up=999999999999999983222784.000000
ITER 7: row=66, varin=101, theta=0.147546, up=1.000000
LP PHASE: Switching to primal (iter=7)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=69)
DEBUG SOLUTION: LP solution array indices: FST[70-109], not_covered[110-129]
DEBUG SOLUTION: lp->best_solution[0] = 27115042.953296
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 6.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 69 rows, 60 cols, 337 nonzeros, 0 slack, 69 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @PAP adding 1 rows, 2 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=70, varin=125, theta=0.012407, up=1.000000
ITER 2: row=29, varin=7, theta=0.020897, up=999999999999999983222784.000000
ITER 3: row=25, varin=54, theta=0.015251, up=999999999999999983222784.000000
ITER 4: row=67, varin=33, theta=0.024508, up=999999999999999983222784.000000
ITER 5: row=34, varin=69, theta=0.071976, up=999999999999999983222784.000000
ITER 6: row=63, varin=34, theta=0.010190, up=999999999999999983222784.000000
ITER 7: row=67, varin=106, theta=0.160359, up=1.000000
ITER 8: row=53, varin=57, theta=0.007647, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=8)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=70)
DEBUG SOLUTION: LP solution array indices: FST[71-110], not_covered[111-130]
DEBUG SOLUTION: lp->best_solution[0] = 27120283.913165
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 6.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 70 rows, 60 cols, 339 nonzeros, 4 slack, 66 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 4 slack rows
   % @PAP adding 1 rows, 2 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=67, varin=116, theta=0.098914, up=1.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=67)
DEBUG SOLUTION: LP solution array indices: FST[68-107], not_covered[108-127]
DEBUG SOLUTION: lp->best_solution[0] = 27120322.156120
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 6.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 67 rows, 60 cols, 323 nonzeros, 1 slack, 66 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 1 slack rows
   % @PAP adding 1 rows, 2 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=67, varin=32, theta=0.041385, up=999999999999999983222784.000000
ITER 2: row=39, varin=33, theta=0.019550, up=999999999999999983222784.000000
ITER 3: row=34, varin=47, theta=0.049564, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=3)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=67)
DEBUG SOLUTION: LP solution array indices: FST[68-107], not_covered[108-127]
DEBUG SOLUTION: lp->best_solution[0] = 27121123.230899
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 0.990087
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 0.990087
DEBUG SOLUTION: lp->best_solution[11] = 5.980174
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 67 rows, 60 cols, 323 nonzeros, 16 slack, 51 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 16 slack rows
   % @PAP adding 2 rows, 11 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=52, varin=46, theta=0.042092, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=53)
DEBUG SOLUTION: LP solution array indices: FST[54-93], not_covered[94-113]
DEBUG SOLUTION: lp->best_solution[0] = 27121946.212001
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 53 rows, 60 cols, 279 nonzeros, 2 slack, 51 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 2 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 3 at  27.12194621200109878600
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x563ae8f3f2c0
% @LO 0.01  27.10232287342574508671 99.9000000000
% @LN 0.01  27.12194621200109878600 99.9000000000
% Resuming node 3 at  27.12194621200109878600
DEBUG CONSTRNT: LP rows=51, pool->nlprows=51, pool->npend=0
DEBUG CONSTRNT: Checking 51 LP rows (pool tracks 51, total LP rows 51)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 9
DEBUG CONSTRNT: Pool row 9 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 133
DEBUG CONSTRNT: Pool row 133 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 30
DEBUG CONSTRNT: Pool row 30 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 22
DEBUG CONSTRNT: Pool row 22 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 24
DEBUG CONSTRNT: Pool row 24 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 77
DEBUG CONSTRNT: Pool row 77 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 134
DEBUG CONSTRNT: Pool row 134 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 52
DEBUG CONSTRNT: Pool row 52 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 51
DEBUG CONSTRNT: Pool row 51 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 80
DEBUG CONSTRNT: Pool row 80 has lprow=50, expected 50
 % @PAP adding 51 rows, 199 nz to LP
DEBUG BB: Processing node 3, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 3 LP 3 Solution, length = 27121946.212001, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.006013 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 1.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.006013 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.006013 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.006013 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.006013 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.006013 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.006013 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.084185 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.006013 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.006013 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.006013 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.084185 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.006013 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.006013 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.006013 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.006013 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.006013 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.006013 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.006013 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.006013 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 0.993987 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 0.993987 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 0.993987 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 0.993987 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 0.993987 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 0.993987 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 0.993987 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.915815 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 0.993987 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.993987 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 0.993987 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 0.993987 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 0.993987 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 0.993987 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.915815 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.915815 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 0.993987 (terminal 19)
 % 20 fractional variables
DEBUG CG: LP optimal, z=27121946.212001, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27121946.212001, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 3 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 3
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.006013
DEBUG CAREFUL: Adding var 0 to fractional list (xi=0.006013)
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=1.000000
DEBUG CAREFUL: Skipping var 2: xi+FUZZ=1.000001 >= 1.0
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.006013
DEBUG CAREFUL: Adding var 3 to fractional list (xi=0.006013)
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.006013
DEBUG CAREFUL: Adding var 5 to fractional list (xi=0.006013)
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.006013
DEBUG CAREFUL: Adding var 9 to fractional list (xi=0.006013)
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.006013
DEBUG CAREFUL: Adding var 10 to fractional list (xi=0.006013)
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.006013
DEBUG CAREFUL: Adding var 17 to fractional list (xi=0.006013)
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.006013
DEBUG CAREFUL: Adding var 20 to fractional list (xi=0.006013)
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.084185
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.084185)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.006013
DEBUG CAREFUL: Adding var 22 to fractional list (xi=0.006013)
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.006013
DEBUG CAREFUL: Adding var 23 to fractional list (xi=0.006013)
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.006013
DEBUG CAREFUL: Adding var 24 to fractional list (xi=0.006013)
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.084185
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.084185)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.006013
DEBUG CAREFUL: Adding var 26 to fractional list (xi=0.006013)
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.000000
DEBUG CAREFUL: Skipping var 27: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.006013
DEBUG CAREFUL: Adding var 28 to fractional list (xi=0.006013)
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.006013
DEBUG CAREFUL: Adding var 29 to fractional list (xi=0.006013)
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.006013
DEBUG CAREFUL: Adding var 30 to fractional list (xi=0.006013)
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.006013
DEBUG CAREFUL: Adding var 32 to fractional list (xi=0.006013)
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.006013
DEBUG CAREFUL: Adding var 34 to fractional list (xi=0.006013)
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.006013
DEBUG CAREFUL: Adding var 35 to fractional list (xi=0.006013)
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.006013
DEBUG CAREFUL: Adding var 36 to fractional list (xi=0.006013)
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 20 fractional variables

  %  Carefully choosing branching variable, nfrac = 20
DEBUG CAREFUL: Testing fvar[0] = var 22
DEBUG CAREFUL: Calling compare_branch_vars for var 22
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 22
DEBUG CAREFUL: New best var: 22
DEBUG CAREFUL: Testing fvar[1] = var 10
DEBUG CAREFUL: Calling compare_branch_vars for var 10
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 10
DEBUG CAREFUL: New best var: 10
DEBUG CAREFUL: Testing fvar[2] = var 20
DEBUG CAREFUL: Calling compare_branch_vars for var 20
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 20
DEBUG CAREFUL: New best var: 20
DEBUG CAREFUL: Testing fvar[3] = var 9
DEBUG CAREFUL: Calling compare_branch_vars for var 9
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 9
DEBUG CAREFUL: Testing fvar[4] = var 26
DEBUG CAREFUL: Calling compare_branch_vars for var 26
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 26
DEBUG CAREFUL: Testing fvar[5] = var 3
DEBUG CAREFUL: Calling compare_branch_vars for var 3
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 3
DEBUG CAREFUL: Testing fvar[6] = var 17
DEBUG CAREFUL: Calling compare_branch_vars for var 17
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 17
DEBUG CAREFUL: Testing fvar[7] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 25
DEBUG CAREFUL: Testing fvar[8] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
DEBUG CAREFUL: Testing fvar[9] = var 5
DEBUG CAREFUL: Calling compare_branch_vars for var 5
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 5
DEBUG CAREFUL: Testing fvar[10] = var 0
DEBUG CAREFUL: Calling compare_branch_vars for var 0
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 0
DEBUG CAREFUL: Testing fvar[11] = var 24
DEBUG CAREFUL: Calling compare_branch_vars for var 24
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 24
DEBUG CAREFUL: Testing fvar[12] = var 23
DEBUG CAREFUL: Calling compare_branch_vars for var 23
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 23
DEBUG CAREFUL: Testing fvar[13] = var 29
DEBUG CAREFUL: Calling compare_branch_vars for var 29
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 29
DEBUG CAREFUL: Testing fvar[14] = var 34
DEBUG CAREFUL: Calling compare_branch_vars for var 34
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 34
DEBUG CAREFUL: Testing fvar[15] = var 30
DEBUG CAREFUL: Calling compare_branch_vars for var 30
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 30
DEBUG CAREFUL: Testing fvar[16] = var 32
DEBUG CAREFUL: Calling compare_branch_vars for var 32
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 32
DEBUG CAREFUL: Testing fvar[17] = var 36
DEBUG CAREFUL: Calling compare_branch_vars for var 36
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 36
DEBUG CAREFUL: Testing fvar[18] = var 35
DEBUG CAREFUL: Calling compare_branch_vars for var 35
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 35
DEBUG CAREFUL: Testing fvar[19] = var 28
DEBUG CAREFUL: Calling compare_branch_vars for var 28
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 28
  % Initial guess is x20, Z0 = 27121946.2120011        , Z1 = 31267188.4362698        

DEBUG EVAL: Testing var 22 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=8, varin=19, theta=0.006636, up=999999999999999983222784.000000
ITER 2: row=7, varin=14, theta=0.008377, up=999999999999999983222784.000000
ITER 3: row=6, varin=8, theta=0.006163, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 22 = 0 gives z=27123209.357181
  % 	x22 = 0,	Z0 = 27123209.3571806        
DEBUG EVAL: First branch cutoff check: z=27123209.357181, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 22 = 1
ITER 1: row=8, varin=24, theta=3.231556, up=999999999999999983222784.000000
ITER 2: row=1, varin=46, theta=4.063168, up=999999999999999983222784.000000
ITER 3: row=39, varin=5, theta=1.002076, up=999999999999999983222784.000000
ITER 4: row=22, varin=21, theta=1.125723, up=999999999999999983222784.000000
ITER 5: row=27, varin=50, theta=0.619181, up=999999999999999983222784.000000
ITER 6: row=33, varin=44, theta=0.220280, up=999999999999999983222784.000000
ITER 7: row=9, varin=37, theta=0.143026, up=999999999999999983222784.000000
ITER 8: row=47, varin=41, theta=0.116213, up=999999999999999983222784.000000
ITER 9: row=40, varin=51, theta=0.135604, up=999999999999999983222784.000000
ITER 10: row=16, varin=13, theta=0.318941, up=999999999999999983222784.000000
  % 	x22 = 1,	Z1 = 28205194.6980979        
DEBUG EVAL: Second branch cutoff check: z=28205194.698098, best_z=INF, threshold=INF
  %   New best:  x22, Z = 27123209.3571806        
DEBUG EVAL: Testing var 10 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=12, varin=24, theta=3.231556, up=999999999999999983222784.000000
ITER 2: row=1, varin=46, theta=4.063168, up=999999999999999983222784.000000
ITER 3: row=39, varin=14, theta=2.244801, up=999999999999999983222784.000000
ITER 4: row=20, varin=19, theta=6.752642, up=999999999999999983222784.000000
ITER 5: row=6, varin=48, theta=15.541929, up=999999999999999983222784.000000
ITER 6: row=48, varin=12, theta=4.275399, up=999999999999999983222784.000000
ITER 7: row=47, varin=29, theta=1.136286, up=999999999999999983222784.000000
ITER 8: row=26, varin=50, theta=4.383292, up=999999999999999983222784.000000
ITER 9: row=33, varin=83, theta=4.609285, up=1.000000
ITER 10: row=33, varin=44, theta=1.221085, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 10 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x10 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=12, varin=51, theta=0.015286, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=51)
DEBUG SOLUTION: LP solution array indices: FST[52-91], not_covered[92-111]
DEBUG SOLUTION: lp->best_solution[0] = 27123215.250088
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 51 rows, 60 cols, 259 nonzeros, 1 slack, 50 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 1 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 3 at  27.12321525008849221194
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x563ae8f3f2c0
% @LO 0.01  27.12194621200109878600 99.9000000000
% @LN 0.01  27.12321525008849221194 99.9000000000
% Resuming node 3 at  27.12321525008849221194
DEBUG CONSTRNT: LP rows=50, pool->nlprows=50, pool->npend=0
DEBUG CONSTRNT: Checking 50 LP rows (pool tracks 50, total LP rows 50)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 9
DEBUG CONSTRNT: Pool row 9 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 133
DEBUG CONSTRNT: Pool row 133 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 30
DEBUG CONSTRNT: Pool row 30 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 22
DEBUG CONSTRNT: Pool row 22 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 24
DEBUG CONSTRNT: Pool row 24 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 77
DEBUG CONSTRNT: Pool row 77 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 134
DEBUG CONSTRNT: Pool row 134 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 52
DEBUG CONSTRNT: Pool row 52 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 51
DEBUG CONSTRNT: Pool row 51 has lprow=49, expected 49
 % @PAP adding 50 rows, 197 nz to LP
DEBUG BB: Processing node 3, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 3 LP 4 Solution, length = 27123215.250088, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.015286 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 1.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.015286 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.061142 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.015286 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.015286 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.061142 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.015286 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.015286 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.015286 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.015286 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.015286 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.015286 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.015286 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 0.984714 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 0.984714 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 0.984714 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 0.984714 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 0.984714 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 0.984714 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.938858 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 0.984714 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.984714 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 0.984714 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.938858 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.938858 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 13 fractional variables
DEBUG CG: LP optimal, z=27123215.250088, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27123215.250088, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 3 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 3
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.015286
DEBUG CAREFUL: Adding var 0 to fractional list (xi=0.015286)
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=1.000000
DEBUG CAREFUL: Skipping var 2: xi+FUZZ=1.000001 >= 1.0
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.015286
DEBUG CAREFUL: Adding var 5 to fractional list (xi=0.015286)
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.061142
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.061142)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.015286
DEBUG CAREFUL: Adding var 23 to fractional list (xi=0.015286)
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.015286
DEBUG CAREFUL: Adding var 24 to fractional list (xi=0.015286)
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.061142
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.061142)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.000000
DEBUG CAREFUL: Skipping var 27: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.015286
DEBUG CAREFUL: Adding var 28 to fractional list (xi=0.015286)
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.015286
DEBUG CAREFUL: Adding var 29 to fractional list (xi=0.015286)
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.015286
DEBUG CAREFUL: Adding var 30 to fractional list (xi=0.015286)
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.015286
DEBUG CAREFUL: Adding var 32 to fractional list (xi=0.015286)
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.015286
DEBUG CAREFUL: Adding var 34 to fractional list (xi=0.015286)
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.015286
DEBUG CAREFUL: Adding var 35 to fractional list (xi=0.015286)
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.015286
DEBUG CAREFUL: Adding var 36 to fractional list (xi=0.015286)
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 13 fractional variables

  %  Carefully choosing branching variable, nfrac = 13
DEBUG CAREFUL: Testing fvar[0] = var 5
DEBUG CAREFUL: Calling compare_branch_vars for var 5
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 5
DEBUG CAREFUL: New best var: 5
DEBUG CAREFUL: Testing fvar[1] = var 23
DEBUG CAREFUL: Calling compare_branch_vars for var 23
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 23
DEBUG CAREFUL: Testing fvar[2] = var 24
DEBUG CAREFUL: Calling compare_branch_vars for var 24
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 24
DEBUG CAREFUL: Testing fvar[3] = var 0
DEBUG CAREFUL: Calling compare_branch_vars for var 0
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 0
DEBUG CAREFUL: Testing fvar[4] = var 29
DEBUG CAREFUL: Calling compare_branch_vars for var 29
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 29
DEBUG CAREFUL: Testing fvar[5] = var 34
DEBUG CAREFUL: Calling compare_branch_vars for var 34
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 34
DEBUG CAREFUL: Testing fvar[6] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 25
DEBUG CAREFUL: Testing fvar[7] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
DEBUG CAREFUL: Testing fvar[8] = var 30
DEBUG CAREFUL: Calling compare_branch_vars for var 30
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 30
DEBUG CAREFUL: Testing fvar[9] = var 32
DEBUG CAREFUL: Calling compare_branch_vars for var 32
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 32
DEBUG CAREFUL: Testing fvar[10] = var 36
DEBUG CAREFUL: Calling compare_branch_vars for var 36
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 36
DEBUG CAREFUL: Testing fvar[11] = var 35
DEBUG CAREFUL: Calling compare_branch_vars for var 35
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 35
DEBUG CAREFUL: Testing fvar[12] = var 28
DEBUG CAREFUL: Calling compare_branch_vars for var 28
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 28
  % Initial guess is x5, Z0 = 27123215.2500885        , Z1 = 28303998.3720643        

DEBUG EVAL: Testing var 5 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=2, varin=24, theta=1.259406, up=999999999999999983222784.000000
ITER 2: row=36, varin=14, theta=0.827819, up=999999999999999983222784.000000
ITER 3: row=4, varin=50, theta=6.966350, up=999999999999999983222784.000000
ITER 4: row=33, varin=44, theta=2.122592, up=999999999999999983222784.000000
ITER 5: row=9, varin=37, theta=1.541350, up=999999999999999983222784.000000
ITER 6: row=5, varin=43, theta=2.472603, up=999999999999999983222784.000000
ITER 7: row=1, varin=49, theta=4.541166, up=999999999999999983222784.000000
ITER 8: row=39, varin=5, theta=0.648777, up=999999999999999983222784.000000
ITER 9: row=10, varin=86, theta=8.860954, up=1.000000
ITER 10: row=10, varin=35, theta=3.129427, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 5 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x5 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=2, varin=4, theta=0.029049, up=999999999999999983222784.000000
ITER 2: row=47, varin=28, theta=0.047037, up=999999999999999983222784.000000
ITER 3: row=6, varin=13, theta=0.011830, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=3)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=50)
DEBUG SOLUTION: LP solution array indices: FST[51-90], not_covered[91-110]
DEBUG SOLUTION: lp->best_solution[0] = 27124397.379256
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 0.988170
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 50 rows, 60 cols, 257 nonzeros, 3 slack, 47 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 3 slack rows
   % @PAP adding 2 rows, 11 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=48, varin=43, theta=0.008038, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
ITER 2: row=11, varin=83, theta=0.121080, up=1.000000
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=49)
DEBUG SOLUTION: LP solution array indices: FST[50-89], not_covered[90-109]
DEBUG SOLUTION: lp->best_solution[0] = 27125460.468166
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 49 rows, 60 cols, 262 nonzeros, 0 slack, 49 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @PAP adding 4 rows, 14 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=50, varin=99, theta=0.007537, up=1.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=53)
DEBUG SOLUTION: LP solution array indices: FST[54-93], not_covered[94-113]
DEBUG SOLUTION: lp->best_solution[0] = 27125476.383882
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 0.992463
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 53 rows, 60 cols, 276 nonzeros, 4 slack, 49 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 4 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 3 at  27.12547638388211623806
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x563ae8f3f2c0
% @LO 0.01  27.12321525008849221194 99.9000000000
% @LN 0.01  27.12547638388211623806 99.9000000000
% Resuming node 3 at  27.12547638388211623806
DEBUG CONSTRNT: LP rows=49, pool->nlprows=49, pool->npend=0
DEBUG CONSTRNT: Checking 49 LP rows (pool tracks 49, total LP rows 49)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 133
DEBUG CONSTRNT: Pool row 133 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 30
DEBUG CONSTRNT: Pool row 30 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 22
DEBUG CONSTRNT: Pool row 22 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 24
DEBUG CONSTRNT: Pool row 24 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 134
DEBUG CONSTRNT: Pool row 134 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 52
DEBUG CONSTRNT: Pool row 52 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 51
DEBUG CONSTRNT: Pool row 51 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 80
DEBUG CONSTRNT: Pool row 80 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 8
DEBUG CONSTRNT: Pool row 8 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 31
DEBUG CONSTRNT: Pool row 31 has lprow=48, expected 48
 % @PAP adding 49 rows, 197 nz to LP
DEBUG BB: Processing node 3, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 3 LP 5 Solution, length = 27125476.383882, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.007537 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 1.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.007537 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.007537 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.007537 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.007537 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.082912 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.007537 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.007537 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.007537 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.082912 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.007537 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.007537 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.007537 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.007537 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.007537 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.007537 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 0.992463 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 0.992463 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 0.992463 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 0.992463 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 0.992463 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 1.000000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.917088 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 0.992463 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.992463 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 0.992463 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 0.992463 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 0.992463 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.917088 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.917088 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 0.992463 (terminal 19)
 % 16 fractional variables
DEBUG CG: LP optimal, z=27125476.383882, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27125476.383882, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 3 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 3
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.007537
DEBUG CAREFUL: Adding var 0 to fractional list (xi=0.007537)
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=1.000000
DEBUG CAREFUL: Skipping var 2: xi+FUZZ=1.000001 >= 1.0
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.007537
DEBUG CAREFUL: Adding var 3 to fractional list (xi=0.007537)
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.007537
DEBUG CAREFUL: Adding var 9 to fractional list (xi=0.007537)
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.007537
DEBUG CAREFUL: Adding var 17 to fractional list (xi=0.007537)
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.007537
DEBUG CAREFUL: Adding var 20 to fractional list (xi=0.007537)
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.082912
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.082912)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.007537
DEBUG CAREFUL: Adding var 22 to fractional list (xi=0.007537)
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.007537
DEBUG CAREFUL: Adding var 23 to fractional list (xi=0.007537)
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.007537
DEBUG CAREFUL: Adding var 24 to fractional list (xi=0.007537)
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.082912
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.082912)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.000000
DEBUG CAREFUL: Skipping var 27: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.007537
DEBUG CAREFUL: Adding var 29 to fractional list (xi=0.007537)
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.007537
DEBUG CAREFUL: Adding var 30 to fractional list (xi=0.007537)
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.007537
DEBUG CAREFUL: Adding var 32 to fractional list (xi=0.007537)
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.007537
DEBUG CAREFUL: Adding var 33 to fractional list (xi=0.007537)
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.007537
DEBUG CAREFUL: Adding var 34 to fractional list (xi=0.007537)
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.007537
DEBUG CAREFUL: Adding var 36 to fractional list (xi=0.007537)
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 16 fractional variables

  %  Carefully choosing branching variable, nfrac = 16
DEBUG CAREFUL: Testing fvar[0] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 25
DEBUG CAREFUL: New best var: 25
DEBUG CAREFUL: Testing fvar[1] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
DEBUG CAREFUL: Testing fvar[2] = var 9
DEBUG CAREFUL: Calling compare_branch_vars for var 9
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 9
DEBUG CAREFUL: New best var: 9
DEBUG CAREFUL: Testing fvar[3] = var 22
DEBUG CAREFUL: Calling compare_branch_vars for var 22
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 22
DEBUG CAREFUL: Testing fvar[4] = var 20
DEBUG CAREFUL: Calling compare_branch_vars for var 20
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 20
DEBUG CAREFUL: New best var: 20
DEBUG CAREFUL: Testing fvar[5] = var 3
DEBUG CAREFUL: Calling compare_branch_vars for var 3
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 3
DEBUG CAREFUL: Testing fvar[6] = var 17
DEBUG CAREFUL: Calling compare_branch_vars for var 17
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 17
DEBUG CAREFUL: Testing fvar[7] = var 0
DEBUG CAREFUL: Calling compare_branch_vars for var 0
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 0
DEBUG CAREFUL: Testing fvar[8] = var 24
DEBUG CAREFUL: Calling compare_branch_vars for var 24
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 24
DEBUG CAREFUL: Testing fvar[9] = var 23
DEBUG CAREFUL: Calling compare_branch_vars for var 23
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 23
DEBUG CAREFUL: Testing fvar[10] = var 29
DEBUG CAREFUL: Calling compare_branch_vars for var 29
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 29
DEBUG CAREFUL: Testing fvar[11] = var 34
DEBUG CAREFUL: Calling compare_branch_vars for var 34
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 34
DEBUG CAREFUL: Testing fvar[12] = var 30
DEBUG CAREFUL: Calling compare_branch_vars for var 30
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 30
DEBUG CAREFUL: Testing fvar[13] = var 32
DEBUG CAREFUL: Calling compare_branch_vars for var 32
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 32
DEBUG CAREFUL: Testing fvar[14] = var 36
DEBUG CAREFUL: Calling compare_branch_vars for var 36
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 36
DEBUG CAREFUL: Testing fvar[15] = var 33
DEBUG CAREFUL: Calling compare_branch_vars for var 33
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 33
  % Initial guess is x20, Z0 = 27125476.3838821        , Z1 = 31267188.4362698        

DEBUG EVAL: Testing var 25 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=24, varin=42, theta=1.701519, up=999999999999999983222784.000000
ITER 2: row=30, varin=45, theta=4.641159, up=999999999999999983222784.000000
ITER 3: row=32, varin=33, theta=0.984388, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 25 = 1 gives z=27341264.898045
  % 	x25 = 1,	Z1 = 27341264.8980448        
DEBUG EVAL: First branch cutoff check: z=27341264.898045, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 25 = 0
ITER 1: row=24, varin=47, theta=0.263021, up=999999999999999983222784.000000
ITER 2: row=35, varin=46, theta=0.066670, up=999999999999999983222784.000000
ITER 3: row=17, varin=5, theta=0.053701, up=999999999999999983222784.000000
ITER 4: row=27, varin=39, theta=0.096624, up=999999999999999983222784.000000
  % 	x25 = 0,	Z0 = 27133394.7525314        
DEBUG EVAL: Second branch cutoff check: z=27133394.752531, best_z=INF, threshold=INF
  %   New best:  x25, Z = 27133394.7525314        
DEBUG EVAL: Testing var 21 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=12, varin=42, theta=1.701519, up=999999999999999983222784.000000
ITER 2: row=30, varin=45, theta=4.641159, up=999999999999999983222784.000000
ITER 3: row=32, varin=33, theta=0.984388, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 21 = 1 gives z=27341264.898045
  % 	x21 = 1,	Z1 = 27341264.8980448        
DEBUG EVAL: First branch cutoff check: z=27341264.898045, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 21 = 0
ITER 1: row=12, varin=47, theta=0.263021, up=999999999999999983222784.000000
ITER 2: row=35, varin=46, theta=0.066670, up=999999999999999983222784.000000
ITER 3: row=17, varin=5, theta=0.053701, up=999999999999999983222784.000000
ITER 4: row=27, varin=39, theta=0.096624, up=999999999999999983222784.000000
  % 	x21 = 0,	Z0 = 27133394.7525314        
DEBUG EVAL: Second branch cutoff check: z=27133394.752531, best_z=INF, threshold=INF
DEBUG EVAL: Testing var 9 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=4, varin=47, theta=15.942705, up=999999999999999983222784.000000
ITER 2: row=35, varin=5, theta=5.804911, up=999999999999999983222784.000000
ITER 3: row=27, varin=42, theta=3.584989, up=999999999999999983222784.000000
ITER 4: row=30, varin=12, theta=1.305094, up=999999999999999983222784.000000
ITER 5: row=12, varin=39, theta=2.407970, up=999999999999999983222784.000000
ITER 6: row=4, varin=45, theta=5.009626, up=999999999999999983222784.000000
ITER 7: row=32, varin=40, theta=1.782228, up=999999999999999983222784.000000
ITER 8: row=8, varin=33, theta=1.242481, up=999999999999999983222784.000000
ITER 9: row=17, varin=3, theta=1.786996, up=999999999999999983222784.000000
ITER 10: row=36, varin=4, theta=0.326741, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 9 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x9 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=4, varin=46, theta=0.020772, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=49)
DEBUG SOLUTION: LP solution array indices: FST[50-89], not_covered[90-109]
DEBUG SOLUTION: lp->best_solution[0] = 27127371.009268
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 49 rows, 60 cols, 257 nonzeros, 1 slack, 48 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 1 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 3 at  27.12737100926779731935
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x563ae8f3f2c0
% @LO 0.01  27.12547638388211623806 99.9000000000
% @LN 0.01  27.12737100926779731935 99.9000000000
% Resuming node 3 at  27.12737100926779731935
DEBUG CONSTRNT: LP rows=48, pool->nlprows=48, pool->npend=0
DEBUG CONSTRNT: Checking 48 LP rows (pool tracks 48, total LP rows 48)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 133
DEBUG CONSTRNT: Pool row 133 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 30
DEBUG CONSTRNT: Pool row 30 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 22
DEBUG CONSTRNT: Pool row 22 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 24
DEBUG CONSTRNT: Pool row 24 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 134
DEBUG CONSTRNT: Pool row 134 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 52
DEBUG CONSTRNT: Pool row 52 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 51
DEBUG CONSTRNT: Pool row 51 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 8
DEBUG CONSTRNT: Pool row 8 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 31
DEBUG CONSTRNT: Pool row 31 has lprow=47, expected 47
 % @PAP adding 48 rows, 195 nz to LP
DEBUG BB: Processing node 3, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 3 LP 6 Solution, length = 27127371.009268, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.020772 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 1.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.062317 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.020772 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.020772 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.062317 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.020772 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.020772 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.020772 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.020772 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.020772 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.020772 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 0.979228 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 0.979228 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 0.979228 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 0.979228 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 1.000000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.937683 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 0.979228 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.979228 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 0.979228 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.937683 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.937683 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 11 fractional variables
DEBUG CG: LP optimal, z=27127371.009268, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27127371.009268, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 3 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 3
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.020772
DEBUG CAREFUL: Adding var 0 to fractional list (xi=0.020772)
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=1.000000
DEBUG CAREFUL: Skipping var 2: xi+FUZZ=1.000001 >= 1.0
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.062317
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.062317)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.020772
DEBUG CAREFUL: Adding var 23 to fractional list (xi=0.020772)
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.020772
DEBUG CAREFUL: Adding var 24 to fractional list (xi=0.020772)
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.062317
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.062317)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.000000
DEBUG CAREFUL: Skipping var 27: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.020772
DEBUG CAREFUL: Adding var 29 to fractional list (xi=0.020772)
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.020772
DEBUG CAREFUL: Adding var 30 to fractional list (xi=0.020772)
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.020772
DEBUG CAREFUL: Adding var 32 to fractional list (xi=0.020772)
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.020772
DEBUG CAREFUL: Adding var 33 to fractional list (xi=0.020772)
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.020772
DEBUG CAREFUL: Adding var 34 to fractional list (xi=0.020772)
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.020772
DEBUG CAREFUL: Adding var 36 to fractional list (xi=0.020772)
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 11 fractional variables

  %  Carefully choosing branching variable, nfrac = 11
DEBUG CAREFUL: Testing fvar[0] = var 24
DEBUG CAREFUL: Calling compare_branch_vars for var 24
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 24
DEBUG CAREFUL: New best var: 24
DEBUG CAREFUL: Testing fvar[1] = var 23
DEBUG CAREFUL: Calling compare_branch_vars for var 23
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 23
DEBUG CAREFUL: Testing fvar[2] = var 0
DEBUG CAREFUL: Calling compare_branch_vars for var 0
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 0
DEBUG CAREFUL: New best var: 0
DEBUG CAREFUL: Testing fvar[3] = var 29
DEBUG CAREFUL: Calling compare_branch_vars for var 29
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 29
DEBUG CAREFUL: Testing fvar[4] = var 34
DEBUG CAREFUL: Calling compare_branch_vars for var 34
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 34
DEBUG CAREFUL: Testing fvar[5] = var 30
DEBUG CAREFUL: Calling compare_branch_vars for var 30
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 30
DEBUG CAREFUL: Testing fvar[6] = var 32
DEBUG CAREFUL: Calling compare_branch_vars for var 32
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 32
DEBUG CAREFUL: Testing fvar[7] = var 36
DEBUG CAREFUL: Calling compare_branch_vars for var 36
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 36
DEBUG CAREFUL: Testing fvar[8] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 25
DEBUG CAREFUL: New best var: 25
DEBUG CAREFUL: Testing fvar[9] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
DEBUG CAREFUL: Testing fvar[10] = var 33
DEBUG CAREFUL: Calling compare_branch_vars for var 33
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 33
  % Initial guess is x25, Z0 = 27133394.7525314        , Z1 = 27341264.8980448        

DEBUG EVAL: Testing var 24 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=3, varin=3, theta=0.032601, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 24 = 0 gives z=27127892.954125
  % 	x24 = 0,	Z0 = 27127892.9541246        
DEBUG EVAL: First branch cutoff check: z=27127892.954125, best_z=INF, threshold=INF
DEBUG EVAL: Testing var 23 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=23, varin=3, theta=0.032601, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 23 = 0 gives z=27127892.954125
  % 	x23 = 0,	Z0 = 27127892.9541246        
DEBUG EVAL: First branch cutoff check: z=27127892.954125, best_z=INF, threshold=INF
DEBUG EVAL: Testing var 0 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=1, varin=3, theta=2.698841, up=999999999999999983222784.000000
ITER 2: row=36, varin=46, theta=3.592885, up=999999999999999983222784.000000
ITER 3: row=35, varin=5, theta=1.007279, up=999999999999999983222784.000000
ITER 4: row=24, varin=82, theta=4.548683, up=1.000000
ITER 5: row=24, varin=45, theta=3.810303, up=999999999999999983222784.000000
ITER 6: row=32, varin=33, theta=0.859204, up=999999999999999983222784.000000
ITER 7: row=5, varin=40, theta=4.510932, up=999999999999999983222784.000000
ITER 8: row=48, varin=82, theta=2.054439, up=1.000000
ITER 9: row=48, varin=12, theta=0.336248, up=999999999999999983222784.000000
ITER 10: row=4, varin=4, theta=0.346114, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 0 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x0 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=1, varin=39, theta=0.096624, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
ITER 2: row=30, varin=11, theta=0.015302, up=999999999999999983222784.000000
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=48)
DEBUG SOLUTION: LP solution array indices: FST[49-88], not_covered[89-108]
DEBUG SOLUTION: lp->best_solution[0] = 27131425.435798
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 0.984698
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 48 rows, 60 cols, 255 nonzeros, 1 slack, 47 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 1 slack rows
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=1, varin=77, theta=19.000000, up=1.000000
ITER 2: row=1, varin=82, theta=18.000000, up=1.000000
ITER 3: row=1, varin=50, theta=8.500000, up=1.000000
ITER 4: row=1, varin=69, theta=15.000000, up=1.000000
ITER 5: row=1, varin=73, theta=14.000000, up=1.000000
ITER 6: row=1, varin=84, theta=13.000000, up=1.000000
ITER 7: row=1, varin=68, theta=3.000000, up=1.000000
ITER 8: row=1, varin=80, theta=8.000000, up=1.000000
ITER 9: row=1, varin=76, theta=7.000000, up=1.000000
ITER 10: row=1, varin=65, theta=2.000000, up=1.000000
LP PHASE: Switching to primal (iter=82)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=47)
DEBUG SOLUTION: LP solution array indices: FST[48-87], not_covered[88-107]
DEBUG SOLUTION: lp->best_solution[0] = 27131425.435798
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 47 rows, 60 cols, 253 nonzeros, 0 slack, 47 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 3 at  27.13142543579783350083
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x563ae8f3f2c0
% @LO 0.01  27.12737100926779731935 99.9000000000
% @LN 0.01  27.13142543579783350083 99.9000000000
% Resuming node 3 at  27.13142543579783350083
DEBUG CONSTRNT: LP rows=47, pool->nlprows=47, pool->npend=0
DEBUG CONSTRNT: Checking 47 LP rows (pool tracks 47, total LP rows 47)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 133
DEBUG CONSTRNT: Pool row 133 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 30
DEBUG CONSTRNT: Pool row 30 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 22
DEBUG CONSTRNT: Pool row 22 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 24
DEBUG CONSTRNT: Pool row 24 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 134
DEBUG CONSTRNT: Pool row 134 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 52
DEBUG CONSTRNT: Pool row 52 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 51
DEBUG CONSTRNT: Pool row 51 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 8
DEBUG CONSTRNT: Pool row 8 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 31
DEBUG CONSTRNT: Pool row 31 has lprow=46, expected 46
 % @PAP adding 47 rows, 193 nz to LP
DEBUG BB: Processing node 3, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 3 LP 7 Solution, length = 27131425.435798, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 1.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.015302 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.015302 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.015302 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.091814 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.015302 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.091814 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 0.984698 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 1.000000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.908186 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 1.000000 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 0.984698 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 0.984698 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.908186 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.908186 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 0.984698 (terminal 19)
 % 6 fractional variables
DEBUG CG: LP optimal, z=27131425.435798, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27131425.435798, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 3 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 3
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=1.000000
DEBUG CAREFUL: Skipping var 2: xi+FUZZ=1.000001 >= 1.0
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.015302
DEBUG CAREFUL: Adding var 3 to fractional list (xi=0.015302)
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.015302
DEBUG CAREFUL: Adding var 17 to fractional list (xi=0.015302)
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.015302
DEBUG CAREFUL: Adding var 20 to fractional list (xi=0.015302)
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.091814
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.091814)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.015302
DEBUG CAREFUL: Adding var 22 to fractional list (xi=0.015302)
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.091814
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.091814)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.000000
DEBUG CAREFUL: Skipping var 27: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 6 fractional variables

  %  Carefully choosing branching variable, nfrac = 6
DEBUG CAREFUL: Testing fvar[0] = var 20
DEBUG CAREFUL: Calling compare_branch_vars for var 20
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 20
DEBUG CAREFUL: New best var: 20
DEBUG CAREFUL: Testing fvar[1] = var 22
DEBUG CAREFUL: Calling compare_branch_vars for var 22
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 22
DEBUG CAREFUL: Testing fvar[2] = var 3
DEBUG CAREFUL: Calling compare_branch_vars for var 3
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 3
DEBUG CAREFUL: Testing fvar[3] = var 17
DEBUG CAREFUL: Calling compare_branch_vars for var 17
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 17
DEBUG CAREFUL: Testing fvar[4] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 25
DEBUG CAREFUL: New best var: 25
DEBUG CAREFUL: Testing fvar[5] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
  % Initial guess is x25, Z0 = 27133394.7525314        , Z1 = 27341264.8980448        

DEBUG EVAL: Testing var 20 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=6, varin=5, theta=1.961525, up=999999999999999983222784.000000
ITER 2: row=18, varin=17, theta=3.026798, up=999999999999999983222784.000000
ITER 3: row=26, varin=45, theta=7.791427, up=999999999999999983222784.000000
ITER 4: row=45, varin=43, theta=7.620578, up=999999999999999983222784.000000
ITER 5: row=43, varin=42, theta=9.494470, up=999999999999999983222784.000000
ITER 6: row=42, varin=44, theta=29.141694, up=999999999999999983222784.000000
ITER 7: row=31, varin=39, theta=10.367467, up=999999999999999983222784.000000
ITER 8: row=8, varin=25, theta=2.670651, up=999999999999999983222784.000000
ITER 9: row=16, varin=36, theta=20.355746, up=999999999999999983222784.000000
ITER 10: row=36, varin=50, theta=2.720383, up=1.000000
DEBUG EVAL: Branch var 20 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x20 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=6, varin=90, theta=0.113012, up=1.000000
ITER 2: row=41, varin=92, theta=0.096624, up=1.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=47)
DEBUG SOLUTION: LP solution array indices: FST[48-87], not_covered[88-107]
DEBUG SOLUTION: lp->best_solution[0] = 27133394.752531
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 47 rows, 60 cols, 253 nonzeros, 2 slack, 45 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 2 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 3 at  27.13339475253136257038
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x563ae8f3f2c0
% @LO 0.01  27.13142543579783350083 99.9000000000
% @LN 0.01  27.13339475253136257038 99.9000000000
% Resuming node 3 at  27.13339475253136257038
DEBUG CONSTRNT: LP rows=45, pool->nlprows=45, pool->npend=0
DEBUG CONSTRNT: Checking 45 LP rows (pool tracks 45, total LP rows 45)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 133
DEBUG CONSTRNT: Pool row 133 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 30
DEBUG CONSTRNT: Pool row 30 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 24
DEBUG CONSTRNT: Pool row 24 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 134
DEBUG CONSTRNT: Pool row 134 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 52
DEBUG CONSTRNT: Pool row 52 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 51
DEBUG CONSTRNT: Pool row 51 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 8
DEBUG CONSTRNT: Pool row 8 has lprow=44, expected 44
 % @PAP adding 45 rows, 189 nz to LP
DEBUG BB: Processing node 3, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 3 LP 8 Solution, length = 27133394.752531, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 1.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.000000 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.000000 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.096624 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.096624 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.096624 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 0.903376 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 0.903376 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 1.000000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 1.000000 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 0.903376 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 1.000000 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 1.000000 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 1.000000 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 3 fractional variables
DEBUG CG: LP optimal, z=27133394.752531, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27133394.752531, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 3 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 3
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=1.000000
DEBUG CAREFUL: Skipping var 2: xi+FUZZ=1.000001 >= 1.0
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.000000
DEBUG CAREFUL: Skipping var 21: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.000000
DEBUG CAREFUL: Skipping var 25: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.000000
DEBUG CAREFUL: Skipping var 27: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.096624
DEBUG CAREFUL: Adding var 29 to fractional list (xi=0.096624)
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.096624
DEBUG CAREFUL: Adding var 30 to fractional list (xi=0.096624)
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.096624
DEBUG CAREFUL: Adding var 32 to fractional list (xi=0.096624)
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 3 fractional variables

  %  Carefully choosing branching variable, nfrac = 3
DEBUG CAREFUL: Testing fvar[0] = var 29
DEBUG CAREFUL: Calling compare_branch_vars for var 29
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 29
DEBUG CAREFUL: New best var: 29
DEBUG CAREFUL: Testing fvar[1] = var 30
DEBUG CAREFUL: Calling compare_branch_vars for var 30
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 30
DEBUG CAREFUL: Testing fvar[2] = var 32
DEBUG CAREFUL: Calling compare_branch_vars for var 32
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 32
DEBUG CAREFUL: New best var: 32
  % Initial guess is x32, Z0 = 27133394.7525314        , Z1 = 27151806.6589923        

DEBUG EVAL: Testing var 29 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=8, varin=64, theta=0.033209, up=1.000000
DEBUG EVAL: Branch var 29 = 0 gives z=27134080.274723
  % 	x29 = 0,	Z0 = 27134080.2747233        
DEBUG EVAL: First branch cutoff check: z=27134080.274723, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 29 = 1
ITER 1: row=8, varin=40, theta=1.056594, up=999999999999999983222784.000000
ITER 2: row=37, varin=5, theta=0.284992, up=999999999999999983222784.000000
ITER 3: row=1, varin=43, theta=4.234023, up=999999999999999983222784.000000
ITER 4: row=31, varin=48, theta=0.925883, up=1.000000
ITER 5: row=5, varin=34, theta=0.938240, up=999999999999999983222784.000000
  % 	x29 = 1,	Z1 = 27557185.8435218        
DEBUG EVAL: Second branch cutoff check: z=27557185.843522, best_z=INF, threshold=INF
  %   New best:  x29, Z = 27134080.2747233        
DEBUG EVAL: Testing var 30 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=28, varin=64, theta=0.033209, up=1.000000
DEBUG EVAL: Branch var 30 = 0 gives z=27134080.274723
  % 	x30 = 0,	Z0 = 27134080.2747233        
DEBUG EVAL: First branch cutoff check: z=27134080.274723, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 30 = 1
ITER 1: row=28, varin=40, theta=1.056594, up=999999999999999983222784.000000
ITER 2: row=37, varin=5, theta=0.284992, up=999999999999999983222784.000000
ITER 3: row=1, varin=43, theta=4.234023, up=999999999999999983222784.000000
ITER 4: row=31, varin=48, theta=0.925883, up=1.000000
ITER 5: row=5, varin=44, theta=1.259764, up=999999999999999983222784.000000
ITER 6: row=44, varin=42, theta=1.229098, up=999999999999999983222784.000000
ITER 7: row=42, varin=41, theta=1.573943, up=999999999999999983222784.000000
ITER 8: row=9, varin=36, theta=1.664724, up=999999999999999983222784.000000
ITER 9: row=40, varin=30, theta=1.946932, up=999999999999999983222784.000000
ITER 10: row=23, varin=8, theta=1.431125, up=999999999999999983222784.000000
  % 	x30 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: Second branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=28, varin=64, theta=0.033209, up=1.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=45)
DEBUG SOLUTION: LP solution array indices: FST[46-85], not_covered[86-105]
DEBUG SOLUTION: lp->best_solution[0] = 27134080.274723
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 45 rows, 60 cols, 249 nonzeros, 0 slack, 45 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @PAP adding 6 rows, 30 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=46, varin=17, theta=0.086611, up=999999999999999983222784.000000
ITER 2: row=4, varin=103, theta=0.069902, up=1.000000
ITER 3: row=20, varin=6, theta=0.029391, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=3)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=51)
DEBUG SOLUTION: LP solution array indices: FST[52-91], not_covered[92-111]
DEBUG SOLUTION: lp->best_solution[0] = 27141130.425998
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 0.970609
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 51 rows, 60 cols, 279 nonzeros, 7 slack, 44 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 7 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 3 at  27.14113042599809233479
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x563ae8f3f2c0
% @LO 0.01  27.13339475253136257038 99.9000000000
% @LN 0.01  27.14113042599809233479 99.9000000000
% Resuming node 3 at  27.14113042599809233479
DEBUG CONSTRNT: LP rows=44, pool->nlprows=44, pool->npend=0
DEBUG CONSTRNT: Checking 44 LP rows (pool tracks 44, total LP rows 44)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 133
DEBUG CONSTRNT: Pool row 133 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 30
DEBUG CONSTRNT: Pool row 30 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 24
DEBUG CONSTRNT: Pool row 24 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 134
DEBUG CONSTRNT: Pool row 134 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 52
DEBUG CONSTRNT: Pool row 52 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 51
DEBUG CONSTRNT: Pool row 51 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 8
DEBUG CONSTRNT: Pool row 8 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=43, expected 43
 % @PAP adding 44 rows, 191 nz to LP
DEBUG BB: Processing node 3, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 3 LP 9 Solution, length = 27141130.425998, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 1.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.029391 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.029391 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.088173 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.029391 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.088173 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 0.970609 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 1.000000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.911827 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 1.000000 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 0.970609 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.911827 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.911827 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 0.970609 (terminal 19)
 % 5 fractional variables
DEBUG CG: LP optimal, z=27141130.425998, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27141130.425998, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 3 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 3
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=1.000000
DEBUG CAREFUL: Skipping var 2: xi+FUZZ=1.000001 >= 1.0
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.029391
DEBUG CAREFUL: Adding var 3 to fractional list (xi=0.029391)
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.029391
DEBUG CAREFUL: Adding var 17 to fractional list (xi=0.029391)
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.088173
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.088173)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.029391
DEBUG CAREFUL: Adding var 22 to fractional list (xi=0.029391)
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.088173
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.088173)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.000000
DEBUG CAREFUL: Skipping var 27: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 5 fractional variables

  %  Carefully choosing branching variable, nfrac = 5
DEBUG CAREFUL: Testing fvar[0] = var 3
DEBUG CAREFUL: Calling compare_branch_vars for var 3
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 3
DEBUG CAREFUL: New best var: 3
DEBUG CAREFUL: Testing fvar[1] = var 22
DEBUG CAREFUL: Calling compare_branch_vars for var 22
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 22
DEBUG CAREFUL: New best var: 22
DEBUG CAREFUL: Testing fvar[2] = var 17
DEBUG CAREFUL: Calling compare_branch_vars for var 17
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 17
DEBUG CAREFUL: New best var: 17
DEBUG CAREFUL: Testing fvar[3] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 25
DEBUG CAREFUL: Testing fvar[4] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
  % Initial guess is x17, Z0 = 27141130.4259981        , Z1 = 29504200.3848337        

DEBUG EVAL: Testing var 3 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=1, varin=18, theta=1.154233, up=999999999999999983222784.000000
ITER 2: row=34, varin=43, theta=1.096705, up=999999999999999983222784.000000
ITER 3: row=43, varin=37, theta=3.732120, up=999999999999999983222784.000000
ITER 4: row=18, varin=41, theta=3.998555, up=999999999999999983222784.000000
ITER 5: row=41, varin=5, theta=1.553350, up=999999999999999983222784.000000
ITER 6: row=4, varin=39, theta=1.393172, up=999999999999999983222784.000000
ITER 7: row=39, varin=38, theta=1.735751, up=999999999999999983222784.000000
ITER 8: row=38, varin=40, theta=5.327599, up=999999999999999983222784.000000
ITER 9: row=28, varin=33, theta=1.332972, up=999999999999999983222784.000000
ITER 10: row=26, varin=47, theta=1.980465, up=1.000000
DEBUG EVAL: Branch var 3 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x3 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=1, varin=4, theta=0.044488, up=999999999999999983222784.000000
ITER 2: row=16, varin=56, theta=0.049889, up=1.000000
LP PHASE: Switching to primal (iter=2)
ITER 3: row=4, varin=16, theta=0.000000, up=999999999999999983222784.000000
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=44)
DEBUG SOLUTION: LP solution array indices: FST[45-84], not_covered[85-104]
DEBUG SOLUTION: lp->best_solution[0] = 27143903.438420
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 2.000000
   % @PL 44 rows, 60 cols, 251 nonzeros, 0 slack, 44 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @PAP adding 4 rows, 22 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=45, varin=4, theta=0.044488, up=999999999999999983222784.000000
ITER 2: row=46, varin=53, theta=0.048505, up=1.000000
ITER 3: row=48, varin=45, theta=0.010607, up=999999999999999983222784.000000
ITER 4: row=1, varin=15, theta=0.001531, up=999999999999999983222784.000000
ITER 5: row=16, varin=60, theta=0.027516, up=1.000000
ITER 6: row=48, varin=46, theta=0.021739, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=6)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=48)
DEBUG SOLUTION: LP solution array indices: FST[49-88], not_covered[89-108]
DEBUG SOLUTION: lp->best_solution[0] = 27151514.347036
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 0.994565
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 2.000000
   % @PL 48 rows, 60 cols, 273 nonzeros, 3 slack, 45 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 3 slack rows
   % @PAP adding 3 rows, 11 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=46, varin=35, theta=0.183250, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=48)
DEBUG SOLUTION: LP solution array indices: FST[49-88], not_covered[89-108]
DEBUG SOLUTION: lp->best_solution[0] = 27152928.540129
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 2.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 48 rows, 60 cols, 272 nonzeros, 1 slack, 47 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 1 slack rows
   % @PAP adding 2 rows, 16 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=48, varin=91, theta=0.043686, up=1.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=49)
DEBUG SOLUTION: LP solution array indices: FST[50-89], not_covered[90-109]
DEBUG SOLUTION: lp->best_solution[0] = 27156068.313081
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 0.956314
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 2.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 49 rows, 60 cols, 286 nonzeros, 3 slack, 46 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 3 slack rows
   % @PAP adding 2 rows, 8 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=47, varin=42, theta=0.068502, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=48)
DEBUG SOLUTION: LP solution array indices: FST[49-88], not_covered[89-108]
DEBUG SOLUTION: lp->best_solution[0] = 27156360.832658
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 2.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 48 rows, 60 cols, 274 nonzeros, 2 slack, 46 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 2 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 3 at  27.15636083265837896761
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x563ae8f3f2c0
% @LO 0.01  27.14113042599809233479 99.9000000000
% @LN 0.01  27.15636083265837896761 99.9000000000
% Resuming node 3 at  27.15636083265837896761
DEBUG CONSTRNT: LP rows=46, pool->nlprows=46, pool->npend=0
DEBUG CONSTRNT: Checking 46 LP rows (pool tracks 46, total LP rows 46)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 133
DEBUG CONSTRNT: Pool row 133 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 30
DEBUG CONSTRNT: Pool row 30 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 24
DEBUG CONSTRNT: Pool row 24 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 134
DEBUG CONSTRNT: Pool row 134 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 52
DEBUG CONSTRNT: Pool row 52 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 51
DEBUG CONSTRNT: Pool row 51 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 71
DEBUG CONSTRNT: Pool row 71 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 31
DEBUG CONSTRNT: Pool row 31 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 32
DEBUG CONSTRNT: Pool row 32 has lprow=45, expected 45
 % @PAP adding 46 rows, 197 nz to LP
DEBUG BB: Processing node 3, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 3 LP 10 Solution, length = 27156360.832658, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 1.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.011417 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.011417 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.011417 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.057085 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.011417 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.057085 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.057085 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 0.988583 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 1.000000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.942915 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.942915 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 0.988583 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.942915 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.942915 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 0.988583 (terminal 19)
 % 7 fractional variables
DEBUG CG: LP optimal, z=27156360.832658, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27156360.832658, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 3 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 3
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=1.000000
DEBUG CAREFUL: Skipping var 2: xi+FUZZ=1.000001 >= 1.0
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.011417
DEBUG CAREFUL: Adding var 4 to fractional list (xi=0.011417)
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.011417
DEBUG CAREFUL: Adding var 11 to fractional list (xi=0.011417)
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.011417
DEBUG CAREFUL: Adding var 17 to fractional list (xi=0.011417)
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.057085
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.057085)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.011417
DEBUG CAREFUL: Adding var 22 to fractional list (xi=0.011417)
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.057085
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.057085)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.000000
DEBUG CAREFUL: Skipping var 27: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.057085
DEBUG CAREFUL: Adding var 34 to fractional list (xi=0.057085)
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 7 fractional variables

  %  Carefully choosing branching variable, nfrac = 7
DEBUG CAREFUL: Testing fvar[0] = var 22
DEBUG CAREFUL: Calling compare_branch_vars for var 22
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 22
DEBUG CAREFUL: New best var: 22
DEBUG CAREFUL: Testing fvar[1] = var 17
DEBUG CAREFUL: Calling compare_branch_vars for var 17
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 17
DEBUG CAREFUL: New best var: 17
DEBUG CAREFUL: Testing fvar[2] = var 4
DEBUG CAREFUL: Calling compare_branch_vars for var 4
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 4
DEBUG CAREFUL: New best var: 4
DEBUG CAREFUL: Testing fvar[3] = var 11
DEBUG CAREFUL: Calling compare_branch_vars for var 11
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 11
DEBUG CAREFUL: Testing fvar[4] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 25
DEBUG CAREFUL: Testing fvar[5] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
DEBUG CAREFUL: Testing fvar[6] = var 34
DEBUG CAREFUL: Calling compare_branch_vars for var 34
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 34
  % Initial guess is x4, Z0 = 27156360.8326584        , Z1 = 30012442.2264541        

DEBUG EVAL: Testing var 22 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=4, varin=45, theta=3.782698, up=999999999999999983222784.000000
ITER 2: row=2, varin=44, theta=15.867477, up=999999999999999983222784.000000
ITER 3: row=27, varin=3, theta=1.541596, up=999999999999999983222784.000000
ITER 4: row=14, varin=42, theta=2.876529, up=999999999999999983222784.000000
ITER 5: row=1, varin=40, theta=1.930081, up=999999999999999983222784.000000
ITER 6: row=22, varin=38, theta=0.619121, up=999999999999999983222784.000000
ITER 7: row=19, varin=15, theta=1.123478, up=999999999999999983222784.000000
ITER 8: row=15, varin=49, theta=0.935409, up=1.000000
ITER 9: row=38, varin=13, theta=0.909145, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 22 = 1 gives z=28449145.409383
  % 	x22 = 1,	Z1 = 28449145.409383         
DEBUG EVAL: First branch cutoff check: z=28449145.409383, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 22 = 0
ITER 1: row=4, varin=8, theta=0.026184, up=999999999999999983222784.000000
  % 	x22 = 0,	Z0 = 27157997.6214445        
DEBUG EVAL: Second branch cutoff check: z=27157997.621444, best_z=INF, threshold=INF
  %   New best:  x22, Z = 27157997.6214445        
DEBUG EVAL: Testing var 17 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=3, varin=45, theta=3.782698, up=999999999999999983222784.000000
ITER 2: row=2, varin=44, theta=15.867477, up=999999999999999983222784.000000
ITER 3: row=27, varin=42, theta=2.876529, up=999999999999999983222784.000000
ITER 4: row=1, varin=40, theta=1.930081, up=999999999999999983222784.000000
ITER 5: row=22, varin=38, theta=0.619121, up=999999999999999983222784.000000
ITER 6: row=2, varin=15, theta=1.123478, up=999999999999999983222784.000000
ITER 7: row=15, varin=49, theta=0.935409, up=1.000000
ITER 8: row=38, varin=37, theta=2.399176, up=999999999999999983222784.000000
ITER 9: row=45, varin=36, theta=8.063550, up=999999999999999983222784.000000
ITER 10: row=25, varin=35, theta=2.340775, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 17 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x17 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=3, varin=8, theta=0.026184, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=46)
DEBUG SOLUTION: LP solution array indices: FST[47-86], not_covered[87-106]
DEBUG SOLUTION: lp->best_solution[0] = 27157997.621444
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 0.973816
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 2.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 46 rows, 60 cols, 257 nonzeros, 2 slack, 44 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 2 slack rows
   % @PAP adding 4 rows, 22 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=45, varin=3, theta=0.030535, up=999999999999999983222784.000000
ITER 2: row=13, varin=12, theta=0.010683, up=999999999999999983222784.000000
ITER 3: row=48, varin=88, theta=0.063048, up=1.000000
LP PHASE: Switching to primal (iter=3)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=48)
DEBUG SOLUTION: LP solution array indices: FST[49-88], not_covered[89-108]
DEBUG SOLUTION: lp->best_solution[0] = 27166938.510814
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 2.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 48 rows, 60 cols, 271 nonzeros, 0 slack, 48 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @PAP adding 2 rows, 9 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=50, varin=19, theta=0.002160, up=999999999999999983222784.000000
ITER 2: row=49, varin=50, theta=0.028115, up=999999999999999983222784.000000
ITER 3: row=39, varin=38, theta=0.008910, up=999999999999999983222784.000000
ITER 4: row=41, varin=27, theta=0.058889, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=4)
ITER 5: row=1, varin=41, theta=0.000000, up=999999999999999983222784.000000
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=50)
DEBUG SOLUTION: LP solution array indices: FST[51-90], not_covered[91-110]
DEBUG SOLUTION: lp->best_solution[0] = 27171769.797532
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 2.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 50 rows, 60 cols, 280 nonzeros, 2 slack, 48 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 2 slack rows
   % @PAP adding 2 rows, 11 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=50, varin=88, theta=0.006575, up=1.000000
ITER 2: row=49, varin=50, theta=0.180138, up=999999999999999983222784.000000
ITER 3: row=37, varin=55, theta=0.002623, up=1.000000
LP PHASE: Switching to primal (iter=3)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=50)
DEBUG SOLUTION: LP solution array indices: FST[51-90], not_covered[91-110]
DEBUG SOLUTION: lp->best_solution[0] = 27172237.309541
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 0.997377
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 2.000000
DEBUG SOLUTION: lp->best_solution[12] = 0.997377
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 50 rows, 60 cols, 283 nonzeros, 6 slack, 44 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 6 slack rows
   % @PAP adding 3 rows, 10 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=45, varin=34, theta=0.003225, up=999999999999999983222784.000000
ITER 2: row=47, varin=45, theta=0.004276, up=999999999999999983222784.000000
ITER 3: row=37, varin=42, theta=0.022873, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=3)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=47)
DEBUG SOLUTION: LP solution array indices: FST[48-87], not_covered[88-107]
DEBUG SOLUTION: lp->best_solution[0] = 27172622.735676
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 2.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 2.000000
   % @PL 47 rows, 60 cols, 263 nonzeros, 2 slack, 45 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 2 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 3 at  27.17262273567637365090
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x563ae8f3f2c0
% @LO 0.01  27.15636083265837896761 99.9000000000
% @LN 0.01  27.17262273567637365090 99.9000000000
% Resuming node 3 at  27.17262273567637365090
DEBUG CONSTRNT: LP rows=45, pool->nlprows=45, pool->npend=0
DEBUG CONSTRNT: Checking 45 LP rows (pool tracks 45, total LP rows 45)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 133
DEBUG CONSTRNT: Pool row 133 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 24
DEBUG CONSTRNT: Pool row 24 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 134
DEBUG CONSTRNT: Pool row 134 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 52
DEBUG CONSTRNT: Pool row 52 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 51
DEBUG CONSTRNT: Pool row 51 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 71
DEBUG CONSTRNT: Pool row 71 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 31
DEBUG CONSTRNT: Pool row 31 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=44, expected 44
 % @PAP adding 45 rows, 187 nz to LP
DEBUG BB: Processing node 3, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 3 LP 11 Solution, length = 27172622.735676, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 1.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.004575 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.004575 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.004575 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.027448 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.004575 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.027448 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.027448 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.027448 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.027448 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.027448 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.027448 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.027448 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.004575 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.004575 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 0.972552 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 0.972552 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 0.995425 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 0.972552 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 1.000000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.972552 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 0.972552 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.972552 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 0.995425 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 0.995425 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 0.972552 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.972552 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.972552 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 0.995425 (terminal 19)
 % 14 fractional variables
DEBUG CG: LP optimal, z=27172622.735676, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27172622.735676, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 3 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 3
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=1.000000
DEBUG CAREFUL: Skipping var 2: xi+FUZZ=1.000001 >= 1.0
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.004575
DEBUG CAREFUL: Adding var 4 to fractional list (xi=0.004575)
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.004575
DEBUG CAREFUL: Adding var 11 to fractional list (xi=0.004575)
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.004575
DEBUG CAREFUL: Adding var 18 to fractional list (xi=0.004575)
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.027448
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.027448)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.004575
DEBUG CAREFUL: Adding var 22 to fractional list (xi=0.004575)
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.027448
DEBUG CAREFUL: Adding var 23 to fractional list (xi=0.027448)
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.027448
DEBUG CAREFUL: Adding var 24 to fractional list (xi=0.027448)
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.027448
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.027448)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.000000
DEBUG CAREFUL: Skipping var 27: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.027448
DEBUG CAREFUL: Adding var 29 to fractional list (xi=0.027448)
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.027448
DEBUG CAREFUL: Adding var 33 to fractional list (xi=0.027448)
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.027448
DEBUG CAREFUL: Adding var 34 to fractional list (xi=0.027448)
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.027448
DEBUG CAREFUL: Adding var 36 to fractional list (xi=0.027448)
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.004575
DEBUG CAREFUL: Adding var 37 to fractional list (xi=0.004575)
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.004575
DEBUG CAREFUL: Adding var 39 to fractional list (xi=0.004575)
DEBUG CAREFUL: Found 14 fractional variables

  %  Carefully choosing branching variable, nfrac = 14
DEBUG CAREFUL: Testing fvar[0] = var 22
DEBUG CAREFUL: Calling compare_branch_vars for var 22
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 22
DEBUG CAREFUL: New best var: 22
DEBUG CAREFUL: Testing fvar[1] = var 4
DEBUG CAREFUL: Calling compare_branch_vars for var 4
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 4
DEBUG CAREFUL: New best var: 4
DEBUG CAREFUL: Testing fvar[2] = var 11
DEBUG CAREFUL: Calling compare_branch_vars for var 11
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 11
DEBUG CAREFUL: Testing fvar[3] = var 37
DEBUG CAREFUL: Calling compare_branch_vars for var 37
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 37
DEBUG CAREFUL: Testing fvar[4] = var 18
DEBUG CAREFUL: Calling compare_branch_vars for var 18
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 18
DEBUG CAREFUL: New best var: 18
DEBUG CAREFUL: Testing fvar[5] = var 29
DEBUG CAREFUL: Calling compare_branch_vars for var 29
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 29
DEBUG CAREFUL: Testing fvar[6] = var 24
DEBUG CAREFUL: Calling compare_branch_vars for var 24
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 24
DEBUG CAREFUL: Testing fvar[7] = var 23
DEBUG CAREFUL: Calling compare_branch_vars for var 23
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 23
DEBUG CAREFUL: Testing fvar[8] = var 36
DEBUG CAREFUL: Calling compare_branch_vars for var 36
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 36
DEBUG CAREFUL: Testing fvar[9] = var 33
DEBUG CAREFUL: Calling compare_branch_vars for var 33
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 33
DEBUG CAREFUL: Testing fvar[10] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 25
DEBUG CAREFUL: Testing fvar[11] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
DEBUG CAREFUL: Testing fvar[12] = var 34
DEBUG CAREFUL: Calling compare_branch_vars for var 34
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 34
DEBUG CAREFUL: Testing fvar[13] = var 39
DEBUG CAREFUL: Calling compare_branch_vars for var 39
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 39
  % Initial guess is x18, Z0 = 27172622.7356764        , Z1 = 31486885.3554081        

DEBUG EVAL: Testing var 22 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=3, varin=43, theta=12.814076, up=999999999999999983222784.000000
ITER 2: row=2, varin=45, theta=7.448574, up=999999999999999983222784.000000
ITER 3: row=35, varin=42, theta=6.315853, up=999999999999999983222784.000000
ITER 4: row=36, varin=36, theta=1.555697, up=999999999999999983222784.000000
ITER 5: row=41, varin=40, theta=0.912609, up=999999999999999983222784.000000
ITER 6: row=3, varin=32, theta=1.332766, up=999999999999999983222784.000000
ITER 7: row=4, varin=48, theta=0.853946, up=1.000000
DEBUG EVAL: Branch var 22 = 1 gives z=28532048.910295
  % 	x22 = 1,	Z1 = 28532048.910295         
DEBUG EVAL: First branch cutoff check: z=28532048.910295, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 22 = 0
ITER 1: row=3, varin=3, theta=0.006886, up=999999999999999983222784.000000
ITER 2: row=34, varin=48, theta=0.042964, up=1.000000
  % 	x22 = 0,	Z0 = 27175099.8466137        
DEBUG EVAL: Second branch cutoff check: z=27175099.846614, best_z=INF, threshold=INF
  %   New best:  x22, Z = 27175099.8466137        
DEBUG EVAL: Testing var 4 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=1, varin=43, theta=12.814076, up=999999999999999983222784.000000
ITER 2: row=2, varin=45, theta=7.448574, up=999999999999999983222784.000000
ITER 3: row=35, varin=3, theta=2.541915, up=999999999999999983222784.000000
ITER 4: row=34, varin=42, theta=6.315853, up=999999999999999983222784.000000
ITER 5: row=36, varin=35, theta=1.198191, up=999999999999999983222784.000000
ITER 6: row=15, varin=32, theta=1.786587, up=999999999999999983222784.000000
ITER 7: row=6, varin=38, theta=2.555659, up=999999999999999983222784.000000
ITER 8: row=1, varin=48, theta=1.234462, up=1.000000
ITER 9: row=1, varin=40, theta=0.880860, up=999999999999999983222784.000000
ITER 10: row=33, varin=12, theta=0.230945, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 4 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x4 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=1, varin=37, theta=0.013858, up=999999999999999983222784.000000
ITER 2: row=34, varin=48, theta=0.042964, up=1.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=45)
DEBUG SOLUTION: LP solution array indices: FST[46-85], not_covered[86-105]
DEBUG SOLUTION: lp->best_solution[0] = 27175099.846614
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 2.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 2.000000
   % @PL 45 rows, 60 cols, 247 nonzeros, 1 slack, 44 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 1 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 3 at  27.17509984661374033976
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x563ae8f3f2c0
% @LO 0.01  27.17262273567637365090 99.9000000000
% @LN 0.01  27.17509984661374033976 99.9000000000
% Resuming node 3 at  27.17509984661374033976
DEBUG CONSTRNT: LP rows=44, pool->nlprows=44, pool->npend=0
DEBUG CONSTRNT: Checking 44 LP rows (pool tracks 44, total LP rows 44)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 24
DEBUG CONSTRNT: Pool row 24 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 134
DEBUG CONSTRNT: Pool row 134 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 52
DEBUG CONSTRNT: Pool row 52 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 51
DEBUG CONSTRNT: Pool row 51 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 71
DEBUG CONSTRNT: Pool row 71 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 31
DEBUG CONSTRNT: Pool row 31 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=43, expected 43
 % @PAP adding 44 rows, 185 nz to LP
DEBUG BB: Processing node 3, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 3 LP 12 Solution, length = 27175099.846614, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.957036 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.042964 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.042964 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.042964 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.042964 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.042964 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.042964 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.042964 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.042964 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.042964 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 0.957036 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 0.957036 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 0.957036 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.042964 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 1.000000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.957036 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 0.957036 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.957036 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.042964 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 0.957036 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.957036 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.957036 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 10 fractional variables
DEBUG CG: LP optimal, z=27175099.846614, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27175099.846614, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 3 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 3
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.957036
DEBUG CAREFUL: Adding var 2 to fractional list (xi=0.957036)
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.042964
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.042964)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.042964
DEBUG CAREFUL: Adding var 23 to fractional list (xi=0.042964)
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.042964
DEBUG CAREFUL: Adding var 24 to fractional list (xi=0.042964)
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.042964
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.042964)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.000000
DEBUG CAREFUL: Skipping var 27: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.042964
DEBUG CAREFUL: Adding var 29 to fractional list (xi=0.042964)
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.042964
DEBUG CAREFUL: Adding var 31 to fractional list (xi=0.042964)
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.042964
DEBUG CAREFUL: Adding var 33 to fractional list (xi=0.042964)
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.042964
DEBUG CAREFUL: Adding var 34 to fractional list (xi=0.042964)
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.042964
DEBUG CAREFUL: Adding var 36 to fractional list (xi=0.042964)
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 10 fractional variables

  %  Carefully choosing branching variable, nfrac = 10
DEBUG CAREFUL: Testing fvar[0] = var 2
DEBUG CAREFUL: Calling compare_branch_vars for var 2
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 2
DEBUG CAREFUL: New best var: 2
DEBUG CAREFUL: Testing fvar[1] = var 31
DEBUG CAREFUL: Calling compare_branch_vars for var 31
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 31
DEBUG CAREFUL: Testing fvar[2] = var 29
DEBUG CAREFUL: Calling compare_branch_vars for var 29
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 29
DEBUG CAREFUL: New best var: 29
DEBUG CAREFUL: Testing fvar[3] = var 23
DEBUG CAREFUL: Calling compare_branch_vars for var 23
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 23
DEBUG CAREFUL: Testing fvar[4] = var 24
DEBUG CAREFUL: Calling compare_branch_vars for var 24
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 24
DEBUG CAREFUL: Testing fvar[5] = var 36
DEBUG CAREFUL: Calling compare_branch_vars for var 36
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 36
DEBUG CAREFUL: Testing fvar[6] = var 33
DEBUG CAREFUL: Calling compare_branch_vars for var 33
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 33
DEBUG CAREFUL: New best var: 33
DEBUG CAREFUL: Testing fvar[7] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 25
DEBUG CAREFUL: Testing fvar[8] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
DEBUG CAREFUL: Testing fvar[9] = var 34
DEBUG CAREFUL: Calling compare_branch_vars for var 34
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 34
  % Initial guess is x33, Z0 = 27175099.8466137        , Z1 = 27602347.209047         

DEBUG EVAL: Testing var 2 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=1, varin=11, theta=0.008400, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 2 = 1 gives z=27176330.789480
  % 	x2 = 1,	Z1 = 27176330.7894796        
DEBUG EVAL: First branch cutoff check: z=27176330.789480, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 2 = 0
ITER 1: row=1, varin=33, theta=0.308683, up=999999999999999983222784.000000
ITER 2: row=34, varin=42, theta=1.311790, up=999999999999999983222784.000000
ITER 3: row=6, varin=44, theta=0.340822, up=999999999999999983222784.000000
ITER 4: row=44, varin=3, theta=0.134346, up=999999999999999983222784.000000
ITER 5: row=43, varin=41, theta=0.333808, up=999999999999999983222784.000000
ITER 6: row=41, varin=38, theta=0.231293, up=999999999999999983222784.000000
ITER 7: row=2, varin=37, theta=0.970215, up=999999999999999983222784.000000
  % 	x2 = 0,	Z0 = 27349033.0820069        
DEBUG EVAL: Second branch cutoff check: z=27349033.082007, best_z=INF, threshold=INF
  %   New best:  x2, Z = 27176330.7894796        
DEBUG EVAL: Testing var 31 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=18, varin=33, theta=0.308683, up=999999999999999983222784.000000
ITER 2: row=34, varin=42, theta=1.311790, up=999999999999999983222784.000000
ITER 3: row=4, varin=44, theta=0.340822, up=999999999999999983222784.000000
ITER 4: row=44, varin=3, theta=0.134346, up=999999999999999983222784.000000
ITER 5: row=11, varin=41, theta=0.333808, up=999999999999999983222784.000000
ITER 6: row=41, varin=39, theta=0.138632, up=999999999999999983222784.000000
ITER 7: row=39, varin=38, theta=0.231293, up=999999999999999983222784.000000
ITER 8: row=2, varin=37, theta=0.970215, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 31 = 1 gives z=27349033.082007
  % 	x31 = 1,	Z1 = 27349033.0820069        
DEBUG EVAL: First branch cutoff check: z=27349033.082007, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 31 = 0
ITER 1: row=18, varin=11, theta=0.008400, up=999999999999999983222784.000000
  % 	x31 = 0,	Z0 = 27176330.7894796        
DEBUG EVAL: Second branch cutoff check: z=27176330.789480, best_z=INF, threshold=INF
  %   New best:  x31, Z = 27176330.7894796        
DEBUG EVAL: Testing var 29 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=4, varin=33, theta=0.869730, up=999999999999999983222784.000000
ITER 2: row=1, varin=38, theta=0.973115, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 29 = 1 gives z=27599035.874330
  % 	x29 = 1,	Z1 = 27599035.87433          
DEBUG EVAL: First branch cutoff check: z=27599035.874330, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 29 = 0
ITER 1: row=4, varin=14, theta=0.072857, up=999999999999999983222784.000000
  % 	x29 = 0,	Z0 = 27181253.6368762        
DEBUG EVAL: Second branch cutoff check: z=27181253.636876, best_z=INF, threshold=INF
  %   New best:  x29, Z = 27181253.6368762        
DEBUG EVAL: Testing var 23 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=12, varin=42, theta=0.158869, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 23 = 0 gives z=27184083.484161
  % 	x23 = 0,	Z0 = 27184083.4841614        
DEBUG EVAL: First branch cutoff check: z=27184083.484161, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 23 = 1
ITER 1: row=12, varin=14, theta=2.332530, up=999999999999999983222784.000000
ITER 2: row=4, varin=33, theta=0.496860, up=999999999999999983222784.000000
ITER 3: row=1, varin=83, theta=3.595551, up=1.000000
ITER 4: row=1, varin=24, theta=0.643183, up=999999999999999983222784.000000
ITER 5: row=34, varin=83, theta=1.000000, up=1.000000
  % 	x23 = 1,	Z1 = 27999116.9853301        
DEBUG EVAL: Second branch cutoff check: z=27999116.985330, best_z=INF, threshold=INF
  %   New best:  x23, Z = 27184083.4841614        
DEBUG EVAL: Testing var 24 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=2, varin=14, theta=0.072857, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 24 = 0 gives z=27181253.636876
  % 	x24 = 0,	Z0 = 27181253.6368762        
DEBUG EVAL: First branch cutoff check: z=27181253.636876, best_z=INF, threshold=INF
DEBUG EVAL: Testing var 36 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=24, varin=14, theta=2.332530, up=999999999999999983222784.000000
ITER 2: row=4, varin=33, theta=0.496860, up=999999999999999983222784.000000
ITER 3: row=1, varin=83, theta=3.595551, up=1.000000
ITER 4: row=1, varin=25, theta=6.376491, up=999999999999999983222784.000000
ITER 5: row=13, varin=30, theta=3.507742, up=999999999999999983222784.000000
ITER 6: row=21, varin=22, theta=0.934093, up=999999999999999983222784.000000
ITER 7: row=33, varin=3, theta=0.500000, up=999999999999999983222784.000000
ITER 8: row=11, varin=83, theta=1.000000, up=1.000000
ITER 9: row=16, varin=39, theta=0.423382, up=999999999999999983222784.000000
ITER 10: row=39, varin=38, theta=2.234588, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 36 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x36 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=24, varin=42, theta=0.158869, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
ITER 2: row=7, varin=11, theta=0.014684, up=999999999999999983222784.000000
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=44)
DEBUG SOLUTION: LP solution array indices: FST[45-84], not_covered[85-104]
DEBUG SOLUTION: lp->best_solution[0] = 27179742.696152
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 2.000000
DEBUG SOLUTION: lp->best_solution[11] = 0.985316
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 2.000000
   % @PL 44 rows, 60 cols, 245 nonzeros, 3 slack, 41 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 3 slack rows
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=1, varin=71, theta=19.000000, up=1.000000
ITER 2: row=1, varin=76, theta=18.000000, up=1.000000
ITER 3: row=1, varin=44, theta=8.500000, up=1.000000
ITER 4: row=1, varin=63, theta=15.000000, up=1.000000
ITER 5: row=1, varin=67, theta=14.000000, up=1.000000
ITER 6: row=1, varin=74, theta=13.000000, up=1.000000
ITER 7: row=1, varin=70, theta=12.000000, up=1.000000
ITER 8: row=1, varin=60, theta=3.666667, up=1.000000
ITER 9: row=1, varin=77, theta=8.000000, up=1.000000
ITER 10: row=1, varin=53, theta=3.500000, up=1.000000
LP PHASE: Switching to primal (iter=82)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=41)
DEBUG SOLUTION: LP solution array indices: FST[42-81], not_covered[82-101]
DEBUG SOLUTION: lp->best_solution[0] = 27179742.696153
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 2.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 2.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 41 rows, 60 cols, 239 nonzeros, 0 slack, 41 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 3 at  27.17974269615250904053
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x563ae8f3f2c0
% @LO 0.01  27.17509984661374033976 99.9000000000
% @LN 0.01  27.17974269615250904053 99.9000000000
% Resuming node 3 at  27.17974269615250904053
DEBUG CONSTRNT: LP rows=41, pool->nlprows=41, pool->npend=0
DEBUG CONSTRNT: Checking 41 LP rows (pool tracks 41, total LP rows 41)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 24
DEBUG CONSTRNT: Pool row 24 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 134
DEBUG CONSTRNT: Pool row 134 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 52
DEBUG CONSTRNT: Pool row 52 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 51
DEBUG CONSTRNT: Pool row 51 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 71
DEBUG CONSTRNT: Pool row 71 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 31
DEBUG CONSTRNT: Pool row 31 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=40, expected 40
 % @PAP adding 41 rows, 179 nz to LP
DEBUG BB: Processing node 3, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 3 LP 13 Solution, length = 27179742.696153, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 1.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.014684 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.014684 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.044053 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.044053 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.044053 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.014684 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 1.000000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.955947 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.955947 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 0.985316 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 0.985316 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.955947 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.955947 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 0.985316 (terminal 19)
 % 6 fractional variables
DEBUG CG: LP optimal, z=27179742.696153, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27179742.696153, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 3 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 3
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=1.000000
DEBUG CAREFUL: Skipping var 2: xi+FUZZ=1.000001 >= 1.0
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.014684
DEBUG CAREFUL: Adding var 11 to fractional list (xi=0.014684)
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.014684
DEBUG CAREFUL: Adding var 18 to fractional list (xi=0.014684)
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.044053
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.044053)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.044053
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.044053)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.000000
DEBUG CAREFUL: Skipping var 27: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.044053
DEBUG CAREFUL: Adding var 34 to fractional list (xi=0.044053)
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.014684
DEBUG CAREFUL: Adding var 37 to fractional list (xi=0.014684)
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 6 fractional variables

  %  Carefully choosing branching variable, nfrac = 6
DEBUG CAREFUL: Testing fvar[0] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 25
DEBUG CAREFUL: New best var: 25
DEBUG CAREFUL: Testing fvar[1] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
DEBUG CAREFUL: Testing fvar[2] = var 11
DEBUG CAREFUL: Calling compare_branch_vars for var 11
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 11
DEBUG CAREFUL: New best var: 11
DEBUG CAREFUL: Testing fvar[3] = var 34
DEBUG CAREFUL: Calling compare_branch_vars for var 34
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 34
DEBUG CAREFUL: Testing fvar[4] = var 37
DEBUG CAREFUL: Calling compare_branch_vars for var 37
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 37
DEBUG CAREFUL: Testing fvar[5] = var 18
DEBUG CAREFUL: Calling compare_branch_vars for var 18
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 18
DEBUG CAREFUL: New best var: 18
  % Initial guess is x18, Z0 = 27179742.6961525        , Z1 = 31486885.3554081        

DEBUG EVAL: Testing var 25 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=18, varin=73, theta=1.322728, up=1.000000
ITER 2: row=18, varin=80, theta=0.741658, up=1.000000
ITER 3: row=31, varin=32, theta=0.745154, up=999999999999999983222784.000000
ITER 4: row=38, varin=35, theta=0.970215, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 25 = 1 gives z=27349033.082007
  % 	x25 = 1,	Z1 = 27349033.0820069        
DEBUG EVAL: First branch cutoff check: z=27349033.082007, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 25 = 0
ITER 1: row=18, varin=86, theta=0.241399, up=1.000000
  % 	x25 = 0,	Z0 = 27187885.8295956        
DEBUG EVAL: Second branch cutoff check: z=27187885.829596, best_z=INF, threshold=INF
  %   New best:  x25, Z = 27187885.8295956        
DEBUG EVAL: Testing var 21 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=14, varin=73, theta=1.322728, up=1.000000
ITER 2: row=14, varin=80, theta=0.741658, up=1.000000
ITER 3: row=31, varin=32, theta=0.745154, up=999999999999999983222784.000000
ITER 4: row=38, varin=35, theta=0.970215, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 21 = 1 gives z=27349033.082007
  % 	x21 = 1,	Z1 = 27349033.0820069        
DEBUG EVAL: First branch cutoff check: z=27349033.082007, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 21 = 0
ITER 1: row=14, varin=86, theta=0.241399, up=1.000000
  % 	x21 = 0,	Z0 = 27187885.8295956        
DEBUG EVAL: Second branch cutoff check: z=27187885.829596, best_z=INF, threshold=INF
DEBUG EVAL: Testing var 11 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=1, varin=40, theta=4.319415, up=999999999999999983222784.000000
ITER 2: row=31, varin=39, theta=3.251097, up=999999999999999983222784.000000
ITER 3: row=39, varin=37, theta=1.350194, up=999999999999999983222784.000000
ITER 4: row=15, varin=35, theta=2.450835, up=999999999999999983222784.000000
ITER 5: row=21, varin=73, theta=1.044782, up=1.000000
ITER 6: row=21, varin=81, theta=0.177224, up=1.000000
ITER 7: row=17, varin=29, theta=1.724458, up=999999999999999983222784.000000
ITER 8: row=20, varin=27, theta=0.641045, up=999999999999999983222784.000000
ITER 9: row=21, varin=24, theta=1.000000, up=999999999999999983222784.000000
ITER 10: row=2, varin=30, theta=1.000000, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 11 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x11 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=1, varin=32, theta=0.022010, up=999999999999999983222784.000000
ITER 2: row=38, varin=73, theta=0.158869, up=1.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=41)
DEBUG SOLUTION: LP solution array indices: FST[42-81], not_covered[82-101]
DEBUG SOLUTION: lp->best_solution[0] = 27184083.484161
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 2.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 2.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 41 rows, 60 cols, 239 nonzeros, 0 slack, 41 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 3 at  27.18408348416139475034
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x563ae8f3f2c0
% @LO 0.01  27.17974269615250904053 99.9000000000
% @LN 0.01  27.18408348416139475034 99.9000000000
% Resuming node 3 at  27.18408348416139475034
DEBUG CONSTRNT: LP rows=41, pool->nlprows=41, pool->npend=0
DEBUG CONSTRNT: Checking 41 LP rows (pool tracks 41, total LP rows 41)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 24
DEBUG CONSTRNT: Pool row 24 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 134
DEBUG CONSTRNT: Pool row 134 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 52
DEBUG CONSTRNT: Pool row 52 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 51
DEBUG CONSTRNT: Pool row 51 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 71
DEBUG CONSTRNT: Pool row 71 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 31
DEBUG CONSTRNT: Pool row 31 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=40, expected 40
 % @PAP adding 41 rows, 179 nz to LP
DEBUG BB: Processing node 3, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 3 LP 14 Solution, length = 27184083.484161, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.841131 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.158869 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.158869 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.158869 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.158869 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.158869 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 1.000000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.841131 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.841131 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.158869 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.841131 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.841131 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 5 fractional variables
DEBUG CG: LP optimal, z=27184083.484161, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27184083.484161, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 3 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 3
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.841131
DEBUG CAREFUL: Adding var 2 to fractional list (xi=0.841131)
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.158869
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.158869)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.158869
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.158869)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.000000
DEBUG CAREFUL: Skipping var 27: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.158869
DEBUG CAREFUL: Adding var 31 to fractional list (xi=0.158869)
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.158869
DEBUG CAREFUL: Adding var 34 to fractional list (xi=0.158869)
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 5 fractional variables

  %  Carefully choosing branching variable, nfrac = 5
DEBUG CAREFUL: Testing fvar[0] = var 2
DEBUG CAREFUL: Calling compare_branch_vars for var 2
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 2
DEBUG CAREFUL: New best var: 2
DEBUG CAREFUL: Testing fvar[1] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 25
DEBUG CAREFUL: New best var: 25
DEBUG CAREFUL: Testing fvar[2] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
DEBUG CAREFUL: Testing fvar[3] = var 34
DEBUG CAREFUL: Calling compare_branch_vars for var 34
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 34
DEBUG CAREFUL: Testing fvar[4] = var 31
DEBUG CAREFUL: Calling compare_branch_vars for var 31
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 31
  % Initial guess is x25, Z0 = 27187885.8295956        , Z1 = 27349033.0820069        

DEBUG EVAL: Testing var 2 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=1, varin=80, theta=0.064262, up=1.000000
DEBUG EVAL: Branch var 2 = 1 gives z=27187093.105651
  % 	x2 = 1,	Z1 = 27187093.1056506        
DEBUG EVAL: First branch cutoff check: z=27187093.105651, best_z=INF, threshold=INF
DEBUG EVAL: Testing var 25 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=14, varin=86, theta=0.241399, up=1.000000
DEBUG EVAL: Branch var 25 = 0 gives z=27187885.829596
  % 	x25 = 0,	Z0 = 27187885.8295958        
DEBUG EVAL: First branch cutoff check: z=27187885.829596, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 25 = 1
ITER 1: row=14, varin=38, theta=0.161199, up=999999999999999983222784.000000
ITER 2: row=1, varin=80, theta=0.739922, up=1.000000
ITER 3: row=31, varin=35, theta=0.970215, up=999999999999999983222784.000000
  % 	x25 = 1,	Z1 = 27349033.0820069        
DEBUG EVAL: Second branch cutoff check: z=27349033.082007, best_z=INF, threshold=INF
DEBUG EVAL: Testing var 21 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=5, varin=86, theta=0.241399, up=1.000000
DEBUG EVAL: Branch var 21 = 0 gives z=27187885.829596
  % 	x21 = 0,	Z0 = 27187885.8295958        
DEBUG EVAL: First branch cutoff check: z=27187885.829596, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 21 = 1
ITER 1: row=5, varin=38, theta=0.161199, up=999999999999999983222784.000000
ITER 2: row=1, varin=80, theta=0.739922, up=1.000000
ITER 3: row=31, varin=35, theta=0.970215, up=999999999999999983222784.000000
  % 	x21 = 1,	Z1 = 27349033.0820069        
DEBUG EVAL: Second branch cutoff check: z=27349033.082007, best_z=INF, threshold=INF
DEBUG EVAL: Testing var 34 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=18, varin=86, theta=0.241399, up=1.000000
DEBUG EVAL: Branch var 34 = 0 gives z=27187885.829596
  % 	x34 = 0,	Z0 = 27187885.8295958        
DEBUG EVAL: First branch cutoff check: z=27187885.829596, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 34 = 1
ITER 1: row=18, varin=38, theta=0.161199, up=999999999999999983222784.000000
ITER 2: row=1, varin=80, theta=0.739922, up=1.000000
ITER 3: row=32, varin=29, theta=2.397697, up=999999999999999983222784.000000
ITER 4: row=20, varin=37, theta=0.751856, up=999999999999999983222784.000000
ITER 5: row=1, varin=4, theta=1.237153, up=999999999999999983222784.000000
ITER 6: row=6, varin=18, theta=1.039528, up=999999999999999983222784.000000
ITER 7: row=38, varin=80, theta=1.000000, up=1.000000
ITER 8: row=5, varin=24, theta=1.836336, up=999999999999999983222784.000000
ITER 9: row=2, varin=39, theta=8.206175, up=999999999999999983222784.000000
  % 	x34 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: Second branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=18, varin=86, theta=0.241399, up=1.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=41)
DEBUG SOLUTION: LP solution array indices: FST[42-81], not_covered[82-101]
DEBUG SOLUTION: lp->best_solution[0] = 27187885.829596
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 2.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 2.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 41 rows, 60 cols, 239 nonzeros, 1 slack, 40 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 1 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 3 at  27.18788582959575705900
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x563ae8f3f2c0
% @LO 0.01  27.18408348416139475034 99.9000000000
% @LN 0.01  27.18788582959575705900 99.9000000000
% Resuming node 3 at  27.18788582959575705900
DEBUG CONSTRNT: LP rows=40, pool->nlprows=40, pool->npend=0
DEBUG CONSTRNT: Checking 40 LP rows (pool tracks 40, total LP rows 40)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 134
DEBUG CONSTRNT: Pool row 134 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 52
DEBUG CONSTRNT: Pool row 52 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 51
DEBUG CONSTRNT: Pool row 51 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 71
DEBUG CONSTRNT: Pool row 71 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 31
DEBUG CONSTRNT: Pool row 31 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=39, expected 39
 % @PAP adding 40 rows, 177 nz to LP
DEBUG BB: Processing node 3, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 3 LP 15 Solution, length = 27187885.829596, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 1.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.000000 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.000000 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.241399 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 0.758601 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 1.000000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 1.000000 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 1.000000 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 1.000000 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 1.000000 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 1 fractional variables
DEBUG CG: LP optimal, z=27187885.829596, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27187885.829596, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 3 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 3
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=1.000000
DEBUG CAREFUL: Skipping var 2: xi+FUZZ=1.000001 >= 1.0
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.000000
DEBUG CAREFUL: Skipping var 21: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.000000
DEBUG CAREFUL: Skipping var 25: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.000000
DEBUG CAREFUL: Skipping var 27: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.241399
DEBUG CAREFUL: Adding var 32 to fractional list (xi=0.241399)
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 1 fractional variables

  %  Carefully choosing branching variable, nfrac = 1
DEBUG CAREFUL: Testing fvar[0] = var 32
DEBUG CAREFUL: Calling compare_branch_vars for var 32
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 32
DEBUG CAREFUL: New best var: 32
  % Initial guess is x32, Z0 = 27187885.8295958        , Z1 = 27187885.8295958        

DEBUG EVAL: Testing var 32 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=17, varin=79, theta=0.107913, up=1.000000
ITER 2: row=5, varin=88, theta=0.127923, up=1.000000
DEBUG EVAL: Branch var 32 = 0 gives z=27198868.095289
  % 	x32 = 0,	Z0 = 27198868.0952887        
DEBUG EVAL: First branch cutoff check: z=27198868.095289, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 32 = 1
ITER 1: row=17, varin=37, theta=0.095679, up=999999999999999983222784.000000
ITER 2: row=31, varin=39, theta=0.340102, up=999999999999999983222784.000000
ITER 3: row=39, varin=38, theta=0.328496, up=999999999999999983222784.000000
ITER 4: row=38, varin=36, theta=0.122745, up=999999999999999983222784.000000
ITER 5: row=30, varin=30, theta=0.113861, up=999999999999999983222784.000000
ITER 6: row=37, varin=24, theta=0.296297, up=999999999999999983222784.000000
ITER 7: row=2, varin=28, theta=1.423145, up=999999999999999983222784.000000
ITER 8: row=20, varin=29, theta=0.423433, up=999999999999999983222784.000000
ITER 9: row=29, varin=27, theta=0.413126, up=999999999999999983222784.000000
ITER 10: row=27, varin=26, theta=0.529035, up=999999999999999983222784.000000
  % 	x32 = 1,	Z1 = 27537327.8604579        
DEBUG EVAL: Second branch cutoff check: z=27537327.860458, best_z=INF, threshold=INF
  %   New best:  x32, Z = 27198868.0952887        
  % Best branch is x32, Z0 = 27198868.0952887        , Z1 = 27537327.8604579        

DEBUG CAREFUL: Final result - returning best.var = 32
DEBUG BB: Branching variable chosen: j=32
 % @NC    5    3	x32 = 0	27198868.095289
 % @NC    6    3	x32 = 1	27537327.860458
 %       3     3 27187885.8296               27198868.0953   x27 D     2     2
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x563ae8f40ea0
% @LO 0.01  27.18788582959575705900 99.9000000000
% @LN 0.01  27.19886809528873072850 99.9000000000
% Resuming node 5 at  27.19886809528873072850
DEBUG CONSTRNT: LP rows=40, pool->nlprows=40, pool->npend=0
DEBUG CONSTRNT: Checking 40 LP rows (pool tracks 40, total LP rows 40)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 134
DEBUG CONSTRNT: Pool row 134 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 52
DEBUG CONSTRNT: Pool row 52 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 51
DEBUG CONSTRNT: Pool row 51 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 71
DEBUG CONSTRNT: Pool row 71 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 31
DEBUG CONSTRNT: Pool row 31 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=39, expected 39
 % @PAP adding 40 rows, 177 nz to LP
DEBUG BB: Processing node 5, calling compute_good_lower_bound
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=17, varin=79, theta=0.107913, up=1.000000
ITER 2: row=5, varin=88, theta=0.127923, up=1.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=40)
DEBUG SOLUTION: LP solution array indices: FST[41-80], not_covered[81-100]
DEBUG SOLUTION: lp->best_solution[0] = 27198868.095289
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 2.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 2.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
  % @PL 40 rows, 60 cols, 237 nonzeros, 1 slack, 39 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
  % @PAP adding 2 rows, 16 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=41, varin=34, theta=0.055799, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=42)
DEBUG SOLUTION: LP solution array indices: FST[43-82], not_covered[83-102]
DEBUG SOLUTION: lp->best_solution[0] = 27202632.345852
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 2.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 2.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
  % @PL 42 rows, 60 cols, 253 nonzeros, 3 slack, 39 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
  % @D deleting 3 slack rows
  % @PAP adding 4 rows, 22 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=40, varin=87, theta=0.051442, up=1.000000
ITER 2: row=41, varin=31, theta=0.006467, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=43)
DEBUG SOLUTION: LP solution array indices: FST[44-83], not_covered[84-103]
DEBUG SOLUTION: lp->best_solution[0] = 27206716.187714
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 2.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 2.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
  % @PL 43 rows, 60 cols, 257 nonzeros, 4 slack, 39 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
  % @D deleting 4 slack rows
  % @PAP adding 1 rows, 2 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=40, varin=38, theta=0.052041, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=40)
DEBUG SOLUTION: LP solution array indices: FST[41-80], not_covered[81-100]
DEBUG SOLUTION: lp->best_solution[0] = 27208466.727709
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 2.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 2.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
  % @PL 40 rows, 60 cols, 243 nonzeros, 1 slack, 39 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
  % @D deleting 1 slack rows
  % Node 5 LP 1 Solution, length = 27208466.727709, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 1.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.013010 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.039031 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.013010 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.039031 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.039031 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.039031 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.013010 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.013010 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.013010 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 0.986990 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 0.960969 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 0.960969 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.960969 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 1.000000 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 0.986990 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 0.986990 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.960969 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.960969 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 0.986990 (terminal 19)
 % 9 fractional variables
DEBUG CG: LP optimal, z=27208466.727709, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
 % @LO 0.01  27.19886809528873072850 99.9000000000
 % @LN 0.01  27.20846672770924357110 99.9000000000
DEBUG CG: Second cutoff check: z=27208466.727709, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 5 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 5
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=1.000000
DEBUG CAREFUL: Skipping var 2: xi+FUZZ=1.000001 >= 1.0
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.013010
DEBUG CAREFUL: Adding var 18 to fractional list (xi=0.013010)
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.039031
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.039031)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.013010
DEBUG CAREFUL: Adding var 22 to fractional list (xi=0.013010)
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.039031
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.039031)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.000000
DEBUG CAREFUL: Skipping var 27: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.039031
DEBUG CAREFUL: Adding var 28 to fractional list (xi=0.039031)
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.039031
DEBUG CAREFUL: Adding var 35 to fractional list (xi=0.039031)
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.013010
DEBUG CAREFUL: Adding var 37 to fractional list (xi=0.013010)
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.013010
DEBUG CAREFUL: Adding var 38 to fractional list (xi=0.013010)
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.013010
DEBUG CAREFUL: Adding var 39 to fractional list (xi=0.013010)
DEBUG CAREFUL: Found 9 fractional variables

  %  Carefully choosing branching variable, nfrac = 9
DEBUG CAREFUL: Testing fvar[0] = var 37
DEBUG CAREFUL: Calling compare_branch_vars for var 37
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 37
DEBUG CAREFUL: New best var: 37
DEBUG CAREFUL: Testing fvar[1] = var 18
DEBUG CAREFUL: Calling compare_branch_vars for var 18
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 18
DEBUG CAREFUL: New best var: 18
DEBUG CAREFUL: Testing fvar[2] = var 22
DEBUG CAREFUL: Calling compare_branch_vars for var 22
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 22
DEBUG CAREFUL: Testing fvar[3] = var 39
DEBUG CAREFUL: Calling compare_branch_vars for var 39
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 39
DEBUG CAREFUL: Testing fvar[4] = var 38
DEBUG CAREFUL: Calling compare_branch_vars for var 38
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 38
DEBUG CAREFUL: Testing fvar[5] = var 35
DEBUG CAREFUL: Calling compare_branch_vars for var 35
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 35
DEBUG CAREFUL: Testing fvar[6] = var 28
DEBUG CAREFUL: Calling compare_branch_vars for var 28
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 28
DEBUG CAREFUL: Testing fvar[7] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 25
DEBUG CAREFUL: Testing fvar[8] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
  % Initial guess is x18, Z0 = 27208466.7277092        , Z1 = 31486885.3554081        

DEBUG EVAL: Testing var 37 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=26, varin=39, theta=3.902503, up=999999999999999983222784.000000
ITER 2: row=3, varin=37, theta=3.148349, up=999999999999999983222784.000000
ITER 3: row=29, varin=36, theta=4.925212, up=999999999999999983222784.000000
ITER 4: row=27, varin=29, theta=1.255394, up=999999999999999983222784.000000
ITER 5: row=35, varin=33, theta=2.949303, up=999999999999999983222784.000000
ITER 6: row=33, varin=32, theta=1.124910, up=999999999999999983222784.000000
ITER 7: row=15, varin=71, theta=1.331586, up=1.000000
ITER 8: row=15, varin=79, theta=1.312252, up=1.000000
ITER 9: row=15, varin=27, theta=0.457403, up=999999999999999983222784.000000
ITER 10: row=35, varin=79, theta=1.000000, up=1.000000
DEBUG EVAL: Branch var 37 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x37 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=26, varin=71, theta=0.115545, up=1.000000
LP PHASE: Switching to primal (iter=1)
ITER 2: row=7, varin=34, theta=0.016959, up=999999999999999983222784.000000
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=39)
DEBUG SOLUTION: LP solution array indices: FST[40-79], not_covered[80-99]
DEBUG SOLUTION: lp->best_solution[0] = 27214294.977947
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 2.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 2.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 39 rows, 60 cols, 235 nonzeros, 2 slack, 37 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 2 slack rows
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=1, varin=67, theta=19.000000, up=1.000000
ITER 2: row=1, varin=40, theta=9.000000, up=1.000000
ITER 3: row=1, varin=59, theta=16.000000, up=1.000000
ITER 4: row=1, varin=63, theta=15.000000, up=1.000000
ITER 5: row=1, varin=66, theta=14.000000, up=1.000000
ITER 6: row=1, varin=56, theta=4.333333, up=1.000000
ITER 7: row=1, varin=73, theta=10.000000, up=1.000000
ITER 8: row=1, varin=61, theta=9.000000, up=1.000000
ITER 9: row=1, varin=71, theta=8.000000, up=1.000000
ITER 10: row=1, varin=62, theta=7.000000, up=1.000000
LP PHASE: Switching to primal (iter=72)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=37)
DEBUG SOLUTION: LP solution array indices: FST[38-77], not_covered[78-97]
DEBUG SOLUTION: lp->best_solution[0] = 27214294.977947
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 2.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 2.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 37 rows, 60 cols, 231 nonzeros, 0 slack, 37 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 5 at  27.21429497794693475043
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x563ae8f40ea0
% @LO 0.01  27.20846672770924357110 99.9000000000
% @LN 0.01  27.21429497794693475043 99.9000000000
% Resuming node 5 at  27.21429497794693475043
DEBUG CONSTRNT: LP rows=37, pool->nlprows=37, pool->npend=0
DEBUG CONSTRNT: Checking 37 LP rows (pool tracks 37, total LP rows 37)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 134
DEBUG CONSTRNT: Pool row 134 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 52
DEBUG CONSTRNT: Pool row 52 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 51
DEBUG CONSTRNT: Pool row 51 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 31
DEBUG CONSTRNT: Pool row 31 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 72
DEBUG CONSTRNT: Pool row 72 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=36, expected 36
 % @PAP adding 37 rows, 171 nz to LP
DEBUG BB: Processing node 5, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 5 LP 2 Solution, length = 27214294.977947, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 1.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.016959 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.033917 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.016959 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.033917 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.033917 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.033917 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.016959 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.016959 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 0.983041 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 0.966083 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 0.966083 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.966083 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 1.000000 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 0.983041 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 0.983041 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.966083 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.966083 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 0.983041 (terminal 19)
 % 8 fractional variables
DEBUG CG: LP optimal, z=27214294.977947, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27214294.977947, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 5 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 5
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=1.000000
DEBUG CAREFUL: Skipping var 2: xi+FUZZ=1.000001 >= 1.0
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.016959
DEBUG CAREFUL: Adding var 18 to fractional list (xi=0.016959)
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.033917
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.033917)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.016959
DEBUG CAREFUL: Adding var 22 to fractional list (xi=0.016959)
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.033917
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.033917)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.000000
DEBUG CAREFUL: Skipping var 27: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.033917
DEBUG CAREFUL: Adding var 28 to fractional list (xi=0.033917)
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.033917
DEBUG CAREFUL: Adding var 35 to fractional list (xi=0.033917)
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.016959
DEBUG CAREFUL: Adding var 38 to fractional list (xi=0.016959)
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.016959
DEBUG CAREFUL: Adding var 39 to fractional list (xi=0.016959)
DEBUG CAREFUL: Found 8 fractional variables

  %  Carefully choosing branching variable, nfrac = 8
DEBUG CAREFUL: Testing fvar[0] = var 18
DEBUG CAREFUL: Calling compare_branch_vars for var 18
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 18
DEBUG CAREFUL: New best var: 18
DEBUG CAREFUL: Testing fvar[1] = var 22
DEBUG CAREFUL: Calling compare_branch_vars for var 22
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 22
DEBUG CAREFUL: Testing fvar[2] = var 39
DEBUG CAREFUL: Calling compare_branch_vars for var 39
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 39
DEBUG CAREFUL: Testing fvar[3] = var 38
DEBUG CAREFUL: Calling compare_branch_vars for var 38
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 38
DEBUG CAREFUL: Testing fvar[4] = var 35
DEBUG CAREFUL: Calling compare_branch_vars for var 35
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 35
DEBUG CAREFUL: Testing fvar[5] = var 28
DEBUG CAREFUL: Calling compare_branch_vars for var 28
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 28
DEBUG CAREFUL: Testing fvar[6] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 25
DEBUG CAREFUL: Testing fvar[7] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
  % Initial guess is x18, Z0 = 27214294.977947         , Z1 = 31486885.3554081        

DEBUG EVAL: Testing var 18 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=1, varin=40, theta=0.115545, up=1.000000
DEBUG EVAL: Branch var 18 = 0 gives z=27217081.621064
  % 	x18 = 0,	Z0 = 27217081.621064         
DEBUG EVAL: First branch cutoff check: z=27217081.621064, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 18 = 1
ITER 1: row=1, varin=83, theta=-13.724165, up=1.000000
ITER 2: row=1, varin=37, theta=2.981966, up=999999999999999983222784.000000
ITER 3: row=3, varin=35, theta=2.149841, up=999999999999999983222784.000000
ITER 4: row=26, varin=34, theta=2.636076, up=999999999999999983222784.000000
ITER 5: row=18, varin=30, theta=2.400252, up=999999999999999983222784.000000
ITER 6: row=2, varin=33, theta=1.980679, up=999999999999999983222784.000000
ITER 7: row=14, varin=40, theta=2.154072, up=1.000000
ITER 8: row=14, varin=19, theta=6.304776, up=999999999999999983222784.000000
ITER 9: row=17, varin=4, theta=4.634433, up=999999999999999983222784.000000
ITER 10: row=4, varin=76, theta=36.838286, up=1.000000
  % 	x18 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: Second branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=1, varin=40, theta=0.115545, up=1.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=37)
DEBUG SOLUTION: LP solution array indices: FST[38-77], not_covered[78-97]
DEBUG SOLUTION: lp->best_solution[0] = 27217081.621064
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 2.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 2.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 37 rows, 60 cols, 231 nonzeros, 0 slack, 37 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 5 at  27.21708162106401474034
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x563ae8f40ea0
% @LO 0.01  27.21429497794693475043 99.9000000000
% @LN 0.01  27.21708162106401474034 99.9000000000
% Resuming node 5 at  27.21708162106401474034
DEBUG CONSTRNT: LP rows=37, pool->nlprows=37, pool->npend=0
DEBUG CONSTRNT: Checking 37 LP rows (pool tracks 37, total LP rows 37)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 134
DEBUG CONSTRNT: Pool row 134 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 52
DEBUG CONSTRNT: Pool row 52 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 51
DEBUG CONSTRNT: Pool row 51 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 31
DEBUG CONSTRNT: Pool row 31 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 72
DEBUG CONSTRNT: Pool row 72 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=36, expected 36
 % @PAP adding 37 rows, 171 nz to LP
DEBUG BB: Processing node 5, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 5 LP 3 Solution, length = 27217081.621064, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.884455 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.115545 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.115545 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.115545 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.115545 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.115545 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.115545 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 0.884455 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 0.884455 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.884455 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 1.000000 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.115545 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.884455 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.884455 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 6 fractional variables
DEBUG CG: LP optimal, z=27217081.621064, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27217081.621064, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 5 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 5
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.884455
DEBUG CAREFUL: Adding var 2 to fractional list (xi=0.884455)
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.115545
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.115545)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.115545
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.115545)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.000000
DEBUG CAREFUL: Skipping var 27: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.115545
DEBUG CAREFUL: Adding var 28 to fractional list (xi=0.115545)
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.115545
DEBUG CAREFUL: Adding var 31 to fractional list (xi=0.115545)
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.115545
DEBUG CAREFUL: Adding var 35 to fractional list (xi=0.115545)
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 6 fractional variables

  %  Carefully choosing branching variable, nfrac = 6
DEBUG CAREFUL: Testing fvar[0] = var 2
DEBUG CAREFUL: Calling compare_branch_vars for var 2
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 2
DEBUG CAREFUL: New best var: 2
DEBUG CAREFUL: Testing fvar[1] = var 28
DEBUG CAREFUL: Calling compare_branch_vars for var 28
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 28
DEBUG CAREFUL: Testing fvar[2] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 25
DEBUG CAREFUL: Testing fvar[3] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
DEBUG CAREFUL: Testing fvar[4] = var 31
DEBUG CAREFUL: Calling compare_branch_vars for var 31
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 31
DEBUG CAREFUL: New best var: 31
DEBUG CAREFUL: Testing fvar[5] = var 35
DEBUG CAREFUL: Calling compare_branch_vars for var 35
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 35
DEBUG CAREFUL: New best var: 35
  % Initial guess is x35, Z0 = 27217081.621064         , Z1 = 27557572.375845         

DEBUG EVAL: Testing var 2 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=1, varin=83, theta=0.236756, up=1.000000
ITER 2: row=20, varin=31, theta=0.028445, up=999999999999999983222784.000000
ITER 3: row=36, varin=35, theta=0.113804, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 2 = 1 gives z=27313847.279487
  % 	x2 = 1,	Z1 = 27313847.2794869        
DEBUG EVAL: First branch cutoff check: z=27313847.279487, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 2 = 0
ITER 1: row=1, varin=37, theta=0.393772, up=999999999999999983222784.000000
ITER 2: row=33, varin=35, theta=0.427125, up=999999999999999983222784.000000
ITER 3: row=35, varin=34, theta=0.979208, up=999999999999999983222784.000000
  % 	x2 = 0,	Z0 = 27356499.973407         
DEBUG EVAL: Second branch cutoff check: z=27356499.973407, best_z=INF, threshold=INF
  %   New best:  x2, Z = 27313847.2794869        
DEBUG EVAL: Testing var 28 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=17, varin=83, theta=0.116944, up=1.000000
ITER 2: row=12, varin=31, theta=0.055390, up=999999999999999983222784.000000
ITER 3: row=7, varin=27, theta=0.040816, up=999999999999999983222784.000000
ITER 4: row=36, varin=84, theta=0.155123, up=1.000000
DEBUG EVAL: Branch var 28 = 0 gives z=27254419.471678
  % 	x28 = 0,	Z0 = 27254419.4716783        
DEBUG EVAL: First branch cutoff check: z=27254419.471678, best_z=INF, threshold=INF
DEBUG EVAL: Testing var 25 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=14, varin=34, theta=0.979208, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 25 = 1 gives z=27356499.973407
  % 	x25 = 1,	Z1 = 27356499.973407         
DEBUG EVAL: First branch cutoff check: z=27356499.973407, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 25 = 0
ITER 1: row=14, varin=83, theta=0.116944, up=1.000000
ITER 2: row=12, varin=31, theta=0.055390, up=999999999999999983222784.000000
ITER 3: row=36, varin=92, theta=0.535631, up=1.000000
  % 	x25 = 0,	Z0 = 27260188.7558419        
DEBUG EVAL: Second branch cutoff check: z=27260188.755842, best_z=INF, threshold=INF
DEBUG EVAL: Testing var 21 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=5, varin=34, theta=0.979208, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 21 = 1 gives z=27356499.973407
  % 	x21 = 1,	Z1 = 27356499.973407         
DEBUG EVAL: First branch cutoff check: z=27356499.973407, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 21 = 0
ITER 1: row=5, varin=83, theta=0.116944, up=1.000000
ITER 2: row=12, varin=31, theta=0.055390, up=999999999999999983222784.000000
ITER 3: row=36, varin=92, theta=0.535631, up=1.000000
  % 	x21 = 0,	Z0 = 27260188.7558419        
DEBUG EVAL: Second branch cutoff check: z=27260188.755842, best_z=INF, threshold=INF
DEBUG EVAL: Testing var 31 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=18, varin=37, theta=0.393772, up=999999999999999983222784.000000
ITER 2: row=33, varin=35, theta=0.427125, up=999999999999999983222784.000000
ITER 3: row=35, varin=34, theta=0.979208, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 31 = 1 gives z=27356499.973407
  % 	x31 = 1,	Z1 = 27356499.973407         
DEBUG EVAL: First branch cutoff check: z=27356499.973407, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 31 = 0
ITER 1: row=18, varin=83, theta=0.236756, up=1.000000
ITER 2: row=20, varin=31, theta=0.028445, up=999999999999999983222784.000000
ITER 3: row=36, varin=35, theta=0.113804, up=999999999999999983222784.000000
  % 	x31 = 0,	Z0 = 27313847.2794869        
DEBUG EVAL: Second branch cutoff check: z=27313847.279487, best_z=INF, threshold=INF
  %   New best:  x31, Z = 27313847.2794869        
DEBUG EVAL: Testing var 35 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=20, varin=37, theta=0.709772, up=999999999999999983222784.000000
ITER 2: row=1, varin=30, theta=2.759263, up=999999999999999983222784.000000
ITER 3: row=2, varin=27, theta=3.466538, up=999999999999999983222784.000000
ITER 4: row=27, varin=4, theta=2.286297, up=999999999999999983222784.000000
ITER 5: row=4, varin=18, theta=1.921080, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 35 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x35 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=20, varin=83, theta=0.116944, up=1.000000
ITER 2: row=12, varin=31, theta=0.055390, up=999999999999999983222784.000000
ITER 3: row=36, varin=92, theta=0.535631, up=1.000000
LP PHASE: Switching to primal (iter=3)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=37)
DEBUG SOLUTION: LP solution array indices: FST[38-77], not_covered[78-97]
DEBUG SOLUTION: lp->best_solution[0] = 27260188.755842
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 0.464369
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.464369
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 2.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 37 rows, 60 cols, 231 nonzeros, 2 slack, 35 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 2 slack rows
   % @PAP adding 2 rows, 12 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=36, varin=80, theta=0.111199, up=1.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=37)
DEBUG SOLUTION: LP solution array indices: FST[38-77], not_covered[78-97]
DEBUG SOLUTION: lp->best_solution[0] = 27267399.330575
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 2.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 0.000000
   % @PL 37 rows, 60 cols, 238 nonzeros, 1 slack, 36 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 1 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 5 at  27.26739933057523046500
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x563ae8f40ea0
% @LO 0.01  27.21708162106401474034 99.9000000000
% @LN 0.01  27.26739933057523046500 99.9000000000
% Resuming node 5 at  27.26739933057523046500
DEBUG CONSTRNT: LP rows=36, pool->nlprows=36, pool->npend=0
DEBUG CONSTRNT: Checking 36 LP rows (pool tracks 36, total LP rows 36)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 134
DEBUG CONSTRNT: Pool row 134 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 52
DEBUG CONSTRNT: Pool row 52 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 51
DEBUG CONSTRNT: Pool row 51 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 31
DEBUG CONSTRNT: Pool row 31 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 72
DEBUG CONSTRNT: Pool row 72 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=35, expected 35
 % @PAP adding 36 rows, 176 nz to LP
DEBUG BB: Processing node 5, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 5 LP 4 Solution, length = 27267399.330575, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.888801 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.000000 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.111199 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.111199 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.000000 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.111199 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.111199 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.111199 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 0.888801 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 0.888801 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 0.888801 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.111199 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 1.000000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 1.000000 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 0.888801 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 1.000000 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.111199 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 0.888801 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 1.000000 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 1.000000 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 6 fractional variables
DEBUG CG: LP optimal, z=27267399.330575, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27267399.330575, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 5 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 5
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.888801
DEBUG CAREFUL: Adding var 2 to fractional list (xi=0.888801)
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.000000
DEBUG CAREFUL: Skipping var 21: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.111199
DEBUG CAREFUL: Adding var 23 to fractional list (xi=0.111199)
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.111199
DEBUG CAREFUL: Adding var 24 to fractional list (xi=0.111199)
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.000000
DEBUG CAREFUL: Skipping var 25: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.000000
DEBUG CAREFUL: Skipping var 27: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.111199
DEBUG CAREFUL: Adding var 29 to fractional list (xi=0.111199)
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.111199
DEBUG CAREFUL: Adding var 31 to fractional list (xi=0.111199)
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.111199
DEBUG CAREFUL: Adding var 33 to fractional list (xi=0.111199)
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 6 fractional variables

  %  Carefully choosing branching variable, nfrac = 6
DEBUG CAREFUL: Testing fvar[0] = var 29
DEBUG CAREFUL: Calling compare_branch_vars for var 29
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 29
DEBUG CAREFUL: New best var: 29
DEBUG CAREFUL: Testing fvar[1] = var 24
DEBUG CAREFUL: Calling compare_branch_vars for var 24
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 24
DEBUG CAREFUL: Testing fvar[2] = var 23
DEBUG CAREFUL: Calling compare_branch_vars for var 23
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 23
DEBUG CAREFUL: New best var: 23
DEBUG CAREFUL: Testing fvar[3] = var 33
DEBUG CAREFUL: Calling compare_branch_vars for var 33
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 33
DEBUG CAREFUL: Testing fvar[4] = var 2
DEBUG CAREFUL: Calling compare_branch_vars for var 2
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 2
DEBUG CAREFUL: New best var: 2
DEBUG CAREFUL: Testing fvar[5] = var 31
DEBUG CAREFUL: Calling compare_branch_vars for var 31
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 31
DEBUG CAREFUL: New best var: 31
  % Initial guess is x31, Z0 = 27313847.2794869        , Z1 = 27356499.973407         

DEBUG EVAL: Testing var 29 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=4, varin=35, theta=4.281241, up=999999999999999983222784.000000
ITER 2: row=8, varin=33, theta=0.442729, up=999999999999999983222784.000000
ITER 3: row=7, varin=27, theta=0.928508, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 29 = 1 gives z=27638944.157579
  % 	x29 = 1,	Z1 = 27638944.157579         
DEBUG EVAL: First branch cutoff check: z=27638944.157579, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 29 = 0
ITER 1: row=4, varin=15, theta=43227.000000, up=999999999999999983222784.000000
  % 	x29 = 0,	Z0 = 27281773.0569529        
DEBUG EVAL: Second branch cutoff check: z=27281773.056953, best_z=INF, threshold=INF
DEBUG EVAL: Testing var 24 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=2, varin=15, theta=43227.000000, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 24 = 0 gives z=27281773.056953
  % 	x24 = 0,	Z0 = 27281773.056953         
DEBUG EVAL: First branch cutoff check: z=27281773.056953, best_z=INF, threshold=INF
DEBUG EVAL: Testing var 23 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=5, varin=35, theta=4.281241, up=999999999999999983222784.000000
ITER 2: row=8, varin=33, theta=0.442729, up=999999999999999983222784.000000
ITER 3: row=3, varin=3, theta=0.762319, up=999999999999999983222784.000000
ITER 4: row=32, varin=10, theta=0.467362, up=999999999999999983222784.000000
ITER 5: row=9, varin=32, theta=0.862539, up=999999999999999983222784.000000
ITER 6: row=33, varin=11, theta=0.836960, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 23 = 1 gives z=28075832.805467
  % 	x23 = 1,	Z1 = 28075832.8054667        
DEBUG EVAL: First branch cutoff check: z=28075832.805467, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 23 = 0
ITER 1: row=5, varin=15, theta=43227.000000, up=999999999999999983222784.000000
  % 	x23 = 0,	Z0 = 27281773.056953         
DEBUG EVAL: Second branch cutoff check: z=27281773.056953, best_z=INF, threshold=INF
DEBUG EVAL: Testing var 33 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=15, varin=35, theta=4.281241, up=999999999999999983222784.000000
ITER 2: row=8, varin=33, theta=0.442729, up=999999999999999983222784.000000
ITER 3: row=1, varin=2, theta=2.509982, up=999999999999999983222784.000000
ITER 4: row=2, varin=11, theta=3.337696, up=999999999999999983222784.000000
ITER 5: row=5, varin=24, theta=2.177587, up=999999999999999983222784.000000
ITER 6: row=18, varin=4, theta=2.018460, up=999999999999999983222784.000000
ITER 7: row=4, varin=16, theta=0.855770, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 33 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x33 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=15, varin=15, theta=43227.000000, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=36)
DEBUG SOLUTION: LP solution array indices: FST[37-76], not_covered[77-96]
DEBUG SOLUTION: lp->best_solution[0] = 27281773.056953
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 2.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 0.000000
   % @PL 36 rows, 60 cols, 236 nonzeros, 1 slack, 35 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 1 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 5 at  27.28177305695297505395
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x563ae8f40ea0
% @LO 0.01  27.26739933057523046500 99.9000000000
% @LN 0.01  27.28177305695297505395 99.9000000000
% Resuming node 5 at  27.28177305695297505395
DEBUG CONSTRNT: LP rows=35, pool->nlprows=35, pool->npend=0
DEBUG CONSTRNT: Checking 35 LP rows (pool tracks 35, total LP rows 35)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 134
DEBUG CONSTRNT: Pool row 134 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 52
DEBUG CONSTRNT: Pool row 52 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 51
DEBUG CONSTRNT: Pool row 51 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 31
DEBUG CONSTRNT: Pool row 31 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 72
DEBUG CONSTRNT: Pool row 72 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=34, expected 34
 % @PAP adding 35 rows, 136 nz to LP
DEBUG BB: Processing node 5, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 5 LP 5 Solution, length = 27281773.056953, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 1.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.000000 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.000000 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 1.000000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 1.000000 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 1.000000 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 1.000000 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 1.000000 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 0 fractional variables
DEBUG CG: LP optimal, z=27281773.056953, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG IFS: Budget mode - accepting integer solution with 1 edges covering 3 vertices
DEBUG CG: integer_feasible_solution returned: TRUE
DEBUG CG: Solution is integer feasible, returning LB_INTEGRAL
DEBUG BB: compute_good_lower_bound returned status=3
DEBUG BB: Node 5 is INTEGRAL (integer solution found)
 %  	=== 2 nodes cut off ===
 % @UO 0.01   1.78177305695297572008 -1431.1586933303
 % @UN 0.01   1.78177305695297572008 -1431.1586933303
DEBUG BB: Calling heuristic UB for integer solution, current best_z=1781773.056953
DEBUG BB: Heuristic did not improve integer solution
 % *     5     0  1781773.0570  1781773.0570                 x32 D     3     3
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=(nil)
DEBUG BB: No more nodes to process, exiting

 % Certificate of solution:
 % @C	.4767008182741058	.2081993675729823
%%Page: 1 1
BeginPlot
	Plot_Terminals
 % fs2: 13 0 6
	13 T	.4767008182741058	.2081993675729823	S
	.4767008182741058	.2081993675729823	0 T	S
	.4767008182741058	.2081993675729823	6 T	S
  (Euclidean SMT:  20 points,  length = 1.781773056952975,  0.01 seconds)
EndPlot

% @0 Euclidean SMT
% N M Nodes LPs P1CPU P2CPU TotCPU
% @1 20 40 5 30 0.00 0.01 0.01
% Z RootZ %Gap RootLPs RootCPU RedMST
% @2 1.781773056952975 26016523.875997 -1360.14801 1 0.00 43.0156
% InitPRows InitPNZ InitLPRows InitLPNZ
% @3 163 594 135 555
% RootPRows RootPNZ RootLPRows RootLPNZ
% @4 163 594 89 389
% FinalPRows FinalPNZ FinalLPRows FinalLPNZ
% @5 163 594 35 196
% SMTFSTs SMTAvgFSTSz SMTMaxFSTSz #2FSTs #3FSTs ... #10FSTS #>10FSTs
% @6 1 3.000000 3 0 1 0 0 0 0 0 0 0 0
