 % ./bb
 % Args:
DEBUG P1READ: Terminal 0 battery=100.00
DEBUG P1READ: Terminal 1 battery=84.60
DEBUG P1READ: Terminal 2 battery=73.70
DEBUG P1READ: Terminal 3 battery=87.50
DEBUG P1READ: Terminal 4 battery=75.30
DEBUG P1READ: Terminal 5 battery=29.50
DEBUG P1READ: Terminal 6 battery=34.60
DEBUG P1READ: Terminal 7 battery=45.20
DEBUG P1READ: Terminal 8 battery=60.90
DEBUG P1READ: Terminal 9 battery=48.10
DEBUG P1READ: Terminal 10 battery=32.20
DEBUG P1READ: Terminal 11 battery=0.00
DEBUG P1READ: Terminal 12 battery=65.00
DEBUG P1READ: Terminal 13 battery=11.90
DEBUG P1READ: Terminal 14 battery=72.30
DEBUG P1READ: Terminal 15 battery=88.60
DEBUG P1READ: Terminal 16 battery=50.00
DEBUG P1READ: Terminal 17 battery=48.60
DEBUG P1READ: Terminal 18 battery=23.20
DEBUG P1READ: Terminal 19 battery=69.60
DEBUG HG: num_verts=20, num_edges=40
 % Phase 1: 0.00 seconds

%%BeginSetup

0 1 0 1 SetAxes

20 DefineTerminals
	.4588350000000000	.2373240000000000	DT
	.1270640000000000	.3509960000000000	DT
	.1544540000000000	.4808220000000000	DT
	.9474030000000000	.1441120000000000	DT
	.2867390000000000	.0565890000000000	DT
	.1326890000000000	.1166050000000000	DT
	.6273950000000000	.2122140000000000	DT
	.0794880000000000	.7970990000000000	DT
	.0327480000000000	.8803250000000000	DT
	.3110550000000000	.8689670000000000	DT
	.0916180000000000	.0221720000000000	DT
	.3600710000000000	.6382240000000000	DT
	.7197120000000000	.7181670000000000	DT
	.4424420000000000	.1450340000000000	DT
	.9983770000000000	.5729870000000000	DT
	.9654920000000000	.1935700000000000	DT
	.1600100000000000	.4187950000000000	DT
	.2909450000000000	.9620800000000000	DT
	.3330000000000000	.9414120000000000	DT
	.9512590000000000	.5074670000000000	DT

%%EndSetup

DEBUG ALGO: num_verts=20 <= 8? NO, num_edges=40 <= 12? NO
DEBUG ALGO: Forcing BRANCH-AND-CUT for multi-objective optimization (vertices=20 > 1)
DEBUG SPANNING: Adding modified spanning constraint for budget mode
DEBUG SPANNING: Added modified spanning constraint: Σ(|FST|-1)*x + Σnot_covered = 19
DEBUG CONSTRAINT: Adding soft cutset constraints with not_covered variables
DEBUG CONSTRAINT: Added constraint x[2] + not_covered[0] ≤ 1 for terminal 0
DEBUG CONSTRAINT: Added constraint x[27] + not_covered[0] ≤ 1 for terminal 0
DEBUG CONSTRAINT: Added constraint x[31] + not_covered[0] ≤ 1 for terminal 0
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 3·not_covered[0] ≤ 3 for terminal 0
DEBUG CONSTRAINT: Added constraint x[0] + not_covered[1] ≤ 1 for terminal 1
DEBUG CONSTRAINT: Added constraint x[24] + not_covered[1] ≤ 1 for terminal 1
DEBUG CONSTRAINT: Added constraint x[33] + not_covered[1] ≤ 1 for terminal 1
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 3·not_covered[1] ≤ 3 for terminal 1
DEBUG CONSTRAINT: Added constraint x[5] + not_covered[2] ≤ 1 for terminal 2
DEBUG CONSTRAINT: Added constraint x[7] + not_covered[2] ≤ 1 for terminal 2
DEBUG CONSTRAINT: Added constraint x[16] + not_covered[2] ≤ 1 for terminal 2
DEBUG CONSTRAINT: Added constraint x[23] + not_covered[2] ≤ 1 for terminal 2
DEBUG CONSTRAINT: Added constraint x[36] + not_covered[2] ≤ 1 for terminal 2
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 5·not_covered[2] ≤ 5 for terminal 2
DEBUG CONSTRAINT: Added constraint x[3] + not_covered[3] ≤ 1 for terminal 3
DEBUG CONSTRAINT: Added constraint x[4] + not_covered[3] ≤ 1 for terminal 3
DEBUG CONSTRAINT: Added constraint x[17] + not_covered[3] ≤ 1 for terminal 3
DEBUG CONSTRAINT: Added constraint x[20] + not_covered[3] ≤ 1 for terminal 3
DEBUG CONSTRAINT: Added constraint x[22] + not_covered[3] ≤ 1 for terminal 3
DEBUG CONSTRAINT: Added constraint x[39] + not_covered[3] ≤ 1 for terminal 3
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 6·not_covered[3] ≤ 6 for terminal 3
DEBUG CONSTRAINT: Added constraint x[0] + not_covered[4] ≤ 1 for terminal 4
DEBUG CONSTRAINT: Added constraint x[1] + not_covered[4] ≤ 1 for terminal 4
DEBUG CONSTRAINT: Added constraint x[30] + not_covered[4] ≤ 1 for terminal 4
DEBUG CONSTRAINT: Added constraint x[32] + not_covered[4] ≤ 1 for terminal 4
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 4·not_covered[4] ≤ 4 for terminal 4
DEBUG CONSTRAINT: Added constraint x[0] + not_covered[5] ≤ 1 for terminal 5
DEBUG CONSTRAINT: Added constraint x[1] + not_covered[5] ≤ 1 for terminal 5
DEBUG CONSTRAINT: Added constraint x[29] + not_covered[5] ≤ 1 for terminal 5
DEBUG CONSTRAINT: Added constraint x[30] + not_covered[5] ≤ 1 for terminal 5
DEBUG CONSTRAINT: Added constraint x[33] + not_covered[5] ≤ 1 for terminal 5
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 5·not_covered[5] ≤ 5 for terminal 5
DEBUG CONSTRAINT: Added constraint x[2] + not_covered[6] ≤ 1 for terminal 6
DEBUG CONSTRAINT: Added constraint x[3] + not_covered[6] ≤ 1 for terminal 6
DEBUG CONSTRAINT: Added constraint x[4] + not_covered[6] ≤ 1 for terminal 6
DEBUG CONSTRAINT: Added constraint x[11] + not_covered[6] ≤ 1 for terminal 6
DEBUG CONSTRAINT: Added constraint x[17] + not_covered[6] ≤ 1 for terminal 6
DEBUG CONSTRAINT: Added constraint x[18] + not_covered[6] ≤ 1 for terminal 6
DEBUG CONSTRAINT: Added constraint x[20] + not_covered[6] ≤ 1 for terminal 6
DEBUG CONSTRAINT: Added constraint x[31] + not_covered[6] ≤ 1 for terminal 6
DEBUG CONSTRAINT: Added constraint x[39] + not_covered[6] ≤ 1 for terminal 6
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 9·not_covered[6] ≤ 9 for terminal 6
DEBUG CONSTRAINT: Added constraint x[5] + not_covered[7] ≤ 1 for terminal 7
DEBUG CONSTRAINT: Added constraint x[6] + not_covered[7] ≤ 1 for terminal 7
DEBUG CONSTRAINT: Added constraint x[8] + not_covered[7] ≤ 1 for terminal 7
DEBUG CONSTRAINT: Added constraint x[13] + not_covered[7] ≤ 1 for terminal 7
DEBUG CONSTRAINT: Added constraint x[14] + not_covered[7] ≤ 1 for terminal 7
DEBUG CONSTRAINT: Added constraint x[15] + not_covered[7] ≤ 1 for terminal 7
DEBUG CONSTRAINT: Added constraint x[16] + not_covered[7] ≤ 1 for terminal 7
DEBUG CONSTRAINT: Added constraint x[19] + not_covered[7] ≤ 1 for terminal 7
DEBUG CONSTRAINT: Added constraint x[28] + not_covered[7] ≤ 1 for terminal 7
DEBUG CONSTRAINT: Added constraint x[35] + not_covered[7] ≤ 1 for terminal 7
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 10·not_covered[7] ≤ 10 for terminal 7
DEBUG CONSTRAINT: Added constraint x[6] + not_covered[8] ≤ 1 for terminal 8
DEBUG CONSTRAINT: Added constraint x[13] + not_covered[8] ≤ 1 for terminal 8
DEBUG CONSTRAINT: Added constraint x[14] + not_covered[8] ≤ 1 for terminal 8
DEBUG CONSTRAINT: Added constraint x[19] + not_covered[8] ≤ 1 for terminal 8
DEBUG CONSTRAINT: Added constraint x[28] + not_covered[8] ≤ 1 for terminal 8
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 5·not_covered[8] ≤ 5 for terminal 8
DEBUG CONSTRAINT: Added constraint x[6] + not_covered[9] ≤ 1 for terminal 9
DEBUG CONSTRAINT: Added constraint x[7] + not_covered[9] ≤ 1 for terminal 9
DEBUG CONSTRAINT: Added constraint x[8] + not_covered[9] ≤ 1 for terminal 9
DEBUG CONSTRAINT: Added constraint x[9] + not_covered[9] ≤ 1 for terminal 9
DEBUG CONSTRAINT: Added constraint x[12] + not_covered[9] ≤ 1 for terminal 9
DEBUG CONSTRAINT: Added constraint x[13] + not_covered[9] ≤ 1 for terminal 9
DEBUG CONSTRAINT: Added constraint x[14] + not_covered[9] ≤ 1 for terminal 9
DEBUG CONSTRAINT: Added constraint x[15] + not_covered[9] ≤ 1 for terminal 9
DEBUG CONSTRAINT: Added constraint x[16] + not_covered[9] ≤ 1 for terminal 9
DEBUG CONSTRAINT: Added constraint x[19] + not_covered[9] ≤ 1 for terminal 9
DEBUG CONSTRAINT: Added constraint x[25] + not_covered[9] ≤ 1 for terminal 9
DEBUG CONSTRAINT: Added constraint x[34] + not_covered[9] ≤ 1 for terminal 9
DEBUG CONSTRAINT: Added constraint x[35] + not_covered[9] ≤ 1 for terminal 9
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 13·not_covered[9] ≤ 13 for terminal 9
DEBUG CONSTRAINT: Added constraint x[1] + not_covered[10] ≤ 1 for terminal 10
DEBUG CONSTRAINT: Added constraint x[29] + not_covered[10] ≤ 1 for terminal 10
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 2·not_covered[10] ≤ 2 for terminal 10
DEBUG CONSTRAINT: Added constraint x[5] + not_covered[11] ≤ 1 for terminal 11
DEBUG CONSTRAINT: Added constraint x[7] + not_covered[11] ≤ 1 for terminal 11
DEBUG CONSTRAINT: Added constraint x[8] + not_covered[11] ≤ 1 for terminal 11
DEBUG CONSTRAINT: Added constraint x[9] + not_covered[11] ≤ 1 for terminal 11
DEBUG CONSTRAINT: Added constraint x[13] + not_covered[11] ≤ 1 for terminal 11
DEBUG CONSTRAINT: Added constraint x[16] + not_covered[11] ≤ 1 for terminal 11
DEBUG CONSTRAINT: Added constraint x[34] + not_covered[11] ≤ 1 for terminal 11
DEBUG CONSTRAINT: Added constraint x[36] + not_covered[11] ≤ 1 for terminal 11
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 8·not_covered[11] ≤ 8 for terminal 11
DEBUG CONSTRAINT: Added constraint x[9] + not_covered[12] ≤ 1 for terminal 12
DEBUG CONSTRAINT: Added constraint x[10] + not_covered[12] ≤ 1 for terminal 12
DEBUG CONSTRAINT: Added constraint x[18] + not_covered[12] ≤ 1 for terminal 12
DEBUG CONSTRAINT: Added constraint x[20] + not_covered[12] ≤ 1 for terminal 12
DEBUG CONSTRAINT: Added constraint x[37] + not_covered[12] ≤ 1 for terminal 12
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 5·not_covered[12] ≤ 5 for terminal 12
DEBUG CONSTRAINT: Added constraint x[2] + not_covered[13] ≤ 1 for terminal 13
DEBUG CONSTRAINT: Added constraint x[27] + not_covered[13] ≤ 1 for terminal 13
DEBUG CONSTRAINT: Added constraint x[32] + not_covered[13] ≤ 1 for terminal 13
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 3·not_covered[13] ≤ 3 for terminal 13
DEBUG CONSTRAINT: Added constraint x[10] + not_covered[14] ≤ 1 for terminal 14
DEBUG CONSTRAINT: Added constraint x[26] + not_covered[14] ≤ 1 for terminal 14
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 2·not_covered[14] ≤ 2 for terminal 14
DEBUG CONSTRAINT: Added constraint x[3] + not_covered[15] ≤ 1 for terminal 15
DEBUG CONSTRAINT: Added constraint x[11] + not_covered[15] ≤ 1 for terminal 15
DEBUG CONSTRAINT: Added constraint x[17] + not_covered[15] ≤ 1 for terminal 15
DEBUG CONSTRAINT: Added constraint x[18] + not_covered[15] ≤ 1 for terminal 15
DEBUG CONSTRAINT: Added constraint x[20] + not_covered[15] ≤ 1 for terminal 15
DEBUG CONSTRAINT: Added constraint x[22] + not_covered[15] ≤ 1 for terminal 15
DEBUG CONSTRAINT: Added constraint x[38] + not_covered[15] ≤ 1 for terminal 15
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 7·not_covered[15] ≤ 7 for terminal 15
DEBUG CONSTRAINT: Added constraint x[23] + not_covered[16] ≤ 1 for terminal 16
DEBUG CONSTRAINT: Added constraint x[24] + not_covered[16] ≤ 1 for terminal 16
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 2·not_covered[16] ≤ 2 for terminal 16
DEBUG CONSTRAINT: Added constraint x[12] + not_covered[17] ≤ 1 for terminal 17
DEBUG CONSTRAINT: Added constraint x[15] + not_covered[17] ≤ 1 for terminal 17
DEBUG CONSTRAINT: Added constraint x[19] + not_covered[17] ≤ 1 for terminal 17
DEBUG CONSTRAINT: Added constraint x[21] + not_covered[17] ≤ 1 for terminal 17
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 4·not_covered[17] ≤ 4 for terminal 17
DEBUG CONSTRAINT: Added constraint x[12] + not_covered[18] ≤ 1 for terminal 18
DEBUG CONSTRAINT: Added constraint x[14] + not_covered[18] ≤ 1 for terminal 18
DEBUG CONSTRAINT: Added constraint x[15] + not_covered[18] ≤ 1 for terminal 18
DEBUG CONSTRAINT: Added constraint x[19] + not_covered[18] ≤ 1 for terminal 18
DEBUG CONSTRAINT: Added constraint x[21] + not_covered[18] ≤ 1 for terminal 18
DEBUG CONSTRAINT: Added constraint x[25] + not_covered[18] ≤ 1 for terminal 18
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 6·not_covered[18] ≤ 6 for terminal 18
DEBUG CONSTRAINT: Added constraint x[4] + not_covered[19] ≤ 1 for terminal 19
DEBUG CONSTRAINT: Added constraint x[10] + not_covered[19] ≤ 1 for terminal 19
DEBUG CONSTRAINT: Added constraint x[11] + not_covered[19] ≤ 1 for terminal 19
DEBUG CONSTRAINT: Added constraint x[17] + not_covered[19] ≤ 1 for terminal 19
DEBUG CONSTRAINT: Added constraint x[18] + not_covered[19] ≤ 1 for terminal 19
DEBUG CONSTRAINT: Added constraint x[20] + not_covered[19] ≤ 1 for terminal 19
DEBUG CONSTRAINT: Added constraint x[26] + not_covered[19] ≤ 1 for terminal 19
DEBUG CONSTRAINT: Added constraint x[37] + not_covered[19] ≤ 1 for terminal 19
DEBUG CONSTRAINT: Added constraint x[38] + not_covered[19] ≤ 1 for terminal 19
DEBUG CONSTRAINT: Added constraint Σx[FSTs] + 9·not_covered[19] ≤ 9 for terminal 19
DEBUG CONSTRAINT: Added source terminal constraint: not_covered[0] = 0
DEBUG BUDGET: Adding budget constraint ≤ 150000.000 to constraint pool
DEBUG BUDGET: Using raw tree costs directly
DEBUG BUDGET: Budget limit: 150000.000
DEBUG BUDGET: Building raw cost constraint coefficients:
DEBUG BUDGET:   x[0] coefficient = 398991 (raw=398991.100)
DEBUG BUDGET:   x[1] coefficient = 260889 (raw=260889.712)
DEBUG BUDGET:   x[2] coefficient = 256773 (raw=256773.057)
DEBUG BUDGET:   x[3] coefficient = 376541 (raw=376541.557)
DEBUG BUDGET:   x[4] coefficient = 646084 (raw=646084.462)
DEBUG BUDGET:   x[5] coefficient = 520973 (raw=520973.020)
DEBUG BUDGET:   x[6] coefficient = 334575 (raw=334575.182)
DEBUG BUDGET:   x[7] coefficient = 494448 (raw=494448.457)
DEBUG BUDGET:   x[8] coefficient = 455905 (raw=455905.519)
DEBUG BUDGET:   x[9] coefficient = 584020 (raw=584020.499)
DEBUG BUDGET:   x[10] coefficient = 380918 (raw=380918.244)
DEBUG BUDGET:   x[11] coefficient = 621357 (raw=621357.781)
DEBUG BUDGET:   x[12] coefficient = 120675 (raw=120675.719)
DEBUG BUDGET:   x[13] coefficient = 551354 (raw=551354.477)
DEBUG BUDGET:   x[14] coefficient = 410262 (raw=410262.679)
DEBUG BUDGET:   x[15] coefficient = 362962 (raw=362962.653)
DEBUG BUDGET:   x[16] coefficient = 702244 (raw=702244.403)
DEBUG BUDGET:   x[17] coefficient = 673894 (raw=673894.542)
DEBUG BUDGET:   x[18] coefficient = 933994 (raw=933994.022)
DEBUG BUDGET:   x[19] coefficient = 454199 (raw=454199.906)
DEBUG BUDGET:   x[20] coefficient = 986439 (raw=986439.144)
DEBUG BUDGET:   x[21] coefficient = 46859 (raw=46859.249)
DEBUG BUDGET:   x[22] coefficient = 52662 (raw=52662.185)
DEBUG BUDGET:   x[23] coefficient = 62275 (raw=62275.339)
DEBUG BUDGET:   x[24] coefficient = 75379 (raw=75379.993)
DEBUG BUDGET:   x[25] coefficient = 75695 (raw=75695.846)
DEBUG BUDGET:   x[26] coefficient = 80703 (raw=80703.013)
DEBUG BUDGET:   x[27] coefficient = 93734 (raw=93734.596)
DEBUG BUDGET:   x[28] coefficient = 95452 (raw=95452.578)
DEBUG BUDGET:   x[29] coefficient = 102977 (raw=102977.757)
DEBUG BUDGET:   x[30] coefficient = 165327 (raw=165327.925)
DEBUG BUDGET:   x[31] coefficient = 170420 (raw=170420.027)
DEBUG BUDGET:   x[32] coefficient = 179069 (raw=179069.657)
DEBUG BUDGET:   x[33] coefficient = 234458 (raw=234458.486)
DEBUG BUDGET:   x[34] coefficient = 235891 (raw=235891.713)
DEBUG BUDGET:   x[35] coefficient = 242462 (raw=242462.956)
DEBUG BUDGET:   x[36] coefficient = 258947 (raw=258947.370)
DEBUG BUDGET:   x[37] coefficient = 313063 (raw=313063.098)
DEBUG BUDGET:   x[38] coefficient = 314219 (raw=314219.517)
DEBUG BUDGET:   x[39] coefficient = 327174 (raw=327174.269)
DEBUG BUDGET: Constraint: Σ tree_cost[i] * x[i] ≤ 150000
DEBUG BUDGET: Budget constraint added to pool with 40 FSTs
DEBUG CONSTRAINT: Adding 'at least one FST' constraint: Σ x[i] ≥ 1
DEBUG CONSTRAINT: Added 'at least one FST' constraint: Σ x[i] ≥ 1
 % _gst_initialize_constraint_pool: 0.00 seconds.
 % Constraint pool initialized with:
 % 	1	Total degree rows	40	coeffs.
 % 	20	Cutset rows		111	coeffs.
 % 	0	Incompatibility rows	0	coeffs.
 % 	29	2-terminal SEC rows	102	coeffs.
 % 	1	At least one FST rows	40	coeffs.
 % 	163	Total rows in pool	135	in LP
 % @PMEM 163 rows, 1 blocks, 415 nzfree, 0 nzwasted, 1172 nztotal
DEBUG SOFT: Found 20 terminals, 40 FSTs
DEBUG SOFT: Adding space for 20 not_covered variables in soft constraints, total ncoeff=514
DEBUG LP_SETUP: Created LP with 0 rows, 60 columns (nedges=40 + nterms=20)
DEBUG SOFT: Set bounds for 40 FST vars [1-40] and 20 coverage vars [41-60]
DEBUG OBJ: Using raw costs - alpha=10000.0 (battery weight), beta=1500000 (coverage penalty)
DEBUG OBJ: Allocated rowvec[0-60] for ncols=60 LP variables
DEBUG OBJ: Full_trees battery_score=0.000 for FST 0
DEBUG OBJ: Recalculating for FST 0 with 3 terminals
DEBUG OBJ: Terminal 0 (idx 5): battery=29.50, running_total=29.50
DEBUG OBJ: Terminal 1 (idx 1): battery=84.60, running_total=114.10
DEBUG OBJ: Terminal 2 (idx 4): battery=75.30, running_total=189.40
DEBUG OBJ: Recalculated battery_score=189.400 for FST 0
DEBUG OBJ: FST 0: tree_cost=398991.100, battery_cost=189.400 (weighted=1894000.0), combined=2292991.1
DEBUG OBJ: Full_trees battery_score=0.000 for FST 1
DEBUG OBJ: Recalculating for FST 1 with 3 terminals
DEBUG OBJ: Terminal 0 (idx 10): battery=32.20, running_total=32.20
DEBUG OBJ: Terminal 1 (idx 5): battery=29.50, running_total=61.70
DEBUG OBJ: Terminal 2 (idx 4): battery=75.30, running_total=137.00
DEBUG OBJ: Recalculated battery_score=137.000 for FST 1
DEBUG OBJ: FST 1: tree_cost=260889.712, battery_cost=137.000 (weighted=1370000.0), combined=1630889.7
DEBUG OBJ: Full_trees battery_score=0.000 for FST 2
DEBUG OBJ: Recalculating for FST 2 with 3 terminals
DEBUG OBJ: Terminal 0 (idx 13): battery=11.90, running_total=11.90
DEBUG OBJ: Terminal 1 (idx 0): battery=100.00, running_total=111.90
DEBUG OBJ: Terminal 2 (idx 6): battery=34.60, running_total=146.50
DEBUG OBJ: Recalculated battery_score=146.500 for FST 2
DEBUG OBJ: FST 2: tree_cost=256773.057, battery_cost=146.500 (weighted=1465000.0), combined=1721773.1
DEBUG OBJ: Full_trees battery_score=0.000 for FST 3
DEBUG OBJ: Recalculating for FST 3 with 3 terminals
DEBUG OBJ: Terminal 0 (idx 15): battery=88.60, running_total=88.60
DEBUG OBJ: Terminal 1 (idx 3): battery=87.50, running_total=176.10
DEBUG OBJ: Terminal 2 (idx 6): battery=34.60, running_total=210.70
DEBUG OBJ: Recalculated battery_score=210.700 for FST 3
DEBUG OBJ: FST 3: tree_cost=376541.557, battery_cost=210.700 (weighted=2107000.0), combined=2483541.6
DEBUG OBJ: Full_trees battery_score=0.000 for FST 4
DEBUG OBJ: Recalculating for FST 4 with 3 terminals
DEBUG OBJ: Terminal 0 (idx 19): battery=69.60, running_total=69.60
DEBUG OBJ: Terminal 1 (idx 3): battery=87.50, running_total=157.10
DEBUG OBJ: Terminal 2 (idx 6): battery=34.60, running_total=191.70
DEBUG OBJ: Recalculated battery_score=191.700 for FST 4
DEBUG OBJ: FST 4: tree_cost=646084.462, battery_cost=191.700 (weighted=1917000.0), combined=2563084.5
DEBUG OBJ: Full_trees battery_score=0.000 for FST 5
DEBUG OBJ: Recalculating for FST 5 with 3 terminals
DEBUG OBJ: Terminal 0 (idx 11): battery=0.00, running_total=0.00
DEBUG OBJ: Terminal 1 (idx 2): battery=73.70, running_total=73.70
DEBUG OBJ: Terminal 2 (idx 7): battery=45.20, running_total=118.90
DEBUG OBJ: Recalculated battery_score=118.900 for FST 5
DEBUG OBJ: FST 5: tree_cost=520973.020, battery_cost=118.900 (weighted=1189000.0), combined=1709973.0
DEBUG OBJ: Full_trees battery_score=0.000 for FST 6
DEBUG OBJ: Recalculating for FST 6 with 3 terminals
DEBUG OBJ: Terminal 0 (idx 9): battery=48.10, running_total=48.10
DEBUG OBJ: Terminal 1 (idx 7): battery=45.20, running_total=93.30
DEBUG OBJ: Terminal 2 (idx 8): battery=60.90, running_total=154.20
DEBUG OBJ: Recalculated battery_score=154.200 for FST 6
DEBUG OBJ: FST 6: tree_cost=334575.182, battery_cost=154.200 (weighted=1542000.0), combined=1876575.2
DEBUG OBJ: Full_trees battery_score=0.000 for FST 7
DEBUG OBJ: Recalculating for FST 7 with 3 terminals
DEBUG OBJ: Terminal 0 (idx 11): battery=0.00, running_total=0.00
DEBUG OBJ: Terminal 1 (idx 2): battery=73.70, running_total=73.70
DEBUG OBJ: Terminal 2 (idx 9): battery=48.10, running_total=121.80
DEBUG OBJ: Recalculated battery_score=121.800 for FST 7
DEBUG OBJ: FST 7: tree_cost=494448.457, battery_cost=121.800 (weighted=1218000.0), combined=1712448.5
DEBUG OBJ: Full_trees battery_score=0.000 for FST 8
DEBUG OBJ: Recalculating for FST 8 with 3 terminals
DEBUG OBJ: Terminal 0 (idx 11): battery=0.00, running_total=0.00
DEBUG OBJ: Terminal 1 (idx 7): battery=45.20, running_total=45.20
DEBUG OBJ: Terminal 2 (idx 9): battery=48.10, running_total=93.30
DEBUG OBJ: Recalculated battery_score=93.300 for FST 8
DEBUG OBJ: FST 8: tree_cost=455905.519, battery_cost=93.300 (weighted=933000.0), combined=1388905.5
DEBUG OBJ: Full_trees battery_score=0.000 for FST 9
DEBUG OBJ: Recalculating for FST 9 with 3 terminals
DEBUG OBJ: Terminal 0 (idx 12): battery=65.00, running_total=65.00
DEBUG OBJ: Terminal 1 (idx 11): battery=0.00, running_total=65.00
DEBUG OBJ: Terminal 2 (idx 9): battery=48.10, running_total=113.10
DEBUG OBJ: Recalculated battery_score=113.100 for FST 9
DEBUG OBJ: FST 9: tree_cost=584020.499, battery_cost=113.100 (weighted=1131000.0), combined=1715020.5
DEBUG OBJ: Full_trees battery_score=0.000 for FST 10
DEBUG OBJ: Recalculating for FST 10 with 3 terminals
DEBUG OBJ: Terminal 0 (idx 19): battery=69.60, running_total=69.60
DEBUG OBJ: Terminal 1 (idx 12): battery=65.00, running_total=134.60
DEBUG OBJ: Terminal 2 (idx 14): battery=72.30, running_total=206.90
DEBUG OBJ: Recalculated battery_score=206.900 for FST 10
DEBUG OBJ: FST 10: tree_cost=380918.244, battery_cost=206.900 (weighted=2069000.0), combined=2449918.2
DEBUG OBJ: Full_trees battery_score=0.000 for FST 11
DEBUG OBJ: Recalculating for FST 11 with 3 terminals
DEBUG OBJ: Terminal 0 (idx 19): battery=69.60, running_total=69.60
DEBUG OBJ: Terminal 1 (idx 15): battery=88.60, running_total=158.20
DEBUG OBJ: Terminal 2 (idx 6): battery=34.60, running_total=192.80
DEBUG OBJ: Recalculated battery_score=192.800 for FST 11
DEBUG OBJ: FST 11: tree_cost=621357.781, battery_cost=192.800 (weighted=1928000.0), combined=2549357.8
DEBUG OBJ: Full_trees battery_score=0.000 for FST 12
DEBUG OBJ: Recalculating for FST 12 with 3 terminals
DEBUG OBJ: Terminal 0 (idx 18): battery=23.20, running_total=23.20
DEBUG OBJ: Terminal 1 (idx 9): battery=48.10, running_total=71.30
DEBUG OBJ: Terminal 2 (idx 17): battery=48.60, running_total=119.90
DEBUG OBJ: Recalculated battery_score=119.900 for FST 12
DEBUG OBJ: FST 12: tree_cost=120675.719, battery_cost=119.900 (weighted=1199000.0), combined=1319675.7
DEBUG OBJ: Full_trees battery_score=0.000 for FST 13
DEBUG OBJ: Recalculating for FST 13 with 4 terminals
DEBUG OBJ: Terminal 0 (idx 11): battery=0.00, running_total=0.00
DEBUG OBJ: Terminal 1 (idx 7): battery=45.20, running_total=45.20
DEBUG OBJ: Terminal 2 (idx 8): battery=60.90, running_total=106.10
DEBUG OBJ: Terminal 3 (idx 9): battery=48.10, running_total=154.20
DEBUG OBJ: Recalculated battery_score=154.200 for FST 13
DEBUG OBJ: FST 13: tree_cost=551354.477, battery_cost=154.200 (weighted=1542000.0), combined=2093354.5
DEBUG OBJ: Full_trees battery_score=0.000 for FST 14
DEBUG OBJ: Recalculating for FST 14 with 4 terminals
DEBUG OBJ: Terminal 0 (idx 18): battery=23.20, running_total=23.20
DEBUG OBJ: Terminal 1 (idx 9): battery=48.10, running_total=71.30
DEBUG OBJ: Terminal 2 (idx 7): battery=45.20, running_total=116.50
DEBUG OBJ: Terminal 3 (idx 8): battery=60.90, running_total=177.40
DEBUG OBJ: Recalculated battery_score=177.400 for FST 14
DEBUG OBJ: FST 14: tree_cost=410262.679, battery_cost=177.400 (weighted=1774000.0), combined=2184262.7
DEBUG OBJ: Full_trees battery_score=0.000 for FST 15
DEBUG OBJ: Recalculating for FST 15 with 4 terminals
DEBUG OBJ: Terminal 0 (idx 18): battery=23.20, running_total=23.20
DEBUG OBJ: Terminal 1 (idx 9): battery=48.10, running_total=71.30
DEBUG OBJ: Terminal 2 (idx 7): battery=45.20, running_total=116.50
DEBUG OBJ: Terminal 3 (idx 17): battery=48.60, running_total=165.10
DEBUG OBJ: Recalculated battery_score=165.100 for FST 15
DEBUG OBJ: FST 15: tree_cost=362962.653, battery_cost=165.100 (weighted=1651000.0), combined=2013962.7
DEBUG OBJ: Full_trees battery_score=0.000 for FST 16
DEBUG OBJ: Recalculating for FST 16 with 4 terminals
DEBUG OBJ: Terminal 0 (idx 11): battery=0.00, running_total=0.00
DEBUG OBJ: Terminal 1 (idx 2): battery=73.70, running_total=73.70
DEBUG OBJ: Terminal 2 (idx 7): battery=45.20, running_total=118.90
DEBUG OBJ: Terminal 3 (idx 9): battery=48.10, running_total=167.00
DEBUG OBJ: Recalculated battery_score=167.000 for FST 16
DEBUG OBJ: FST 16: tree_cost=702244.403, battery_cost=167.000 (weighted=1670000.0), combined=2372244.4
DEBUG OBJ: Full_trees battery_score=0.000 for FST 17
DEBUG OBJ: Recalculating for FST 17 with 4 terminals
DEBUG OBJ: Terminal 0 (idx 19): battery=69.60, running_total=69.60
DEBUG OBJ: Terminal 1 (idx 15): battery=88.60, running_total=158.20
DEBUG OBJ: Terminal 2 (idx 3): battery=87.50, running_total=245.70
DEBUG OBJ: Terminal 3 (idx 6): battery=34.60, running_total=280.30
DEBUG OBJ: Recalculated battery_score=280.300 for FST 17
DEBUG OBJ: FST 17: tree_cost=673894.542, battery_cost=280.300 (weighted=2803000.0), combined=3476894.5
DEBUG OBJ: Full_trees battery_score=0.000 for FST 18
DEBUG OBJ: Recalculating for FST 18 with 4 terminals
DEBUG OBJ: Terminal 0 (idx 19): battery=69.60, running_total=69.60
DEBUG OBJ: Terminal 1 (idx 15): battery=88.60, running_total=158.20
DEBUG OBJ: Terminal 2 (idx 6): battery=34.60, running_total=192.80
DEBUG OBJ: Terminal 3 (idx 12): battery=65.00, running_total=257.80
DEBUG OBJ: Recalculated battery_score=257.800 for FST 18
DEBUG OBJ: FST 18: tree_cost=933994.022, battery_cost=257.800 (weighted=2578000.0), combined=3511994.0
DEBUG OBJ: Full_trees battery_score=0.000 for FST 19
DEBUG OBJ: Recalculating for FST 19 with 5 terminals
DEBUG OBJ: Terminal 0 (idx 18): battery=23.20, running_total=23.20
DEBUG OBJ: Terminal 1 (idx 9): battery=48.10, running_total=71.30
DEBUG OBJ: Terminal 2 (idx 7): battery=45.20, running_total=116.50
DEBUG OBJ: Terminal 3 (idx 8): battery=60.90, running_total=177.40
DEBUG OBJ: Terminal 4 (idx 17): battery=48.60, running_total=226.00
DEBUG OBJ: Recalculated battery_score=226.000 for FST 19
DEBUG OBJ: FST 19: tree_cost=454199.906, battery_cost=226.000 (weighted=2260000.0), combined=2714199.9
DEBUG OBJ: Full_trees battery_score=0.000 for FST 20
DEBUG OBJ: Recalculating for FST 20 with 5 terminals
DEBUG OBJ: Terminal 0 (idx 19): battery=69.60, running_total=69.60
DEBUG OBJ: Terminal 1 (idx 15): battery=88.60, running_total=158.20
DEBUG OBJ: Terminal 2 (idx 3): battery=87.50, running_total=245.70
DEBUG OBJ: Terminal 3 (idx 6): battery=34.60, running_total=280.30
DEBUG OBJ: Terminal 4 (idx 12): battery=65.00, running_total=345.30
DEBUG OBJ: Recalculated battery_score=345.300 for FST 20
DEBUG OBJ: FST 20: tree_cost=986439.144, battery_cost=345.300 (weighted=3453000.0), combined=4439439.1
DEBUG OBJ: Full_trees battery_score=0.000 for FST 21
DEBUG OBJ: Recalculating for FST 21 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 18): battery=23.20, running_total=23.20
DEBUG OBJ: Terminal 1 (idx 17): battery=48.60, running_total=71.80
DEBUG OBJ: Recalculated battery_score=71.800 for FST 21
DEBUG OBJ: FST 21: tree_cost=46859.249, battery_cost=71.800 (weighted=718000.0), combined=764859.2
DEBUG OBJ: Full_trees battery_score=0.000 for FST 22
DEBUG OBJ: Recalculating for FST 22 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 15): battery=88.60, running_total=88.60
DEBUG OBJ: Terminal 1 (idx 3): battery=87.50, running_total=176.10
DEBUG OBJ: Recalculated battery_score=176.100 for FST 22
DEBUG OBJ: FST 22: tree_cost=52662.185, battery_cost=176.100 (weighted=1761000.0), combined=1813662.2
DEBUG OBJ: Full_trees battery_score=0.000 for FST 23
DEBUG OBJ: Recalculating for FST 23 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 16): battery=50.00, running_total=50.00
DEBUG OBJ: Terminal 1 (idx 2): battery=73.70, running_total=123.70
DEBUG OBJ: Recalculated battery_score=123.700 for FST 23
DEBUG OBJ: FST 23: tree_cost=62275.339, battery_cost=123.700 (weighted=1237000.0), combined=1299275.3
DEBUG OBJ: Full_trees battery_score=0.000 for FST 24
DEBUG OBJ: Recalculating for FST 24 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 16): battery=50.00, running_total=50.00
DEBUG OBJ: Terminal 1 (idx 1): battery=84.60, running_total=134.60
DEBUG OBJ: Recalculated battery_score=134.600 for FST 24
DEBUG OBJ: FST 24: tree_cost=75379.993, battery_cost=134.600 (weighted=1346000.0), combined=1421380.0
DEBUG OBJ: Full_trees battery_score=0.000 for FST 25
DEBUG OBJ: Recalculating for FST 25 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 18): battery=23.20, running_total=23.20
DEBUG OBJ: Terminal 1 (idx 9): battery=48.10, running_total=71.30
DEBUG OBJ: Recalculated battery_score=71.300 for FST 25
DEBUG OBJ: FST 25: tree_cost=75695.846, battery_cost=71.300 (weighted=713000.0), combined=788695.8
DEBUG OBJ: Full_trees battery_score=0.000 for FST 26
DEBUG OBJ: Recalculating for FST 26 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 14): battery=72.30, running_total=72.30
DEBUG OBJ: Terminal 1 (idx 19): battery=69.60, running_total=141.90
DEBUG OBJ: Recalculated battery_score=141.900 for FST 26
DEBUG OBJ: FST 26: tree_cost=80703.013, battery_cost=141.900 (weighted=1419000.0), combined=1499703.0
DEBUG OBJ: Full_trees battery_score=0.000 for FST 27
DEBUG OBJ: Recalculating for FST 27 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 0): battery=100.00, running_total=100.00
DEBUG OBJ: Terminal 1 (idx 13): battery=11.90, running_total=111.90
DEBUG OBJ: Recalculated battery_score=111.900 for FST 27
DEBUG OBJ: FST 27: tree_cost=93734.596, battery_cost=111.900 (weighted=1119000.0), combined=1212734.6
DEBUG OBJ: Full_trees battery_score=0.000 for FST 28
DEBUG OBJ: Recalculating for FST 28 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 8): battery=60.90, running_total=60.90
DEBUG OBJ: Terminal 1 (idx 7): battery=45.20, running_total=106.10
DEBUG OBJ: Recalculated battery_score=106.100 for FST 28
DEBUG OBJ: FST 28: tree_cost=95452.578, battery_cost=106.100 (weighted=1061000.0), combined=1156452.6
DEBUG OBJ: Full_trees battery_score=0.000 for FST 29
DEBUG OBJ: Recalculating for FST 29 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 5): battery=29.50, running_total=29.50
DEBUG OBJ: Terminal 1 (idx 10): battery=32.20, running_total=61.70
DEBUG OBJ: Recalculated battery_score=61.700 for FST 29
DEBUG OBJ: FST 29: tree_cost=102977.757, battery_cost=61.700 (weighted=617000.0), combined=719977.8
DEBUG OBJ: Full_trees battery_score=0.000 for FST 30
DEBUG OBJ: Recalculating for FST 30 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 4): battery=75.30, running_total=75.30
DEBUG OBJ: Terminal 1 (idx 5): battery=29.50, running_total=104.80
DEBUG OBJ: Recalculated battery_score=104.800 for FST 30
DEBUG OBJ: FST 30: tree_cost=165327.925, battery_cost=104.800 (weighted=1048000.0), combined=1213327.9
DEBUG OBJ: Full_trees battery_score=0.000 for FST 31
DEBUG OBJ: Recalculating for FST 31 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 6): battery=34.60, running_total=34.60
DEBUG OBJ: Terminal 1 (idx 0): battery=100.00, running_total=134.60
DEBUG OBJ: Recalculated battery_score=134.600 for FST 31
DEBUG OBJ: FST 31: tree_cost=170420.027, battery_cost=134.600 (weighted=1346000.0), combined=1516420.0
DEBUG OBJ: Full_trees battery_score=0.000 for FST 32
DEBUG OBJ: Recalculating for FST 32 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 13): battery=11.90, running_total=11.90
DEBUG OBJ: Terminal 1 (idx 4): battery=75.30, running_total=87.20
DEBUG OBJ: Recalculated battery_score=87.200 for FST 32
DEBUG OBJ: FST 32: tree_cost=179069.657, battery_cost=87.200 (weighted=872000.0), combined=1051069.7
DEBUG OBJ: Full_trees battery_score=0.000 for FST 33
DEBUG OBJ: Recalculating for FST 33 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 5): battery=29.50, running_total=29.50
DEBUG OBJ: Terminal 1 (idx 1): battery=84.60, running_total=114.10
DEBUG OBJ: Recalculated battery_score=114.100 for FST 33
DEBUG OBJ: FST 33: tree_cost=234458.486, battery_cost=114.100 (weighted=1141000.0), combined=1375458.5
DEBUG OBJ: Full_trees battery_score=0.000 for FST 34
DEBUG OBJ: Recalculating for FST 34 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 11): battery=0.00, running_total=0.00
DEBUG OBJ: Terminal 1 (idx 9): battery=48.10, running_total=48.10
DEBUG OBJ: Recalculated battery_score=48.100 for FST 34
DEBUG OBJ: FST 34: tree_cost=235891.713, battery_cost=48.100 (weighted=481000.0), combined=716891.7
DEBUG OBJ: Full_trees battery_score=0.000 for FST 35
DEBUG OBJ: Recalculating for FST 35 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 9): battery=48.10, running_total=48.10
DEBUG OBJ: Terminal 1 (idx 7): battery=45.20, running_total=93.30
DEBUG OBJ: Recalculated battery_score=93.300 for FST 35
DEBUG OBJ: FST 35: tree_cost=242462.956, battery_cost=93.300 (weighted=933000.0), combined=1175463.0
DEBUG OBJ: Full_trees battery_score=0.000 for FST 36
DEBUG OBJ: Recalculating for FST 36 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 2): battery=73.70, running_total=73.70
DEBUG OBJ: Terminal 1 (idx 11): battery=0.00, running_total=73.70
DEBUG OBJ: Recalculated battery_score=73.700 for FST 36
DEBUG OBJ: FST 36: tree_cost=258947.370, battery_cost=73.700 (weighted=737000.0), combined=995947.4
DEBUG OBJ: Full_trees battery_score=0.000 for FST 37
DEBUG OBJ: Recalculating for FST 37 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 19): battery=69.60, running_total=69.60
DEBUG OBJ: Terminal 1 (idx 12): battery=65.00, running_total=134.60
DEBUG OBJ: Recalculated battery_score=134.600 for FST 37
DEBUG OBJ: FST 37: tree_cost=313063.098, battery_cost=134.600 (weighted=1346000.0), combined=1659063.1
DEBUG OBJ: Full_trees battery_score=0.000 for FST 38
DEBUG OBJ: Recalculating for FST 38 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 15): battery=88.60, running_total=88.60
DEBUG OBJ: Terminal 1 (idx 19): battery=69.60, running_total=158.20
DEBUG OBJ: Recalculated battery_score=158.200 for FST 38
DEBUG OBJ: FST 38: tree_cost=314219.517, battery_cost=158.200 (weighted=1582000.0), combined=1896219.5
DEBUG OBJ: Full_trees battery_score=0.000 for FST 39
DEBUG OBJ: Recalculating for FST 39 with 2 terminals
DEBUG OBJ: Terminal 0 (idx 3): battery=87.50, running_total=87.50
DEBUG OBJ: Terminal 1 (idx 6): battery=34.60, running_total=122.10
DEBUG OBJ: Recalculated battery_score=122.100 for FST 39
DEBUG OBJ: FST 39: tree_cost=327174.269, battery_cost=122.100 (weighted=1221000.0), combined=1548174.3
DEBUG OBJ: Added penalty terms beta=1500000 for 20 not_covered variables [41-60]
DEBUG LP_MATRIX: LP has 0 rows, 60 columns after setup
DEBUG EXTRA_COEFF: Calculated extra_coeff=1 for 135 rows
DEBUG SOFT: Added not_covered_0 (RC_var 43 -> matrix_idx 40) to soft constraint 134
DEBUG MATRIX_CHECK: nzi=495, ncoeff=514, extra_coeff=1, expected=515
ERROR: Matrix coefficient count mismatch! nzi=495 != ncoeff=514 + extra_coeff=1
WARNING: Allowing discrepancy in budget mode (nzi=495 vs expected=515)
DEBUG MATRIX: Total matrix has 495 entries (nzi=495)
DEBUG MATRIX: matbeg[135] = 495 (should equal nzi)
DEBUG LP: Calling add_rows with 135 rows
DEBUG LP: Before add_rows: LP has 0 rows, 60 cols, 60 nonzeros
DEBUG LP: After add_rows: LP has 135 rows, 60 cols, 555 nonzeros
DEBUG NLPROWS: nrows=135, extra_rows=0, setting nlprows=135
 % _gst_build_initial_formulation: 0.00 seconds.
DEBUG BB: Expected nlprows=135, total rows=163
DEBUG BB: Row 0 (uid=0) has lprow=0 (included, j=0)
DEBUG BB: Row 1 (uid=1) has lprow=1 (included, j=1)
DEBUG BB: Row 2 (uid=2) has lprow=2 (included, j=2)
DEBUG BB: Row 3 (uid=3) has lprow=3 (included, j=3)
DEBUG BB: Row 4 (uid=4) has lprow=4 (included, j=4)
DEBUG BB: Row 5 (uid=5) has lprow=5 (included, j=5)
DEBUG BB: Row 6 (uid=6) has lprow=6 (included, j=6)
DEBUG BB: Row 7 (uid=7) has lprow=7 (included, j=7)
DEBUG BB: Row 8 (uid=8) has lprow=8 (included, j=8)
DEBUG BB: Row 9 (uid=9) has lprow=9 (included, j=9)
DEBUG BB: Row 10 (uid=10) has lprow=10 (included, j=10)
DEBUG BB: Row 11 (uid=11) has lprow=11 (included, j=11)
DEBUG BB: Row 12 (uid=12) has lprow=12 (included, j=12)
DEBUG BB: Row 13 (uid=13) has lprow=13 (included, j=13)
DEBUG BB: Row 14 (uid=14) has lprow=14 (included, j=14)
DEBUG BB: Row 15 (uid=15) has lprow=15 (included, j=15)
DEBUG BB: Row 16 (uid=16) has lprow=16 (included, j=16)
DEBUG BB: Row 17 (uid=17) has lprow=17 (included, j=17)
DEBUG BB: Row 18 (uid=18) has lprow=18 (included, j=18)
DEBUG BB: Row 19 (uid=19) has lprow=19 (included, j=19)
DEBUG BB: Row 20 (uid=20) has lprow=20 (included, j=20)
DEBUG BB: Row 21 (uid=21) has lprow=21 (included, j=21)
DEBUG BB: Row 22 (uid=22) has lprow=22 (included, j=22)
DEBUG BB: Row 23 (uid=23) has lprow=23 (included, j=23)
DEBUG BB: Row 24 (uid=24) has lprow=24 (included, j=24)
DEBUG BB: Row 25 (uid=25) has lprow=25 (included, j=25)
DEBUG BB: Row 26 (uid=26) has lprow=26 (included, j=26)
DEBUG BB: Row 27 (uid=27) has lprow=27 (included, j=27)
DEBUG BB: Row 28 (uid=28) has lprow=28 (included, j=28)
DEBUG BB: Row 29 (uid=29) has lprow=29 (included, j=29)
DEBUG BB: Row 30 (uid=30) has lprow=30 (included, j=30)
DEBUG BB: Row 31 (uid=31) has lprow=31 (included, j=31)
DEBUG BB: Row 32 (uid=32) has lprow=32 (included, j=32)
DEBUG BB: Row 33 (uid=33) has lprow=33 (included, j=33)
DEBUG BB: Row 34 (uid=34) has lprow=34 (included, j=34)
DEBUG BB: Row 35 (uid=35) has lprow=35 (included, j=35)
DEBUG BB: Row 36 (uid=36) has lprow=36 (included, j=36)
DEBUG BB: Row 37 (uid=37) has lprow=37 (included, j=37)
DEBUG BB: Row 38 (uid=38) has lprow=38 (included, j=38)
DEBUG BB: Row 39 (uid=39) has lprow=39 (included, j=39)
DEBUG BB: Row 40 (uid=40) has lprow=40 (included, j=40)
DEBUG BB: Row 41 (uid=41) has lprow=41 (included, j=41)
DEBUG BB: Row 42 (uid=42) has lprow=42 (included, j=42)
DEBUG BB: Row 43 (uid=43) has lprow=43 (included, j=43)
DEBUG BB: Row 44 (uid=44) has lprow=44 (included, j=44)
DEBUG BB: Row 45 (uid=45) has lprow=45 (included, j=45)
DEBUG BB: Row 46 (uid=46) has lprow=46 (included, j=46)
DEBUG BB: Row 47 (uid=47) has lprow=47 (included, j=47)
DEBUG BB: Row 48 (uid=48) has lprow=48 (included, j=48)
DEBUG BB: Row 49 (uid=49) has lprow=49 (included, j=49)
DEBUG BB: Row 50 (uid=50) has lprow=50 (included, j=50)
DEBUG BB: Row 51 (uid=51) has lprow=51 (included, j=51)
DEBUG BB: Row 52 (uid=52) has lprow=52 (included, j=52)
DEBUG BB: Row 53 (uid=53) has lprow=53 (included, j=53)
DEBUG BB: Row 54 (uid=54) has lprow=54 (included, j=54)
DEBUG BB: Row 55 (uid=55) has lprow=55 (included, j=55)
DEBUG BB: Row 56 (uid=56) has lprow=56 (included, j=56)
DEBUG BB: Row 57 (uid=57) has lprow=57 (included, j=57)
DEBUG BB: Row 58 (uid=58) has lprow=58 (included, j=58)
DEBUG BB: Row 59 (uid=59) has lprow=59 (included, j=59)
DEBUG BB: Row 60 (uid=60) has lprow=60 (included, j=60)
DEBUG BB: Row 61 (uid=61) has lprow=61 (included, j=61)
DEBUG BB: Row 62 (uid=62) has lprow=62 (included, j=62)
DEBUG BB: Row 63 (uid=63) has lprow=63 (included, j=63)
DEBUG BB: Row 64 (uid=64) has lprow=64 (included, j=64)
DEBUG BB: Row 65 (uid=65) has lprow=65 (included, j=65)
DEBUG BB: Row 66 (uid=66) has lprow=66 (included, j=66)
DEBUG BB: Row 67 (uid=67) has lprow=67 (included, j=67)
DEBUG BB: Row 68 (uid=68) has lprow=68 (included, j=68)
DEBUG BB: Row 69 (uid=69) has lprow=69 (included, j=69)
DEBUG BB: Row 70 (uid=70) has lprow=70 (included, j=70)
DEBUG BB: Row 71 (uid=71) has lprow=71 (included, j=71)
DEBUG BB: Row 72 (uid=72) has lprow=72 (included, j=72)
DEBUG BB: Row 73 (uid=73) has lprow=73 (included, j=73)
DEBUG BB: Row 74 (uid=74) has lprow=74 (included, j=74)
DEBUG BB: Row 75 (uid=75) has lprow=75 (included, j=75)
DEBUG BB: Row 76 (uid=76) has lprow=76 (included, j=76)
DEBUG BB: Row 77 (uid=77) has lprow=77 (included, j=77)
DEBUG BB: Row 78 (uid=78) has lprow=78 (included, j=78)
DEBUG BB: Row 79 (uid=79) has lprow=79 (included, j=79)
DEBUG BB: Row 80 (uid=80) has lprow=80 (included, j=80)
DEBUG BB: Row 81 (uid=81) has lprow=81 (included, j=81)
DEBUG BB: Row 82 (uid=82) has lprow=82 (included, j=82)
DEBUG BB: Row 83 (uid=83) has lprow=83 (included, j=83)
DEBUG BB: Row 84 (uid=84) has lprow=84 (included, j=84)
DEBUG BB: Row 85 (uid=85) has lprow=85 (included, j=85)
DEBUG BB: Row 86 (uid=86) has lprow=86 (included, j=86)
DEBUG BB: Row 87 (uid=87) has lprow=87 (included, j=87)
DEBUG BB: Row 88 (uid=88) has lprow=88 (included, j=88)
DEBUG BB: Row 89 (uid=89) has lprow=89 (included, j=89)
DEBUG BB: Row 90 (uid=90) has lprow=90 (included, j=90)
DEBUG BB: Row 91 (uid=91) has lprow=91 (included, j=91)
DEBUG BB: Row 92 (uid=92) has lprow=92 (included, j=92)
DEBUG BB: Row 93 (uid=93) has lprow=93 (included, j=93)
DEBUG BB: Row 94 (uid=94) has lprow=94 (included, j=94)
DEBUG BB: Row 95 (uid=95) has lprow=95 (included, j=95)
DEBUG BB: Row 96 (uid=96) has lprow=96 (included, j=96)
DEBUG BB: Row 97 (uid=97) has lprow=97 (included, j=97)
DEBUG BB: Row 98 (uid=98) has lprow=98 (included, j=98)
DEBUG BB: Row 99 (uid=99) has lprow=99 (included, j=99)
DEBUG BB: Row 100 (uid=100) has lprow=100 (included, j=100)
DEBUG BB: Row 101 (uid=101) has lprow=101 (included, j=101)
DEBUG BB: Row 102 (uid=102) has lprow=102 (included, j=102)
DEBUG BB: Row 103 (uid=103) has lprow=103 (included, j=103)
DEBUG BB: Row 104 (uid=104) has lprow=104 (included, j=104)
DEBUG BB: Row 105 (uid=105) has lprow=105 (included, j=105)
DEBUG BB: Row 106 (uid=106) has lprow=106 (included, j=106)
DEBUG BB: Row 107 (uid=107) has lprow=107 (included, j=107)
DEBUG BB: Row 108 (uid=108) has lprow=108 (included, j=108)
DEBUG BB: Row 109 (uid=109) has lprow=109 (included, j=109)
DEBUG BB: Row 110 (uid=110) has lprow=110 (included, j=110)
DEBUG BB: Row 111 (uid=111) has lprow=111 (included, j=111)
DEBUG BB: Row 112 (uid=112) has lprow=112 (included, j=112)
DEBUG BB: Row 113 (uid=113) has lprow=113 (included, j=113)
DEBUG BB: Row 114 (uid=114) has lprow=114 (included, j=114)
DEBUG BB: Row 115 (uid=115) has lprow=115 (included, j=115)
DEBUG BB: Row 116 (uid=116) has lprow=116 (included, j=116)
DEBUG BB: Row 117 (uid=117) has lprow=117 (included, j=117)
DEBUG BB: Row 118 (uid=118) has lprow=118 (included, j=118)
DEBUG BB: Row 119 (uid=119) has lprow=119 (included, j=119)
DEBUG BB: Row 120 (uid=120) has lprow=120 (included, j=120)
DEBUG BB: Row 121 (uid=121) has lprow=121 (included, j=121)
DEBUG BB: Row 122 (uid=122) has lprow=122 (included, j=122)
DEBUG BB: Row 123 (uid=123) has lprow=123 (included, j=123)
DEBUG BB: Row 124 (uid=124) has lprow=124 (included, j=124)
DEBUG BB: Row 125 (uid=125) has lprow=125 (included, j=125)
DEBUG BB: Row 126 (uid=126) has lprow=126 (included, j=126)
DEBUG BB: Row 127 (uid=127) has lprow=127 (included, j=127)
DEBUG BB: Row 128 (uid=128) has lprow=128 (included, j=128)
DEBUG BB: Row 129 (uid=129) has lprow=129 (included, j=129)
DEBUG BB: Row 130 (uid=130) has lprow=130 (included, j=130)
DEBUG BB: Row 131 (uid=131) has lprow=131 (included, j=131)
DEBUG BB: Row 132 (uid=132) has lprow=132 (included, j=132)
DEBUG BB: Row 133 (uid=133) has lprow=-1 (skipped)
DEBUG BB: Row 134 (uid=134) has lprow=-1 (skipped)
DEBUG BB: Row 135 (uid=135) has lprow=-1 (skipped)
DEBUG BB: Row 136 (uid=136) has lprow=-1 (skipped)
DEBUG BB: Row 137 (uid=137) has lprow=-1 (skipped)
DEBUG BB: Row 138 (uid=138) has lprow=-1 (skipped)
DEBUG BB: Row 139 (uid=139) has lprow=-1 (skipped)
DEBUG BB: Row 140 (uid=140) has lprow=-1 (skipped)
DEBUG BB: Row 141 (uid=141) has lprow=-1 (skipped)
DEBUG BB: Row 142 (uid=142) has lprow=-1 (skipped)
DEBUG BB: Row 143 (uid=143) has lprow=-1 (skipped)
DEBUG BB: Row 144 (uid=144) has lprow=-1 (skipped)
DEBUG BB: Row 145 (uid=145) has lprow=-1 (skipped)
DEBUG BB: Row 146 (uid=146) has lprow=-1 (skipped)
DEBUG BB: Row 147 (uid=147) has lprow=-1 (skipped)
DEBUG BB: Row 148 (uid=148) has lprow=-1 (skipped)
DEBUG BB: Row 149 (uid=149) has lprow=-1 (skipped)
DEBUG BB: Row 150 (uid=150) has lprow=-1 (skipped)
DEBUG BB: Row 151 (uid=151) has lprow=-1 (skipped)
DEBUG BB: Row 152 (uid=152) has lprow=-1 (skipped)
DEBUG BB: Row 153 (uid=153) has lprow=-1 (skipped)
DEBUG BB: Row 154 (uid=154) has lprow=-1 (skipped)
DEBUG BB: Row 155 (uid=155) has lprow=-1 (skipped)
DEBUG BB: Row 156 (uid=156) has lprow=-1 (skipped)
DEBUG BB: Row 157 (uid=157) has lprow=-1 (skipped)
DEBUG BB: Row 158 (uid=158) has lprow=-1 (skipped)
DEBUG BB: Row 159 (uid=159) has lprow=-1 (skipped)
DEBUG BB: Row 160 (uid=160) has lprow=-1 (skipped)
DEBUG BB: Row 161 (uid=161) has lprow=133 (included, j=133)
DEBUG BB: Row 162 (uid=162) has lprow=134 (included, j=134)
DEBUG BB: Found 135 actual LP rows, expected 135
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x55895154f600
% Resuming node 0
DEBUG CONSTRNT: LP rows=135, pool->nlprows=135, pool->npend=0
DEBUG CONSTRNT: Checking 135 LP rows (pool tracks 135, total LP rows 135)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 1
DEBUG CONSTRNT: Pool row 1 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 2
DEBUG CONSTRNT: Pool row 2 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 3
DEBUG CONSTRNT: Pool row 3 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 4
DEBUG CONSTRNT: Pool row 4 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 8
DEBUG CONSTRNT: Pool row 8 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 9
DEBUG CONSTRNT: Pool row 9 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 11
DEBUG CONSTRNT: Pool row 11 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 14
DEBUG CONSTRNT: Pool row 14 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 22
DEBUG CONSTRNT: Pool row 22 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 24
DEBUG CONSTRNT: Pool row 24 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 26
DEBUG CONSTRNT: Pool row 26 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 27
DEBUG CONSTRNT: Pool row 27 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 28
DEBUG CONSTRNT: Pool row 28 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 30
DEBUG CONSTRNT: Pool row 30 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 31
DEBUG CONSTRNT: Pool row 31 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 32
DEBUG CONSTRNT: Pool row 32 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 34
DEBUG CONSTRNT: Pool row 34 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 35
DEBUG CONSTRNT: Pool row 35 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 36
DEBUG CONSTRNT: Pool row 36 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 37
DEBUG CONSTRNT: Pool row 37 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 38
DEBUG CONSTRNT: Pool row 38 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 39
DEBUG CONSTRNT: Pool row 39 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 40
DEBUG CONSTRNT: Pool row 40 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 41
DEBUG CONSTRNT: Pool row 41 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 42
DEBUG CONSTRNT: Pool row 42 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 44
DEBUG CONSTRNT: Pool row 44 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 45
DEBUG CONSTRNT: Pool row 45 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 46
DEBUG CONSTRNT: Pool row 46 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 47
DEBUG CONSTRNT: Pool row 47 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 48
DEBUG CONSTRNT: Pool row 48 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 49
DEBUG CONSTRNT: Pool row 49 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 50
DEBUG CONSTRNT: Pool row 50 has lprow=50, expected 50
DEBUG CONSTRNT: Checking LP row 51 -> pool row 51
DEBUG CONSTRNT: Pool row 51 has lprow=51, expected 51
DEBUG CONSTRNT: Checking LP row 52 -> pool row 52
DEBUG CONSTRNT: Pool row 52 has lprow=52, expected 52
DEBUG CONSTRNT: Checking LP row 53 -> pool row 53
DEBUG CONSTRNT: Pool row 53 has lprow=53, expected 53
DEBUG CONSTRNT: Checking LP row 54 -> pool row 54
DEBUG CONSTRNT: Pool row 54 has lprow=54, expected 54
DEBUG CONSTRNT: Checking LP row 55 -> pool row 55
DEBUG CONSTRNT: Pool row 55 has lprow=55, expected 55
DEBUG CONSTRNT: Checking LP row 56 -> pool row 56
DEBUG CONSTRNT: Pool row 56 has lprow=56, expected 56
DEBUG CONSTRNT: Checking LP row 57 -> pool row 57
DEBUG CONSTRNT: Pool row 57 has lprow=57, expected 57
DEBUG CONSTRNT: Checking LP row 58 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=58, expected 58
DEBUG CONSTRNT: Checking LP row 59 -> pool row 59
DEBUG CONSTRNT: Pool row 59 has lprow=59, expected 59
DEBUG CONSTRNT: Checking LP row 60 -> pool row 60
DEBUG CONSTRNT: Pool row 60 has lprow=60, expected 60
DEBUG CONSTRNT: Checking LP row 61 -> pool row 61
DEBUG CONSTRNT: Pool row 61 has lprow=61, expected 61
DEBUG CONSTRNT: Checking LP row 62 -> pool row 62
DEBUG CONSTRNT: Pool row 62 has lprow=62, expected 62
DEBUG CONSTRNT: Checking LP row 63 -> pool row 63
DEBUG CONSTRNT: Pool row 63 has lprow=63, expected 63
DEBUG CONSTRNT: Checking LP row 64 -> pool row 64
DEBUG CONSTRNT: Pool row 64 has lprow=64, expected 64
DEBUG CONSTRNT: Checking LP row 65 -> pool row 65
DEBUG CONSTRNT: Pool row 65 has lprow=65, expected 65
DEBUG CONSTRNT: Checking LP row 66 -> pool row 66
DEBUG CONSTRNT: Pool row 66 has lprow=66, expected 66
DEBUG CONSTRNT: Checking LP row 67 -> pool row 67
DEBUG CONSTRNT: Pool row 67 has lprow=67, expected 67
DEBUG CONSTRNT: Checking LP row 68 -> pool row 68
DEBUG CONSTRNT: Pool row 68 has lprow=68, expected 68
DEBUG CONSTRNT: Checking LP row 69 -> pool row 69
DEBUG CONSTRNT: Pool row 69 has lprow=69, expected 69
DEBUG CONSTRNT: Checking LP row 70 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=70, expected 70
DEBUG CONSTRNT: Checking LP row 71 -> pool row 71
DEBUG CONSTRNT: Pool row 71 has lprow=71, expected 71
DEBUG CONSTRNT: Checking LP row 72 -> pool row 72
DEBUG CONSTRNT: Pool row 72 has lprow=72, expected 72
DEBUG CONSTRNT: Checking LP row 73 -> pool row 73
DEBUG CONSTRNT: Pool row 73 has lprow=73, expected 73
DEBUG CONSTRNT: Checking LP row 74 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=74, expected 74
DEBUG CONSTRNT: Checking LP row 75 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=75, expected 75
DEBUG CONSTRNT: Checking LP row 76 -> pool row 76
DEBUG CONSTRNT: Pool row 76 has lprow=76, expected 76
DEBUG CONSTRNT: Checking LP row 77 -> pool row 77
DEBUG CONSTRNT: Pool row 77 has lprow=77, expected 77
DEBUG CONSTRNT: Checking LP row 78 -> pool row 78
DEBUG CONSTRNT: Pool row 78 has lprow=78, expected 78
DEBUG CONSTRNT: Checking LP row 79 -> pool row 79
DEBUG CONSTRNT: Pool row 79 has lprow=79, expected 79
DEBUG CONSTRNT: Checking LP row 80 -> pool row 80
DEBUG CONSTRNT: Pool row 80 has lprow=80, expected 80
DEBUG CONSTRNT: Checking LP row 81 -> pool row 81
DEBUG CONSTRNT: Pool row 81 has lprow=81, expected 81
DEBUG CONSTRNT: Checking LP row 82 -> pool row 82
DEBUG CONSTRNT: Pool row 82 has lprow=82, expected 82
DEBUG CONSTRNT: Checking LP row 83 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=83, expected 83
DEBUG CONSTRNT: Checking LP row 84 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=84, expected 84
DEBUG CONSTRNT: Checking LP row 85 -> pool row 85
DEBUG CONSTRNT: Pool row 85 has lprow=85, expected 85
DEBUG CONSTRNT: Checking LP row 86 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=86, expected 86
DEBUG CONSTRNT: Checking LP row 87 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=87, expected 87
DEBUG CONSTRNT: Checking LP row 88 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=88, expected 88
DEBUG CONSTRNT: Checking LP row 89 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=89, expected 89
DEBUG CONSTRNT: Checking LP row 90 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=90, expected 90
DEBUG CONSTRNT: Checking LP row 91 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=91, expected 91
DEBUG CONSTRNT: Checking LP row 92 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=92, expected 92
DEBUG CONSTRNT: Checking LP row 93 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=93, expected 93
DEBUG CONSTRNT: Checking LP row 94 -> pool row 94
DEBUG CONSTRNT: Pool row 94 has lprow=94, expected 94
DEBUG CONSTRNT: Checking LP row 95 -> pool row 95
DEBUG CONSTRNT: Pool row 95 has lprow=95, expected 95
DEBUG CONSTRNT: Checking LP row 96 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=96, expected 96
DEBUG CONSTRNT: Checking LP row 97 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=97, expected 97
DEBUG CONSTRNT: Checking LP row 98 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=98, expected 98
DEBUG CONSTRNT: Checking LP row 99 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=99, expected 99
DEBUG CONSTRNT: Checking LP row 100 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=100, expected 100
DEBUG CONSTRNT: Checking LP row 101 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=101, expected 101
DEBUG CONSTRNT: Checking LP row 102 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=102, expected 102
DEBUG CONSTRNT: Checking LP row 103 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=103, expected 103
DEBUG CONSTRNT: Checking LP row 104 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=104, expected 104
DEBUG CONSTRNT: Checking LP row 105 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=105, expected 105
DEBUG CONSTRNT: Checking LP row 106 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=106, expected 106
DEBUG CONSTRNT: Checking LP row 107 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=107, expected 107
DEBUG CONSTRNT: Checking LP row 108 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=108, expected 108
DEBUG CONSTRNT: Checking LP row 109 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=109, expected 109
DEBUG CONSTRNT: Checking LP row 110 -> pool row 110
DEBUG CONSTRNT: Pool row 110 has lprow=110, expected 110
DEBUG CONSTRNT: Checking LP row 111 -> pool row 111
DEBUG CONSTRNT: Pool row 111 has lprow=111, expected 111
DEBUG CONSTRNT: Checking LP row 112 -> pool row 112
DEBUG CONSTRNT: Pool row 112 has lprow=112, expected 112
DEBUG CONSTRNT: Checking LP row 113 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=113, expected 113
DEBUG CONSTRNT: Checking LP row 114 -> pool row 114
DEBUG CONSTRNT: Pool row 114 has lprow=114, expected 114
DEBUG CONSTRNT: Checking LP row 115 -> pool row 115
DEBUG CONSTRNT: Pool row 115 has lprow=115, expected 115
DEBUG CONSTRNT: Checking LP row 116 -> pool row 116
DEBUG CONSTRNT: Pool row 116 has lprow=116, expected 116
DEBUG CONSTRNT: Checking LP row 117 -> pool row 117
DEBUG CONSTRNT: Pool row 117 has lprow=117, expected 117
DEBUG CONSTRNT: Checking LP row 118 -> pool row 118
DEBUG CONSTRNT: Pool row 118 has lprow=118, expected 118
DEBUG CONSTRNT: Checking LP row 119 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=119, expected 119
DEBUG CONSTRNT: Checking LP row 120 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=120, expected 120
DEBUG CONSTRNT: Checking LP row 121 -> pool row 121
DEBUG CONSTRNT: Pool row 121 has lprow=121, expected 121
DEBUG CONSTRNT: Checking LP row 122 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=122, expected 122
DEBUG CONSTRNT: Checking LP row 123 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=123, expected 123
DEBUG CONSTRNT: Checking LP row 124 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=124, expected 124
DEBUG CONSTRNT: Checking LP row 125 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=125, expected 125
DEBUG CONSTRNT: Checking LP row 126 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=126, expected 126
DEBUG CONSTRNT: Checking LP row 127 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=127, expected 127
DEBUG CONSTRNT: Checking LP row 128 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=128, expected 128
DEBUG CONSTRNT: Checking LP row 129 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=129, expected 129
DEBUG CONSTRNT: Checking LP row 130 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=130, expected 130
DEBUG CONSTRNT: Checking LP row 131 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=131, expected 131
DEBUG CONSTRNT: Checking LP row 132 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=132, expected 132
DEBUG CONSTRNT: Checking LP row 133 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=133, expected 133
DEBUG CONSTRNT: Checking LP row 134 -> pool row 162
DEBUG CONSTRNT: Pool row 162 has lprow=134, expected 134
 % @PAP adding 135 rows, 494 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=1, varin=148, theta=9.500000, up=1.000000
ITER 2: row=1, varin=151, theta=5.666667, up=1.000000
ITER 3: row=1, varin=155, theta=3.500000, up=1.000000
ITER 4: row=1, varin=144, theta=5.000000, up=1.000000
ITER 5: row=1, varin=149, theta=2.666667, up=1.000000
ITER 6: row=1, varin=170, theta=5.000000, up=1.000000
ITER 7: row=1, varin=165, theta=4.000000, up=1.000000
ITER 8: row=1, varin=150, theta=1.000000, up=1.000000
ITER 9: row=134, varin=170, theta=25.663728, up=1.000000
ITER 10: row=134, varin=144, theta=13.405308, up=1.000000
LP PHASE: Switching to primal (iter=42)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=135)
DEBUG SOLUTION: LP solution array indices: FST[136-175], not_covered[176-195]
DEBUG SOLUTION: lp->best_solution[0] = 26337335.975448
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 0.000000
DEBUG SOLUTION: lp->best_solution[3] = 0.000000
DEBUG SOLUTION: lp->best_solution[4] = 0.000000
DEBUG SOLUTION: lp->best_solution[5] = 0.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 3.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
  % @PL 135 rows, 60 cols, 554 nonzeros, 26 slack, 109 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
  % @D deleting 26 slack rows
  % @PAP adding 1 rows, 4 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=110, varin=95, theta=1.794543, up=999999999999999983222784.000000
ITER 2: row=96, varin=97, theta=1.794543, up=999999999999999983222784.000000
ITER 3: row=94, varin=136, theta=0.588199, up=1.000000
LP PHASE: Switching to primal (iter=3)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=110)
DEBUG SOLUTION: LP solution array indices: FST[111-150], not_covered[151-170]
DEBUG SOLUTION: lp->best_solution[0] = 26595900.794103
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
  % @PL 110 rows, 60 cols, 446 nonzeros, 2 slack, 108 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
  % @D deleting 2 slack rows
  % @PAP adding 1 rows, 5 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=109, varin=139, theta=0.280396, up=1.000000
ITER 2: row=26, varin=155, theta=0.278690, up=1.000000
ITER 3: row=59, varin=160, theta=0.277005, up=1.000000
LP PHASE: Switching to primal (iter=3)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=109)
DEBUG SOLUTION: LP solution array indices: FST[110-149], not_covered[150-169]
DEBUG SOLUTION: lp->best_solution[0] = 26703160.530557
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
  % @PL 109 rows, 60 cols, 447 nonzeros, 7 slack, 102 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
  % @D deleting 7 slack rows
  % Node 0 LP 1 Solution, length = 26703160.530557, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.574332 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.425668 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.425668 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.277005 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 0.722995 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 1.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 1.000000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.425668 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 0.722995 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 1.000000 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 1.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.425668 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.425668 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 4 fractional variables
DEBUG CG: LP optimal, z=26703160.530557, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
 % @LO 0.00  26.70316053055652361081 99.9000000000
 % @LN 0.00  26.70316053055652361081 99.9000000000
DEBUG CG: Second cutoff check: z=26703160.530557, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 0 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 0
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.574332
DEBUG CAREFUL: Adding var 12 to fractional list (xi=0.574332)
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.425668
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.425668)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.425668
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.425668)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.000000
DEBUG CAREFUL: Skipping var 27: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.277005
DEBUG CAREFUL: Adding var 29 to fractional list (xi=0.277005)
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 4 fractional variables

  %  Carefully choosing branching variable, nfrac = 4
DEBUG CAREFUL: Testing fvar[0] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 25
DEBUG CAREFUL: New best var: 25
DEBUG CAREFUL: Testing fvar[1] = var 12
DEBUG CAREFUL: Calling compare_branch_vars for var 12
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 12
DEBUG CAREFUL: Testing fvar[2] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
DEBUG CAREFUL: Testing fvar[3] = var 29
DEBUG CAREFUL: Calling compare_branch_vars for var 29
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 29
DEBUG CAREFUL: New best var: 29
  % Initial guess is x29, Z0 = 26703160.5305565        , Z1 = 26982472.494129         

DEBUG EVAL: Testing var 25 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=100, varin=122, theta=0.155941, up=1.000000
ITER 2: row=24, varin=102, theta=0.180382, up=999999999999999983222784.000000
ITER 3: row=42, varin=150, theta=0.137654, up=1.000000
ITER 4: row=49, varin=117, theta=0.127130, up=1.000000
ITER 5: row=39, varin=151, theta=0.068619, up=1.000000
DEBUG EVAL: Branch var 25 = 0 gives z=26828627.857307
  % 	x25 = 0,	Z0 = 26828627.857307         
DEBUG EVAL: First branch cutoff check: z=26828627.857307, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 25 = 1
ITER 1: row=100, varin=52, theta=1.733474, up=999999999999999983222784.000000
ITER 2: row=87, varin=144, theta=0.733474, up=1.000000
  % 	x25 = 1,	Z1 = 26845659.2496291        
DEBUG EVAL: Second branch cutoff check: z=26845659.249629, best_z=INF, threshold=INF
  %   New best:  x25, Z = 26828627.857307         
DEBUG EVAL: Testing var 12 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=1, varin=122, theta=0.246098, up=1.000000
ITER 2: row=24, varin=104, theta=1.929130, up=1.000000
ITER 3: row=24, varin=126, theta=0.634892, up=1.000000
ITER 4: row=20, varin=104, theta=1.000000, up=1.000000
ITER 5: row=9, varin=105, theta=1.823078, up=1.000000
ITER 6: row=9, varin=131, theta=0.875729, up=1.000000
ITER 7: row=25, varin=105, theta=1.000000, up=1.000000
ITER 8: row=43, varin=130, theta=1.893471, up=1.000000
ITER 9: row=43, varin=127, theta=0.712146, up=1.000000
ITER 10: row=70, varin=130, theta=1.000000, up=1.000000
DEBUG EVAL: Branch var 12 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x12 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=1, varin=52, theta=1.733474, up=999999999999999983222784.000000
ITER 2: row=87, varin=87, theta=0.733474, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=102)
DEBUG SOLUTION: LP solution array indices: FST[103-142], not_covered[143-162]
DEBUG SOLUTION: lp->best_solution[0] = 26845659.249629
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 102 rows, 60 cols, 428 nonzeros, 2 slack, 100 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 2 slack rows
   % @PAP adding 4 rows, 13 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=104, varin=86, theta=0.333333, up=999999999999999983222784.000000
ITER 2: row=102, varin=104, theta=4.000000, up=999999999999999983222784.000000
ITER 3: row=101, varin=154, theta=1.266526, up=1.000000
ITER 4: row=101, varin=124, theta=0.036912, up=1.000000
ITER 5: row=42, varin=152, theta=0.042846, up=1.000000
ITER 6: row=49, varin=153, theta=0.051053, up=1.000000
LP PHASE: Switching to primal (iter=6)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=104)
DEBUG SOLUTION: LP solution array indices: FST[105-144], not_covered[145-164]
DEBUG SOLUTION: lp->best_solution[0] = 26880005.807407
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 104 rows, 60 cols, 437 nonzeros, 17 slack, 87 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 17 slack rows
   % @PAP adding 3 rows, 18 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=90, varin=140, theta=0.076923, up=1.000000
ITER 2: row=89, varin=90, theta=9.353165, up=999999999999999983222784.000000
ITER 3: row=37, varin=106, theta=0.411835, up=1.000000
ITER 4: row=1, varin=24, theta=0.317119, up=999999999999999983222784.000000
ITER 5: row=24, varin=83, theta=0.305308, up=999999999999999983222784.000000
ITER 6: row=87, varin=84, theta=0.178784, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=6)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=90)
DEBUG SOLUTION: LP solution array indices: FST[91-130], not_covered[131-150]
DEBUG SOLUTION: lp->best_solution[0] = 27098724.091695
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 90 rows, 60 cols, 403 nonzeros, 4 slack, 86 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 4 slack rows
   % @PAP adding 2 rows, 13 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=87, varin=108, theta=0.104900, up=1.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=88)
DEBUG SOLUTION: LP solution array indices: FST[89-128], not_covered[129-148]
DEBUG SOLUTION: lp->best_solution[0] = 27135871.734465
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 88 rows, 60 cols, 391 nonzeros, 1 slack, 87 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 1 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 0 at  27.13587173446451572545
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x55895154f600
% @LO 0.00  26.70316053055652361081 99.9000000000
% @LN 0.00  27.13587173446451572545 99.9000000000
% Resuming node 0 at  27.13587173446451572545
DEBUG CONSTRNT: LP rows=87, pool->nlprows=87, pool->npend=0
DEBUG CONSTRNT: Checking 87 LP rows (pool tracks 87, total LP rows 87)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 8
DEBUG CONSTRNT: Pool row 8 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 9
DEBUG CONSTRNT: Pool row 9 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 11
DEBUG CONSTRNT: Pool row 11 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 14
DEBUG CONSTRNT: Pool row 14 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 22
DEBUG CONSTRNT: Pool row 22 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 24
DEBUG CONSTRNT: Pool row 24 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 26
DEBUG CONSTRNT: Pool row 26 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 34
DEBUG CONSTRNT: Pool row 34 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 35
DEBUG CONSTRNT: Pool row 35 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 36
DEBUG CONSTRNT: Pool row 36 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 37
DEBUG CONSTRNT: Pool row 37 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 38
DEBUG CONSTRNT: Pool row 38 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 39
DEBUG CONSTRNT: Pool row 39 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 40
DEBUG CONSTRNT: Pool row 40 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 41
DEBUG CONSTRNT: Pool row 41 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 42
DEBUG CONSTRNT: Pool row 42 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 50
DEBUG CONSTRNT: Pool row 50 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 57
DEBUG CONSTRNT: Pool row 57 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 77
DEBUG CONSTRNT: Pool row 77 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 78
DEBUG CONSTRNT: Pool row 78 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 79
DEBUG CONSTRNT: Pool row 79 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 80
DEBUG CONSTRNT: Pool row 80 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 81
DEBUG CONSTRNT: Pool row 81 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 82
DEBUG CONSTRNT: Pool row 82 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 85
DEBUG CONSTRNT: Pool row 85 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=50, expected 50
DEBUG CONSTRNT: Checking LP row 51 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=51, expected 51
DEBUG CONSTRNT: Checking LP row 52 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=52, expected 52
DEBUG CONSTRNT: Checking LP row 53 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=53, expected 53
DEBUG CONSTRNT: Checking LP row 54 -> pool row 94
DEBUG CONSTRNT: Pool row 94 has lprow=54, expected 54
DEBUG CONSTRNT: Checking LP row 55 -> pool row 95
DEBUG CONSTRNT: Pool row 95 has lprow=55, expected 55
DEBUG CONSTRNT: Checking LP row 56 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=56, expected 56
DEBUG CONSTRNT: Checking LP row 57 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=57, expected 57
DEBUG CONSTRNT: Checking LP row 58 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=58, expected 58
DEBUG CONSTRNT: Checking LP row 59 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=59, expected 59
DEBUG CONSTRNT: Checking LP row 60 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=60, expected 60
DEBUG CONSTRNT: Checking LP row 61 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=61, expected 61
DEBUG CONSTRNT: Checking LP row 62 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=62, expected 62
DEBUG CONSTRNT: Checking LP row 63 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=63, expected 63
DEBUG CONSTRNT: Checking LP row 64 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=64, expected 64
DEBUG CONSTRNT: Checking LP row 65 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=65, expected 65
DEBUG CONSTRNT: Checking LP row 66 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=66, expected 66
DEBUG CONSTRNT: Checking LP row 67 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=67, expected 67
DEBUG CONSTRNT: Checking LP row 68 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=68, expected 68
DEBUG CONSTRNT: Checking LP row 69 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=69, expected 69
DEBUG CONSTRNT: Checking LP row 70 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=70, expected 70
DEBUG CONSTRNT: Checking LP row 71 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=71, expected 71
DEBUG CONSTRNT: Checking LP row 72 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=72, expected 72
DEBUG CONSTRNT: Checking LP row 73 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=73, expected 73
DEBUG CONSTRNT: Checking LP row 74 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=74, expected 74
DEBUG CONSTRNT: Checking LP row 75 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=75, expected 75
DEBUG CONSTRNT: Checking LP row 76 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=76, expected 76
DEBUG CONSTRNT: Checking LP row 77 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=77, expected 77
DEBUG CONSTRNT: Checking LP row 78 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=78, expected 78
DEBUG CONSTRNT: Checking LP row 79 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=79, expected 79
DEBUG CONSTRNT: Checking LP row 80 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=80, expected 80
DEBUG CONSTRNT: Checking LP row 81 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=81, expected 81
DEBUG CONSTRNT: Checking LP row 82 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=82, expected 82
DEBUG CONSTRNT: Checking LP row 83 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=83, expected 83
DEBUG CONSTRNT: Checking LP row 84 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=84, expected 84
DEBUG CONSTRNT: Checking LP row 85 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=85, expected 85
DEBUG CONSTRNT: Checking LP row 86 -> pool row 48
DEBUG CONSTRNT: Pool row 48 has lprow=86, expected 86
 % @PAP adding 87 rows, 320 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 0 LP 2 Solution, length = 27135871.734465, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.104900 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.104900 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.524501 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.524501 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 1.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 0.895100 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 0.895100 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.475499 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 1.000000 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 1.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.475499 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.475499 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 4 fractional variables
DEBUG CG: LP optimal, z=27135871.734465, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27135871.734465, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 0 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 0
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.104900
DEBUG CAREFUL: Adding var 15 to fractional list (xi=0.104900)
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.104900
DEBUG CAREFUL: Adding var 19 to fractional list (xi=0.104900)
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.524501
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.524501)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.524501
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.524501)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.000000
DEBUG CAREFUL: Skipping var 27: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 4 fractional variables

  %  Carefully choosing branching variable, nfrac = 4
DEBUG CAREFUL: Testing fvar[0] = var 19
DEBUG CAREFUL: Calling compare_branch_vars for var 19
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 19
DEBUG CAREFUL: New best var: 19
DEBUG CAREFUL: Testing fvar[1] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
DEBUG CAREFUL: Testing fvar[2] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 25
DEBUG CAREFUL: Testing fvar[3] = var 15
DEBUG CAREFUL: Calling compare_branch_vars for var 15
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 15
  % Initial guess is x19, Z0 = 27135871.7344645        , Z1 = 29361912.4212026        

DEBUG EVAL: Testing var 19 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=35, varin=87, theta=1.751833, up=999999999999999983222784.000000
ITER 2: row=1, varin=85, theta=7.256847, up=999999999999999983222784.000000
ITER 3: row=83, varin=35, theta=8.491795, up=999999999999999983222784.000000
ITER 4: row=36, varin=83, theta=8.491795, up=999999999999999983222784.000000
ITER 5: row=1, varin=84, theta=6.491795, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 19 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x19 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=35, varin=111, theta=0.811561, up=1.000000
ITER 2: row=9, varin=35, theta=0.246682, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=87)
DEBUG SOLUTION: LP solution array indices: FST[88-127], not_covered[128-147]
DEBUG SOLUTION: lp->best_solution[0] = 27173114.816584
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 87 rows, 60 cols, 380 nonzeros, 1 slack, 86 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 1 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 0 at  27.17311481658360250435
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x55895154f600
% @LO 0.00  27.13587173446451572545 99.9000000000
% @LN 0.00  27.17311481658360250435 99.9000000000
% Resuming node 0 at  27.17311481658360250435
DEBUG CONSTRNT: LP rows=86, pool->nlprows=86, pool->npend=0
DEBUG CONSTRNT: Checking 86 LP rows (pool tracks 86, total LP rows 86)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 8
DEBUG CONSTRNT: Pool row 8 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 9
DEBUG CONSTRNT: Pool row 9 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 11
DEBUG CONSTRNT: Pool row 11 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 14
DEBUG CONSTRNT: Pool row 14 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 22
DEBUG CONSTRNT: Pool row 22 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 24
DEBUG CONSTRNT: Pool row 24 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 26
DEBUG CONSTRNT: Pool row 26 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 34
DEBUG CONSTRNT: Pool row 34 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 35
DEBUG CONSTRNT: Pool row 35 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 36
DEBUG CONSTRNT: Pool row 36 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 37
DEBUG CONSTRNT: Pool row 37 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 38
DEBUG CONSTRNT: Pool row 38 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 39
DEBUG CONSTRNT: Pool row 39 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 40
DEBUG CONSTRNT: Pool row 40 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 41
DEBUG CONSTRNT: Pool row 41 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 42
DEBUG CONSTRNT: Pool row 42 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 57
DEBUG CONSTRNT: Pool row 57 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 77
DEBUG CONSTRNT: Pool row 77 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 78
DEBUG CONSTRNT: Pool row 78 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 79
DEBUG CONSTRNT: Pool row 79 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 80
DEBUG CONSTRNT: Pool row 80 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 81
DEBUG CONSTRNT: Pool row 81 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 82
DEBUG CONSTRNT: Pool row 82 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 85
DEBUG CONSTRNT: Pool row 85 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=50, expected 50
DEBUG CONSTRNT: Checking LP row 51 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=51, expected 51
DEBUG CONSTRNT: Checking LP row 52 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=52, expected 52
DEBUG CONSTRNT: Checking LP row 53 -> pool row 94
DEBUG CONSTRNT: Pool row 94 has lprow=53, expected 53
DEBUG CONSTRNT: Checking LP row 54 -> pool row 95
DEBUG CONSTRNT: Pool row 95 has lprow=54, expected 54
DEBUG CONSTRNT: Checking LP row 55 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=55, expected 55
DEBUG CONSTRNT: Checking LP row 56 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=56, expected 56
DEBUG CONSTRNT: Checking LP row 57 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=57, expected 57
DEBUG CONSTRNT: Checking LP row 58 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=58, expected 58
DEBUG CONSTRNT: Checking LP row 59 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=59, expected 59
DEBUG CONSTRNT: Checking LP row 60 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=60, expected 60
DEBUG CONSTRNT: Checking LP row 61 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=61, expected 61
DEBUG CONSTRNT: Checking LP row 62 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=62, expected 62
DEBUG CONSTRNT: Checking LP row 63 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=63, expected 63
DEBUG CONSTRNT: Checking LP row 64 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=64, expected 64
DEBUG CONSTRNT: Checking LP row 65 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=65, expected 65
DEBUG CONSTRNT: Checking LP row 66 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=66, expected 66
DEBUG CONSTRNT: Checking LP row 67 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=67, expected 67
DEBUG CONSTRNT: Checking LP row 68 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=68, expected 68
DEBUG CONSTRNT: Checking LP row 69 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=69, expected 69
DEBUG CONSTRNT: Checking LP row 70 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=70, expected 70
DEBUG CONSTRNT: Checking LP row 71 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=71, expected 71
DEBUG CONSTRNT: Checking LP row 72 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=72, expected 72
DEBUG CONSTRNT: Checking LP row 73 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=73, expected 73
DEBUG CONSTRNT: Checking LP row 74 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=74, expected 74
DEBUG CONSTRNT: Checking LP row 75 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=75, expected 75
DEBUG CONSTRNT: Checking LP row 76 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=76, expected 76
DEBUG CONSTRNT: Checking LP row 77 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=77, expected 77
DEBUG CONSTRNT: Checking LP row 78 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=78, expected 78
DEBUG CONSTRNT: Checking LP row 79 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=79, expected 79
DEBUG CONSTRNT: Checking LP row 80 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=80, expected 80
DEBUG CONSTRNT: Checking LP row 81 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=81, expected 81
DEBUG CONSTRNT: Checking LP row 82 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=82, expected 82
DEBUG CONSTRNT: Checking LP row 83 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=83, expected 83
DEBUG CONSTRNT: Checking LP row 84 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=84, expected 84
DEBUG CONSTRNT: Checking LP row 85 -> pool row 48
DEBUG CONSTRNT: Pool row 48 has lprow=85, expected 85
 % @PAP adding 86 rows, 318 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 0 LP 3 Solution, length = 27173114.816584, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.246682 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.493364 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.493364 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 1.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 0.753318 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.506636 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 1.000000 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 1.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.506636 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.506636 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 3 fractional variables
DEBUG CG: LP optimal, z=27173114.816584, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27173114.816584, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 0 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 0
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.246682
DEBUG CAREFUL: Adding var 15 to fractional list (xi=0.246682)
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.493364
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.493364)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.493364
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.493364)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.000000
DEBUG CAREFUL: Skipping var 27: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 3 fractional variables

  %  Carefully choosing branching variable, nfrac = 3
DEBUG CAREFUL: Testing fvar[0] = var 15
DEBUG CAREFUL: Calling compare_branch_vars for var 15
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 15
DEBUG CAREFUL: New best var: 15
DEBUG CAREFUL: Testing fvar[1] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 25
DEBUG CAREFUL: Testing fvar[2] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
  % Initial guess is x15, Z0 = 27173114.8165836        , Z1 = 28905780.9120003        

DEBUG EVAL: Testing var 15 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=1, varin=9, theta=2.478345, up=999999999999999983222784.000000
ITER 2: row=9, varin=84, theta=6.051523, up=999999999999999983222784.000000
ITER 3: row=85, varin=85, theta=2.502407, up=999999999999999983222784.000000
ITER 4: row=82, varin=83, theta=6.544741, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 15 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x15 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=1, varin=101, theta=0.192821, up=1.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=86)
DEBUG SOLUTION: LP solution array indices: FST[87-126], not_covered[127-146]
DEBUG SOLUTION: lp->best_solution[0] = 27216763.070103
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 86 rows, 60 cols, 378 nonzeros, 0 slack, 86 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @PAP adding 4 rows, 21 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=87, varin=92, theta=0.296444, up=1.000000
ITER 2: row=20, varin=93, theta=0.298876, up=1.000000
ITER 3: row=25, varin=119, theta=0.688054, up=1.000000
ITER 4: row=88, varin=86, theta=0.057308, up=999999999999999983222784.000000
ITER 5: row=90, varin=118, theta=0.693520, up=1.000000
ITER 6: row=53, varin=88, theta=3.429638, up=999999999999999983222784.000000
ITER 7: row=25, varin=35, theta=0.047554, up=999999999999999983222784.000000
ITER 8: row=89, varin=119, theta=0.427095, up=1.000000
LP PHASE: Switching to primal (iter=8)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=90)
DEBUG SOLUTION: LP solution array indices: FST[91-130], not_covered[131-150]
DEBUG SOLUTION: lp->best_solution[0] = 27333801.194399
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 90 rows, 60 cols, 399 nonzeros, 3 slack, 87 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 3 slack rows
   % @PAP adding 2 rows, 4 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=89, varin=114, theta=0.757832, up=1.000000
ITER 2: row=3, varin=119, theta=1.456636, up=1.000000
ITER 3: row=3, varin=87, theta=0.187886, up=999999999999999983222784.000000
ITER 4: row=24, varin=119, theta=1.000000, up=1.000000
LP PHASE: Switching to primal (iter=4)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=89)
DEBUG SOLUTION: LP solution array indices: FST[90-129], not_covered[130-149]
DEBUG SOLUTION: lp->best_solution[0] = 27390780.793610
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 89 rows, 60 cols, 388 nonzeros, 1 slack, 88 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 1 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 0 at  27.39078079360968587253
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x55895154f600
% @LO 0.00  27.17311481658360250435 99.9000000000
% @LN 0.00  27.39078079360968587253 99.9000000000
% Resuming node 0 at  27.39078079360968587253
DEBUG CONSTRNT: LP rows=88, pool->nlprows=88, pool->npend=0
DEBUG CONSTRNT: Checking 88 LP rows (pool tracks 88, total LP rows 88)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 8
DEBUG CONSTRNT: Pool row 8 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 9
DEBUG CONSTRNT: Pool row 9 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 11
DEBUG CONSTRNT: Pool row 11 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 14
DEBUG CONSTRNT: Pool row 14 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 22
DEBUG CONSTRNT: Pool row 22 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 24
DEBUG CONSTRNT: Pool row 24 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 26
DEBUG CONSTRNT: Pool row 26 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 34
DEBUG CONSTRNT: Pool row 34 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 35
DEBUG CONSTRNT: Pool row 35 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 36
DEBUG CONSTRNT: Pool row 36 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 37
DEBUG CONSTRNT: Pool row 37 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 38
DEBUG CONSTRNT: Pool row 38 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 39
DEBUG CONSTRNT: Pool row 39 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 40
DEBUG CONSTRNT: Pool row 40 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 41
DEBUG CONSTRNT: Pool row 41 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 42
DEBUG CONSTRNT: Pool row 42 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 77
DEBUG CONSTRNT: Pool row 77 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 78
DEBUG CONSTRNT: Pool row 78 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 79
DEBUG CONSTRNT: Pool row 79 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 80
DEBUG CONSTRNT: Pool row 80 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 81
DEBUG CONSTRNT: Pool row 81 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 82
DEBUG CONSTRNT: Pool row 82 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 85
DEBUG CONSTRNT: Pool row 85 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=50, expected 50
DEBUG CONSTRNT: Checking LP row 51 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=51, expected 51
DEBUG CONSTRNT: Checking LP row 52 -> pool row 94
DEBUG CONSTRNT: Pool row 94 has lprow=52, expected 52
DEBUG CONSTRNT: Checking LP row 53 -> pool row 95
DEBUG CONSTRNT: Pool row 95 has lprow=53, expected 53
DEBUG CONSTRNT: Checking LP row 54 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=54, expected 54
DEBUG CONSTRNT: Checking LP row 55 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=55, expected 55
DEBUG CONSTRNT: Checking LP row 56 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=56, expected 56
DEBUG CONSTRNT: Checking LP row 57 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=57, expected 57
DEBUG CONSTRNT: Checking LP row 58 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=58, expected 58
DEBUG CONSTRNT: Checking LP row 59 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=59, expected 59
DEBUG CONSTRNT: Checking LP row 60 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=60, expected 60
DEBUG CONSTRNT: Checking LP row 61 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=61, expected 61
DEBUG CONSTRNT: Checking LP row 62 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=62, expected 62
DEBUG CONSTRNT: Checking LP row 63 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=63, expected 63
DEBUG CONSTRNT: Checking LP row 64 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=64, expected 64
DEBUG CONSTRNT: Checking LP row 65 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=65, expected 65
DEBUG CONSTRNT: Checking LP row 66 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=66, expected 66
DEBUG CONSTRNT: Checking LP row 67 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=67, expected 67
DEBUG CONSTRNT: Checking LP row 68 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=68, expected 68
DEBUG CONSTRNT: Checking LP row 69 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=69, expected 69
DEBUG CONSTRNT: Checking LP row 70 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=70, expected 70
DEBUG CONSTRNT: Checking LP row 71 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=71, expected 71
DEBUG CONSTRNT: Checking LP row 72 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=72, expected 72
DEBUG CONSTRNT: Checking LP row 73 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=73, expected 73
DEBUG CONSTRNT: Checking LP row 74 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=74, expected 74
DEBUG CONSTRNT: Checking LP row 75 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=75, expected 75
DEBUG CONSTRNT: Checking LP row 76 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=76, expected 76
DEBUG CONSTRNT: Checking LP row 77 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=77, expected 77
DEBUG CONSTRNT: Checking LP row 78 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=78, expected 78
DEBUG CONSTRNT: Checking LP row 79 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=79, expected 79
DEBUG CONSTRNT: Checking LP row 80 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=80, expected 80
DEBUG CONSTRNT: Checking LP row 81 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=81, expected 81
DEBUG CONSTRNT: Checking LP row 82 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=82, expected 82
DEBUG CONSTRNT: Checking LP row 83 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=83, expected 83
DEBUG CONSTRNT: Checking LP row 84 -> pool row 47
DEBUG CONSTRNT: Pool row 47 has lprow=84, expected 84
DEBUG CONSTRNT: Checking LP row 85 -> pool row 56
DEBUG CONSTRNT: Pool row 56 has lprow=85, expected 85
DEBUG CONSTRNT: Checking LP row 86 -> pool row 51
DEBUG CONSTRNT: Pool row 51 has lprow=86, expected 86
DEBUG CONSTRNT: Checking LP row 87 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=87, expected 87
 % @PAP adding 88 rows, 322 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 0 LP 4 Solution, length = 27390780.793610, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.199781 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.399562 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.399562 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.199781 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 1.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 0.800219 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 0.800219 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.600438 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 1.000000 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 1.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.600438 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.600438 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 4 fractional variables
DEBUG CG: LP optimal, z=27390780.793610, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27390780.793610, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 0 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 0
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.199781
DEBUG CAREFUL: Adding var 14 to fractional list (xi=0.199781)
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.399562
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.399562)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.399562
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.399562)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.000000
DEBUG CAREFUL: Skipping var 27: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.199781
DEBUG CAREFUL: Adding var 28 to fractional list (xi=0.199781)
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 4 fractional variables

  %  Carefully choosing branching variable, nfrac = 4
DEBUG CAREFUL: Testing fvar[0] = var 14
DEBUG CAREFUL: Calling compare_branch_vars for var 14
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 14
DEBUG CAREFUL: New best var: 14
DEBUG CAREFUL: Testing fvar[1] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 25
DEBUG CAREFUL: Testing fvar[2] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
DEBUG CAREFUL: Testing fvar[3] = var 28
DEBUG CAREFUL: Calling compare_branch_vars for var 28
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 28
  % Initial guess is x14, Z0 = 27390780.7936097        , Z1 = 29758040.9929205        

DEBUG EVAL: Testing var 14 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=1, varin=24, theta=5.834526, up=999999999999999983222784.000000
ITER 2: row=24, varin=3, theta=3.035482, up=999999999999999983222784.000000
ITER 3: row=3, varin=52, theta=2.777879, up=999999999999999983222784.000000
ITER 4: row=52, varin=88, theta=2.755988, up=999999999999999983222784.000000
ITER 5: row=83, varin=25, theta=0.762762, up=999999999999999983222784.000000
ITER 6: row=25, varin=20, theta=0.756558, up=999999999999999983222784.000000
ITER 7: row=20, varin=9, theta=2.071190, up=999999999999999983222784.000000
ITER 8: row=9, varin=83, theta=5.057349, up=999999999999999983222784.000000
ITER 9: row=84, varin=84, theta=2.506006, up=999999999999999983222784.000000
ITER 10: row=81, varin=78, theta=58.987366, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 14 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x14 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=1, varin=133, theta=0.391192, up=1.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=88)
DEBUG SOLUTION: LP solution array indices: FST[89-128], not_covered[129-148]
DEBUG SOLUTION: lp->best_solution[0] = 27398576.114470
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 88 rows, 60 cols, 382 nonzeros, 4 slack, 84 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 4 slack rows
   % @PAP adding 4 rows, 13 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=85, varin=102, theta=0.163218, up=1.000000
ITER 2: row=36, varin=135, theta=0.395437, up=1.000000
ITER 3: row=47, varin=95, theta=0.258762, up=1.000000
LP PHASE: Switching to primal (iter=3)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=88)
DEBUG SOLUTION: LP solution array indices: FST[89-128], not_covered[129-148]
DEBUG SOLUTION: lp->best_solution[0] = 27460729.926147
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 88 rows, 60 cols, 384 nonzeros, 0 slack, 88 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @PAP adding 4 rows, 21 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=89, varin=144, theta=0.188333, up=1.000000
ITER 2: row=90, varin=81, theta=0.019671, up=999999999999999983222784.000000
ITER 3: row=92, varin=82, theta=0.048206, up=999999999999999983222784.000000
ITER 4: row=83, varin=115, theta=0.856086, up=1.000000
ITER 5: row=16, varin=84, theta=0.022053, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=5)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=92)
DEBUG SOLUTION: LP solution array indices: FST[93-132], not_covered[133-152]
DEBUG SOLUTION: lp->best_solution[0] = 27532673.304145
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 92 rows, 60 cols, 405 nonzeros, 12 slack, 80 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 12 slack rows
   % @PAP adding 3 rows, 44 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=81, varin=92, theta=0.166530, up=1.000000
ITER 2: row=82, varin=81, theta=0.011962, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=83)
DEBUG SOLUTION: LP solution array indices: FST[84-123], not_covered[124-143]
DEBUG SOLUTION: lp->best_solution[0] = 27541428.400457
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 83 rows, 60 cols, 418 nonzeros, 2 slack, 81 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 2 slack rows
   % @PAP adding 5 rows, 17 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=85, varin=140, theta=0.317084, up=1.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=86)
DEBUG SOLUTION: LP solution array indices: FST[87-126], not_covered[127-146]
DEBUG SOLUTION: lp->best_solution[0] = 27544963.360418
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 86 rows, 60 cols, 393 nonzeros, 11 slack, 75 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 11 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 0 at  27.54496336041784587678
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x55895154f600
% @LO 0.00  27.39078079360968587253 99.9000000000
% @LN 0.00  27.54496336041784587678 99.9000000000
% Resuming node 0 at  27.54496336041784587678
DEBUG CONSTRNT: LP rows=75, pool->nlprows=75, pool->npend=0
DEBUG CONSTRNT: Checking 75 LP rows (pool tracks 75, total LP rows 75)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 8
DEBUG CONSTRNT: Pool row 8 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 9
DEBUG CONSTRNT: Pool row 9 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 11
DEBUG CONSTRNT: Pool row 11 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 14
DEBUG CONSTRNT: Pool row 14 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 81
DEBUG CONSTRNT: Pool row 81 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=50, expected 50
DEBUG CONSTRNT: Checking LP row 51 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=51, expected 51
DEBUG CONSTRNT: Checking LP row 52 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=52, expected 52
DEBUG CONSTRNT: Checking LP row 53 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=53, expected 53
DEBUG CONSTRNT: Checking LP row 54 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=54, expected 54
DEBUG CONSTRNT: Checking LP row 55 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=55, expected 55
DEBUG CONSTRNT: Checking LP row 56 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=56, expected 56
DEBUG CONSTRNT: Checking LP row 57 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=57, expected 57
DEBUG CONSTRNT: Checking LP row 58 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=58, expected 58
DEBUG CONSTRNT: Checking LP row 59 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=59, expected 59
DEBUG CONSTRNT: Checking LP row 60 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=60, expected 60
DEBUG CONSTRNT: Checking LP row 61 -> pool row 51
DEBUG CONSTRNT: Pool row 51 has lprow=61, expected 61
DEBUG CONSTRNT: Checking LP row 62 -> pool row 28
DEBUG CONSTRNT: Pool row 28 has lprow=62, expected 62
DEBUG CONSTRNT: Checking LP row 63 -> pool row 32
DEBUG CONSTRNT: Pool row 32 has lprow=63, expected 63
DEBUG CONSTRNT: Checking LP row 64 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=64, expected 64
DEBUG CONSTRNT: Checking LP row 65 -> pool row 76
DEBUG CONSTRNT: Pool row 76 has lprow=65, expected 65
DEBUG CONSTRNT: Checking LP row 66 -> pool row 44
DEBUG CONSTRNT: Pool row 44 has lprow=66, expected 66
DEBUG CONSTRNT: Checking LP row 67 -> pool row 53
DEBUG CONSTRNT: Pool row 53 has lprow=67, expected 67
DEBUG CONSTRNT: Checking LP row 68 -> pool row 59
DEBUG CONSTRNT: Pool row 59 has lprow=68, expected 68
DEBUG CONSTRNT: Checking LP row 69 -> pool row 55
DEBUG CONSTRNT: Pool row 55 has lprow=69, expected 69
DEBUG CONSTRNT: Checking LP row 70 -> pool row 45
DEBUG CONSTRNT: Pool row 45 has lprow=70, expected 70
DEBUG CONSTRNT: Checking LP row 71 -> pool row 54
DEBUG CONSTRNT: Pool row 54 has lprow=71, expected 71
DEBUG CONSTRNT: Checking LP row 72 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=72, expected 72
DEBUG CONSTRNT: Checking LP row 73 -> pool row 79
DEBUG CONSTRNT: Pool row 79 has lprow=73, expected 73
DEBUG CONSTRNT: Checking LP row 74 -> pool row 85
DEBUG CONSTRNT: Pool row 85 has lprow=74, expected 74
 % @PAP adding 75 rows, 301 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 0 LP 5 Solution, length = 27544963.360418, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.317084 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.317084 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.317084 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.317084 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.682916 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 1.000000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.682916 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 1.000000 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.682916 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.682916 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.682916 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 4 fractional variables
DEBUG CG: LP optimal, z=27544963.360418, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27544963.360418, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 0 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 0
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.317084
DEBUG CAREFUL: Adding var 2 to fractional list (xi=0.317084)
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.317084
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.317084)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.317084
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.317084)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.317084
DEBUG CAREFUL: Adding var 27 to fractional list (xi=0.317084)
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 4 fractional variables

  %  Carefully choosing branching variable, nfrac = 4
DEBUG CAREFUL: Testing fvar[0] = var 2
DEBUG CAREFUL: Calling compare_branch_vars for var 2
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 2
DEBUG CAREFUL: New best var: 2
DEBUG CAREFUL: Testing fvar[1] = var 27
DEBUG CAREFUL: Calling compare_branch_vars for var 27
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 27
DEBUG CAREFUL: Testing fvar[2] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 25
DEBUG CAREFUL: Testing fvar[3] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
  % Initial guess is x2, Z0 = 27544963.3604178        , Z1 = 28642122.708616         

DEBUG EVAL: Testing var 2 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=1, varin=74, theta=0.360692, up=999999999999999983222784.000000
ITER 2: row=57, varin=70, theta=0.284982, up=999999999999999983222784.000000
ITER 3: row=75, varin=16, theta=1.843787, up=999999999999999983222784.000000
ITER 4: row=16, varin=67, theta=0.510013, up=999999999999999983222784.000000
ITER 5: row=21, varin=23, theta=0.318666, up=999999999999999983222784.000000
ITER 6: row=23, varin=63, theta=0.842527, up=999999999999999983222784.000000
ITER 7: row=19, varin=62, theta=1.604255, up=999999999999999983222784.000000
ITER 8: row=62, varin=20, theta=3.137215, up=999999999999999983222784.000000
ITER 9: row=20, varin=3, theta=1.632174, up=999999999999999983222784.000000
ITER 10: row=3, varin=31, theta=1.493661, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 2 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x2 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=1, varin=108, theta=0.497310, up=1.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=75)
DEBUG SOLUTION: LP solution array indices: FST[76-115], not_covered[116-135]
DEBUG SOLUTION: lp->best_solution[0] = 27557411.778525
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 75 rows, 60 cols, 361 nonzeros, 0 slack, 75 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @PAP adding 4 rows, 13 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=76, varin=68, theta=0.770588, up=999999999999999983222784.000000
ITER 2: row=72, varin=114, theta=0.418474, up=1.000000
ITER 3: row=75, varin=69, theta=0.071416, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=3)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=79)
DEBUG SOLUTION: LP solution array indices: FST[80-119], not_covered[120-139]
DEBUG SOLUTION: lp->best_solution[0] = 27568223.352803
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 79 rows, 60 cols, 374 nonzeros, 2 slack, 77 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 2 slack rows
   % @PAP adding 1 rows, 2 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=78, varin=73, theta=0.311397, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=78)
DEBUG SOLUTION: LP solution array indices: FST[79-118], not_covered[119-138]
DEBUG SOLUTION: lp->best_solution[0] = 27569141.555622
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 78 rows, 60 cols, 359 nonzeros, 1 slack, 77 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 1 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 0 at  27.56914155562167678681
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x55895154f600
% @LO 0.00  27.54496336041784587678 99.9000000000
% @LN 0.00  27.56914155562167678681 99.9000000000
% Resuming node 0 at  27.56914155562167678681
DEBUG CONSTRNT: LP rows=77, pool->nlprows=77, pool->npend=0
DEBUG CONSTRNT: Checking 77 LP rows (pool tracks 77, total LP rows 77)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 8
DEBUG CONSTRNT: Pool row 8 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 9
DEBUG CONSTRNT: Pool row 9 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 11
DEBUG CONSTRNT: Pool row 11 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 14
DEBUG CONSTRNT: Pool row 14 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 81
DEBUG CONSTRNT: Pool row 81 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=50, expected 50
DEBUG CONSTRNT: Checking LP row 51 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=51, expected 51
DEBUG CONSTRNT: Checking LP row 52 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=52, expected 52
DEBUG CONSTRNT: Checking LP row 53 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=53, expected 53
DEBUG CONSTRNT: Checking LP row 54 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=54, expected 54
DEBUG CONSTRNT: Checking LP row 55 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=55, expected 55
DEBUG CONSTRNT: Checking LP row 56 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=56, expected 56
DEBUG CONSTRNT: Checking LP row 57 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=57, expected 57
DEBUG CONSTRNT: Checking LP row 58 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=58, expected 58
DEBUG CONSTRNT: Checking LP row 59 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=59, expected 59
DEBUG CONSTRNT: Checking LP row 60 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=60, expected 60
DEBUG CONSTRNT: Checking LP row 61 -> pool row 51
DEBUG CONSTRNT: Pool row 51 has lprow=61, expected 61
DEBUG CONSTRNT: Checking LP row 62 -> pool row 28
DEBUG CONSTRNT: Pool row 28 has lprow=62, expected 62
DEBUG CONSTRNT: Checking LP row 63 -> pool row 32
DEBUG CONSTRNT: Pool row 32 has lprow=63, expected 63
DEBUG CONSTRNT: Checking LP row 64 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=64, expected 64
DEBUG CONSTRNT: Checking LP row 65 -> pool row 76
DEBUG CONSTRNT: Pool row 76 has lprow=65, expected 65
DEBUG CONSTRNT: Checking LP row 66 -> pool row 44
DEBUG CONSTRNT: Pool row 44 has lprow=66, expected 66
DEBUG CONSTRNT: Checking LP row 67 -> pool row 55
DEBUG CONSTRNT: Pool row 55 has lprow=67, expected 67
DEBUG CONSTRNT: Checking LP row 68 -> pool row 45
DEBUG CONSTRNT: Pool row 45 has lprow=68, expected 68
DEBUG CONSTRNT: Checking LP row 69 -> pool row 54
DEBUG CONSTRNT: Pool row 54 has lprow=69, expected 69
DEBUG CONSTRNT: Checking LP row 70 -> pool row 58
DEBUG CONSTRNT: Pool row 58 has lprow=70, expected 70
DEBUG CONSTRNT: Checking LP row 71 -> pool row 79
DEBUG CONSTRNT: Pool row 79 has lprow=71, expected 71
DEBUG CONSTRNT: Checking LP row 72 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=72, expected 72
DEBUG CONSTRNT: Checking LP row 73 -> pool row 26
DEBUG CONSTRNT: Pool row 26 has lprow=73, expected 73
DEBUG CONSTRNT: Checking LP row 74 -> pool row 94
DEBUG CONSTRNT: Pool row 94 has lprow=74, expected 74
DEBUG CONSTRNT: Checking LP row 75 -> pool row 95
DEBUG CONSTRNT: Pool row 95 has lprow=75, expected 75
DEBUG CONSTRNT: Checking LP row 76 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=76, expected 76
 % @PAP adding 77 rows, 290 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 0 LP 6 Solution, length = 27569141.555622, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.062279 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.062279 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.062279 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.373676 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.373676 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.062279 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.062279 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 1.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 0.937721 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 0.937721 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.626324 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.937721 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 1.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.626324 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.626324 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 7 fractional variables
DEBUG CG: LP optimal, z=27569141.555622, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27569141.555622, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 0 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 0
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.062279
DEBUG CAREFUL: Adding var 6 to fractional list (xi=0.062279)
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.062279
DEBUG CAREFUL: Adding var 8 to fractional list (xi=0.062279)
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.062279
DEBUG CAREFUL: Adding var 13 to fractional list (xi=0.062279)
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.373676
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.373676)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.373676
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.373676)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.000000
DEBUG CAREFUL: Skipping var 27: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.062279
DEBUG CAREFUL: Adding var 28 to fractional list (xi=0.062279)
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.062279
DEBUG CAREFUL: Adding var 34 to fractional list (xi=0.062279)
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 7 fractional variables

  %  Carefully choosing branching variable, nfrac = 7
DEBUG CAREFUL: Testing fvar[0] = var 28
DEBUG CAREFUL: Calling compare_branch_vars for var 28
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 28
DEBUG CAREFUL: New best var: 28
DEBUG CAREFUL: Testing fvar[1] = var 13
DEBUG CAREFUL: Calling compare_branch_vars for var 13
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 13
DEBUG CAREFUL: New best var: 13
DEBUG CAREFUL: Testing fvar[2] = var 6
DEBUG CAREFUL: Calling compare_branch_vars for var 6
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 6
DEBUG CAREFUL: Testing fvar[3] = var 8
DEBUG CAREFUL: Calling compare_branch_vars for var 8
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 8
DEBUG CAREFUL: Testing fvar[4] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 25
DEBUG CAREFUL: Testing fvar[5] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
DEBUG CAREFUL: Testing fvar[6] = var 34
DEBUG CAREFUL: Calling compare_branch_vars for var 34
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 34
  % Initial guess is x13, Z0 = 27569141.5556217        , Z1 = 31701363.4081952        

DEBUG EVAL: Testing var 28 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=62, varin=70, theta=0.086537, up=999999999999999983222784.000000
ITER 2: row=69, varin=123, theta=0.225398, up=1.000000
ITER 3: row=75, varin=94, theta=0.140199, up=1.000000
ITER 4: row=8, varin=108, theta=0.521049, up=1.000000
ITER 5: row=64, varin=62, theta=0.068478, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 28 = 0 gives z=27599073.659097
  % 	x28 = 0,	Z0 = 27599073.6590968        
DEBUG EVAL: First branch cutoff check: z=27599073.659097, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 28 = 1
ITER 1: row=62, varin=77, theta=6.300830, up=999999999999999983222784.000000
ITER 2: row=67, varin=73, theta=6.299440, up=999999999999999983222784.000000
ITER 3: row=73, varin=67, theta=0.972093, up=999999999999999983222784.000000
ITER 4: row=71, varin=16, theta=10.844078, up=999999999999999983222784.000000
ITER 5: row=16, varin=72, theta=2.710443, up=999999999999999983222784.000000
ITER 6: row=57, varin=68, theta=1.505462, up=999999999999999983222784.000000
ITER 7: row=16, varin=70, theta=0.694485, up=999999999999999983222784.000000
ITER 8: row=59, varin=20, theta=1.094803, up=999999999999999983222784.000000
ITER 9: row=20, varin=100, theta=0.983546, up=1.000000
ITER 10: row=18, varin=63, theta=1.204463, up=999999999999999983222784.000000
  % 	x28 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: Second branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=62, varin=70, theta=0.086537, up=999999999999999983222784.000000
ITER 2: row=69, varin=123, theta=0.225398, up=1.000000
ITER 3: row=75, varin=94, theta=0.140199, up=1.000000
ITER 4: row=8, varin=108, theta=0.521049, up=1.000000
ITER 5: row=64, varin=62, theta=0.068478, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=5)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=77)
DEBUG SOLUTION: LP solution array indices: FST[78-117], not_covered[118-137]
DEBUG SOLUTION: lp->best_solution[0] = 27599073.659097
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 77 rows, 60 cols, 350 nonzeros, 2 slack, 75 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 2 slack rows
   % @PAP adding 1 rows, 40 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=76, varin=71, theta=0.013096, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=76)
DEBUG SOLUTION: LP solution array indices: FST[77-116], not_covered[117-136]
DEBUG SOLUTION: lp->best_solution[0] = 27599389.933574
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 76 rows, 60 cols, 386 nonzeros, 1 slack, 75 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 1 slack rows
   % @PAP adding 2 rows, 4 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=76, varin=63, theta=0.099009, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=77)
DEBUG SOLUTION: LP solution array indices: FST[78-117], not_covered[118-137]
DEBUG SOLUTION: lp->best_solution[0] = 27600670.545458
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 77 rows, 60 cols, 388 nonzeros, 2 slack, 75 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 2 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 0 at  27.60067054545839937418
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x55895154f600
% @LO 0.00  27.56914155562167678681 99.9000000000
% @LN 0.00  27.60067054545839937418 99.9000000000
% Resuming node 0 at  27.60067054545839937418
DEBUG CONSTRNT: LP rows=75, pool->nlprows=75, pool->npend=0
DEBUG CONSTRNT: Checking 75 LP rows (pool tracks 75, total LP rows 75)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 8
DEBUG CONSTRNT: Pool row 8 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 9
DEBUG CONSTRNT: Pool row 9 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 11
DEBUG CONSTRNT: Pool row 11 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 14
DEBUG CONSTRNT: Pool row 14 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 81
DEBUG CONSTRNT: Pool row 81 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 92
DEBUG CONSTRNT: Pool row 92 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=50, expected 50
DEBUG CONSTRNT: Checking LP row 51 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=51, expected 51
DEBUG CONSTRNT: Checking LP row 52 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=52, expected 52
DEBUG CONSTRNT: Checking LP row 53 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=53, expected 53
DEBUG CONSTRNT: Checking LP row 54 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=54, expected 54
DEBUG CONSTRNT: Checking LP row 55 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=55, expected 55
DEBUG CONSTRNT: Checking LP row 56 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=56, expected 56
DEBUG CONSTRNT: Checking LP row 57 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=57, expected 57
DEBUG CONSTRNT: Checking LP row 58 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=58, expected 58
DEBUG CONSTRNT: Checking LP row 59 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=59, expected 59
DEBUG CONSTRNT: Checking LP row 60 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=60, expected 60
DEBUG CONSTRNT: Checking LP row 61 -> pool row 28
DEBUG CONSTRNT: Pool row 28 has lprow=61, expected 61
DEBUG CONSTRNT: Checking LP row 62 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=62, expected 62
DEBUG CONSTRNT: Checking LP row 63 -> pool row 76
DEBUG CONSTRNT: Pool row 76 has lprow=63, expected 63
DEBUG CONSTRNT: Checking LP row 64 -> pool row 44
DEBUG CONSTRNT: Pool row 44 has lprow=64, expected 64
DEBUG CONSTRNT: Checking LP row 65 -> pool row 55
DEBUG CONSTRNT: Pool row 55 has lprow=65, expected 65
DEBUG CONSTRNT: Checking LP row 66 -> pool row 45
DEBUG CONSTRNT: Pool row 45 has lprow=66, expected 66
DEBUG CONSTRNT: Checking LP row 67 -> pool row 54
DEBUG CONSTRNT: Pool row 54 has lprow=67, expected 67
DEBUG CONSTRNT: Checking LP row 68 -> pool row 79
DEBUG CONSTRNT: Pool row 79 has lprow=68, expected 68
DEBUG CONSTRNT: Checking LP row 69 -> pool row 94
DEBUG CONSTRNT: Pool row 94 has lprow=69, expected 69
DEBUG CONSTRNT: Checking LP row 70 -> pool row 95
DEBUG CONSTRNT: Pool row 95 has lprow=70, expected 70
DEBUG CONSTRNT: Checking LP row 71 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=71, expected 71
DEBUG CONSTRNT: Checking LP row 72 -> pool row 162
DEBUG CONSTRNT: Pool row 162 has lprow=72, expected 72
DEBUG CONSTRNT: Checking LP row 73 -> pool row 24
DEBUG CONSTRNT: Pool row 24 has lprow=73, expected 73
DEBUG CONSTRNT: Checking LP row 74 -> pool row 30
DEBUG CONSTRNT: Pool row 30 has lprow=74, expected 74
 % @PAP adding 75 rows, 317 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 0 LP 7 Solution, length = 27600670.545458, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.049504 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.053748 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.053748 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.053748 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.318246 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.318246 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.049504 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.049504 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.053748 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 0.950496 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 0.950496 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 1.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 0.946252 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 0.946252 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.681754 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 0.950496 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.946252 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 1.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.681754 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.681754 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 9 fractional variables
DEBUG CG: LP optimal, z=27600670.545458, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27600670.545458, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 0 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 0
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.049504
DEBUG CAREFUL: Adding var 1 to fractional list (xi=0.049504)
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.053748
DEBUG CAREFUL: Adding var 6 to fractional list (xi=0.053748)
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.053748
DEBUG CAREFUL: Adding var 8 to fractional list (xi=0.053748)
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.053748
DEBUG CAREFUL: Adding var 13 to fractional list (xi=0.053748)
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.318246
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.318246)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.318246
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.318246)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.000000
DEBUG CAREFUL: Skipping var 27: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.049504
DEBUG CAREFUL: Adding var 29 to fractional list (xi=0.049504)
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.049504
DEBUG CAREFUL: Adding var 30 to fractional list (xi=0.049504)
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.053748
DEBUG CAREFUL: Adding var 34 to fractional list (xi=0.053748)
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 9 fractional variables

  %  Carefully choosing branching variable, nfrac = 9
DEBUG CAREFUL: Testing fvar[0] = var 30
DEBUG CAREFUL: Calling compare_branch_vars for var 30
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 30
DEBUG CAREFUL: New best var: 30
DEBUG CAREFUL: Testing fvar[1] = var 29
DEBUG CAREFUL: Calling compare_branch_vars for var 29
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 29
DEBUG CAREFUL: Testing fvar[2] = var 8
DEBUG CAREFUL: Calling compare_branch_vars for var 8
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 8
DEBUG CAREFUL: New best var: 8
DEBUG CAREFUL: Testing fvar[3] = var 13
DEBUG CAREFUL: Calling compare_branch_vars for var 13
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 13
DEBUG CAREFUL: New best var: 13
DEBUG CAREFUL: Testing fvar[4] = var 6
DEBUG CAREFUL: Calling compare_branch_vars for var 6
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 6
DEBUG CAREFUL: Testing fvar[5] = var 1
DEBUG CAREFUL: Calling compare_branch_vars for var 1
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 1
DEBUG CAREFUL: Testing fvar[6] = var 34
DEBUG CAREFUL: Calling compare_branch_vars for var 34
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 34
DEBUG CAREFUL: Testing fvar[7] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 25
DEBUG CAREFUL: Testing fvar[8] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
  % Initial guess is x13, Z0 = 27600670.5454584        , Z1 = 31701363.4081952        

DEBUG EVAL: Testing var 30 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=65, varin=73, theta=0.793210, up=999999999999999983222784.000000
ITER 2: row=19, varin=8, theta=0.468964, up=999999999999999983222784.000000
ITER 3: row=8, varin=67, theta=0.289464, up=999999999999999983222784.000000
ITER 4: row=23, varin=72, theta=1.399788, up=999999999999999983222784.000000
ITER 5: row=67, varin=70, theta=1.663491, up=999999999999999983222784.000000
ITER 6: row=70, varin=69, theta=0.715746, up=999999999999999983222784.000000
ITER 7: row=57, varin=16, theta=2.863591, up=999999999999999983222784.000000
ITER 8: row=65, varin=19, theta=1.060629, up=999999999999999983222784.000000
ITER 9: row=75, varin=20, theta=6.015608, up=999999999999999983222784.000000
ITER 10: row=63, varin=62, theta=1.037068, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 30 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x30 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=65, varin=30, theta=0.028043, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=75)
DEBUG SOLUTION: LP solution array indices: FST[76-115], not_covered[116-135]
DEBUG SOLUTION: lp->best_solution[0] = 27604456.358583
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 75 rows, 60 cols, 377 nonzeros, 2 slack, 73 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 2 slack rows
   % @PAP adding 2 rows, 7 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=74, varin=118, theta=0.054078, up=1.000000
ITER 2: row=42, varin=72, theta=0.035999, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=75)
DEBUG SOLUTION: LP solution array indices: FST[76-115], not_covered[116-135]
DEBUG SOLUTION: lp->best_solution[0] = 27607290.464057
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 75 rows, 60 cols, 378 nonzeros, 3 slack, 72 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 3 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 0 at  27.60729046405698383637
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x55895154f600
% @LO 0.00  27.60067054545839937418 99.9000000000
% @LN 0.00  27.60729046405698383637 99.9000000000
% Resuming node 0 at  27.60729046405698383637
DEBUG CONSTRNT: LP rows=72, pool->nlprows=72, pool->npend=0
DEBUG CONSTRNT: Checking 72 LP rows (pool tracks 72, total LP rows 72)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 8
DEBUG CONSTRNT: Pool row 8 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 9
DEBUG CONSTRNT: Pool row 9 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 11
DEBUG CONSTRNT: Pool row 11 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 14
DEBUG CONSTRNT: Pool row 14 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 81
DEBUG CONSTRNT: Pool row 81 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=50, expected 50
DEBUG CONSTRNT: Checking LP row 51 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=51, expected 51
DEBUG CONSTRNT: Checking LP row 52 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=52, expected 52
DEBUG CONSTRNT: Checking LP row 53 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=53, expected 53
DEBUG CONSTRNT: Checking LP row 54 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=54, expected 54
DEBUG CONSTRNT: Checking LP row 55 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=55, expected 55
DEBUG CONSTRNT: Checking LP row 56 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=56, expected 56
DEBUG CONSTRNT: Checking LP row 57 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=57, expected 57
DEBUG CONSTRNT: Checking LP row 58 -> pool row 120
DEBUG CONSTRNT: Pool row 120 has lprow=58, expected 58
DEBUG CONSTRNT: Checking LP row 59 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=59, expected 59
DEBUG CONSTRNT: Checking LP row 60 -> pool row 28
DEBUG CONSTRNT: Pool row 28 has lprow=60, expected 60
DEBUG CONSTRNT: Checking LP row 61 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=61, expected 61
DEBUG CONSTRNT: Checking LP row 62 -> pool row 76
DEBUG CONSTRNT: Pool row 76 has lprow=62, expected 62
DEBUG CONSTRNT: Checking LP row 63 -> pool row 44
DEBUG CONSTRNT: Pool row 44 has lprow=63, expected 63
DEBUG CONSTRNT: Checking LP row 64 -> pool row 55
DEBUG CONSTRNT: Pool row 55 has lprow=64, expected 64
DEBUG CONSTRNT: Checking LP row 65 -> pool row 45
DEBUG CONSTRNT: Pool row 45 has lprow=65, expected 65
DEBUG CONSTRNT: Checking LP row 66 -> pool row 54
DEBUG CONSTRNT: Pool row 54 has lprow=66, expected 66
DEBUG CONSTRNT: Checking LP row 67 -> pool row 79
DEBUG CONSTRNT: Pool row 79 has lprow=67, expected 67
DEBUG CONSTRNT: Checking LP row 68 -> pool row 94
DEBUG CONSTRNT: Pool row 94 has lprow=68, expected 68
DEBUG CONSTRNT: Checking LP row 69 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=69, expected 69
DEBUG CONSTRNT: Checking LP row 70 -> pool row 162
DEBUG CONSTRNT: Pool row 162 has lprow=70, expected 70
DEBUG CONSTRNT: Checking LP row 71 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=71, expected 71
 % @PAP adding 72 rows, 309 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 0 LP 8 Solution, length = 27607290.464057, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.035999 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.056001 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.056001 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.056001 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.316002 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.316002 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.035999 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.035999 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.035999 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.056001 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 0.964001 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 0.964001 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 1.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 0.943999 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 0.943999 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.683998 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 0.964001 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.943999 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.964001 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.683998 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.683998 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 10 fractional variables
DEBUG CG: LP optimal, z=27607290.464057, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27607290.464057, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 0 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 0
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.035999
DEBUG CAREFUL: Adding var 1 to fractional list (xi=0.035999)
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.056001
DEBUG CAREFUL: Adding var 6 to fractional list (xi=0.056001)
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.056001
DEBUG CAREFUL: Adding var 8 to fractional list (xi=0.056001)
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.056001
DEBUG CAREFUL: Adding var 13 to fractional list (xi=0.056001)
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.316002
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.316002)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.316002
DEBUG CAREFUL: Adding var 25 to fractional list (xi=0.316002)
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.035999
DEBUG CAREFUL: Adding var 27 to fractional list (xi=0.035999)
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.035999
DEBUG CAREFUL: Adding var 29 to fractional list (xi=0.035999)
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.035999
DEBUG CAREFUL: Adding var 32 to fractional list (xi=0.035999)
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.056001
DEBUG CAREFUL: Adding var 34 to fractional list (xi=0.056001)
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 10 fractional variables

  %  Carefully choosing branching variable, nfrac = 10
DEBUG CAREFUL: Testing fvar[0] = var 25
DEBUG CAREFUL: Calling compare_branch_vars for var 25
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 25
DEBUG CAREFUL: New best var: 25
DEBUG CAREFUL: Testing fvar[1] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
DEBUG CAREFUL: Testing fvar[2] = var 13
DEBUG CAREFUL: Calling compare_branch_vars for var 13
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 13
DEBUG CAREFUL: New best var: 13
DEBUG CAREFUL: Testing fvar[3] = var 6
DEBUG CAREFUL: Calling compare_branch_vars for var 6
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 6
DEBUG CAREFUL: Testing fvar[4] = var 8
DEBUG CAREFUL: Calling compare_branch_vars for var 8
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 8
DEBUG CAREFUL: Testing fvar[5] = var 34
DEBUG CAREFUL: Calling compare_branch_vars for var 34
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 34
DEBUG CAREFUL: Testing fvar[6] = var 29
DEBUG CAREFUL: Calling compare_branch_vars for var 29
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 29
DEBUG CAREFUL: Testing fvar[7] = var 27
DEBUG CAREFUL: Calling compare_branch_vars for var 27
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 27
DEBUG CAREFUL: Testing fvar[8] = var 1
DEBUG CAREFUL: Calling compare_branch_vars for var 1
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 1
DEBUG CAREFUL: Testing fvar[9] = var 32
DEBUG CAREFUL: Calling compare_branch_vars for var 32
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 32
  % Initial guess is x13, Z0 = 27607290.464057         , Z1 = 31701363.4081952        

DEBUG EVAL: Testing var 25 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=59, varin=42, theta=0.349699, up=999999999999999983222784.000000
ITER 2: row=11, varin=8, theta=0.328312, up=999999999999999983222784.000000
ITER 3: row=8, varin=72, theta=0.304288, up=999999999999999983222784.000000
ITER 4: row=65, varin=68, theta=0.045631, up=999999999999999983222784.000000
ITER 5: row=68, varin=11, theta=1.067476, up=999999999999999983222784.000000
ITER 6: row=44, varin=66, theta=0.070013, up=999999999999999983222784.000000
ITER 7: row=56, varin=65, theta=0.045843, up=999999999999999983222784.000000
ITER 8: row=65, varin=70, theta=0.220196, up=999999999999999983222784.000000
ITER 9: row=66, varin=59, theta=0.141211, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 25 = 0 gives z=27672886.320097
  % 	x25 = 0,	Z0 = 27672886.3200973        
DEBUG EVAL: First branch cutoff check: z=27672886.320097, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 25 = 1
ITER 1: row=59, varin=99, theta=0.966951, up=1.000000
ITER 2: row=51, varin=73, theta=0.625213, up=1.000000
ITER 3: row=2, varin=76, theta=0.552988, up=1.000000
ITER 4: row=12, varin=104, theta=0.650544, up=1.000000
ITER 5: row=30, varin=69, theta=0.874139, up=999999999999999983222784.000000
ITER 6: row=64, varin=51, theta=3.094984, up=999999999999999983222784.000000
ITER 7: row=59, varin=20, theta=1.923992, up=999999999999999983222784.000000
ITER 8: row=20, varin=80, theta=2.787022, up=1.000000
ITER 9: row=20, varin=71, theta=1.408726, up=999999999999999983222784.000000
ITER 10: row=7, varin=80, theta=1.000000, up=1.000000
  % 	x25 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: Second branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=59, varin=42, theta=0.349699, up=999999999999999983222784.000000
ITER 2: row=11, varin=8, theta=0.328312, up=999999999999999983222784.000000
ITER 3: row=8, varin=72, theta=0.304288, up=999999999999999983222784.000000
ITER 4: row=65, varin=68, theta=0.045631, up=999999999999999983222784.000000
ITER 5: row=68, varin=11, theta=1.067476, up=999999999999999983222784.000000
ITER 6: row=44, varin=66, theta=0.070013, up=999999999999999983222784.000000
ITER 7: row=56, varin=65, theta=0.045843, up=999999999999999983222784.000000
ITER 8: row=65, varin=70, theta=0.220196, up=999999999999999983222784.000000
ITER 9: row=66, varin=59, theta=0.141211, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=9)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=72)
DEBUG SOLUTION: LP solution array indices: FST[73-112], not_covered[113-132]
DEBUG SOLUTION: lp->best_solution[0] = 27672886.320097
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 72 rows, 60 cols, 369 nonzeros, 2 slack, 70 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 2 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 0 at  27.67288632009734428152
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x55895154f600
% @LO 0.00  27.60729046405698383637 99.9000000000
% @LN 0.00  27.67288632009734428152 99.9000000000
% Resuming node 0 at  27.67288632009734428152
DEBUG CONSTRNT: LP rows=70, pool->nlprows=70, pool->npend=0
DEBUG CONSTRNT: Checking 70 LP rows (pool tracks 70, total LP rows 70)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 8
DEBUG CONSTRNT: Pool row 8 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 9
DEBUG CONSTRNT: Pool row 9 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 11
DEBUG CONSTRNT: Pool row 11 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 14
DEBUG CONSTRNT: Pool row 14 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 81
DEBUG CONSTRNT: Pool row 81 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=50, expected 50
DEBUG CONSTRNT: Checking LP row 51 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=51, expected 51
DEBUG CONSTRNT: Checking LP row 52 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=52, expected 52
DEBUG CONSTRNT: Checking LP row 53 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=53, expected 53
DEBUG CONSTRNT: Checking LP row 54 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=54, expected 54
DEBUG CONSTRNT: Checking LP row 55 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=55, expected 55
DEBUG CONSTRNT: Checking LP row 56 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=56, expected 56
DEBUG CONSTRNT: Checking LP row 57 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=57, expected 57
DEBUG CONSTRNT: Checking LP row 58 -> pool row 70
DEBUG CONSTRNT: Pool row 70 has lprow=58, expected 58
DEBUG CONSTRNT: Checking LP row 59 -> pool row 28
DEBUG CONSTRNT: Pool row 28 has lprow=59, expected 59
DEBUG CONSTRNT: Checking LP row 60 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=60, expected 60
DEBUG CONSTRNT: Checking LP row 61 -> pool row 76
DEBUG CONSTRNT: Pool row 76 has lprow=61, expected 61
DEBUG CONSTRNT: Checking LP row 62 -> pool row 44
DEBUG CONSTRNT: Pool row 44 has lprow=62, expected 62
DEBUG CONSTRNT: Checking LP row 63 -> pool row 55
DEBUG CONSTRNT: Pool row 55 has lprow=63, expected 63
DEBUG CONSTRNT: Checking LP row 64 -> pool row 45
DEBUG CONSTRNT: Pool row 45 has lprow=64, expected 64
DEBUG CONSTRNT: Checking LP row 65 -> pool row 54
DEBUG CONSTRNT: Pool row 54 has lprow=65, expected 65
DEBUG CONSTRNT: Checking LP row 66 -> pool row 79
DEBUG CONSTRNT: Pool row 79 has lprow=66, expected 66
DEBUG CONSTRNT: Checking LP row 67 -> pool row 94
DEBUG CONSTRNT: Pool row 94 has lprow=67, expected 67
DEBUG CONSTRNT: Checking LP row 68 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=68, expected 68
DEBUG CONSTRNT: Checking LP row 69 -> pool row 162
DEBUG CONSTRNT: Pool row 162 has lprow=69, expected 69
 % @PAP adding 70 rows, 305 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 0 LP 9 Solution, length = 27672886.320097, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.288184 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.141211 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.000000 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.141211 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.288184 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.141211 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 0.711816 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 0.711816 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 1.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 1.000000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 1.000000 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 0.711816 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 1.000000 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.858789 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.858789 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.858789 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 5 fractional variables
DEBUG CG: LP optimal, z=27672886.320097, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27672886.320097, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 0 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 0
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.288184
DEBUG CAREFUL: Adding var 1 to fractional list (xi=0.288184)
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.141211
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.141211)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.000000
DEBUG CAREFUL: Skipping var 25: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.141211
DEBUG CAREFUL: Adding var 27 to fractional list (xi=0.141211)
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.288184
DEBUG CAREFUL: Adding var 29 to fractional list (xi=0.288184)
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.141211
DEBUG CAREFUL: Adding var 32 to fractional list (xi=0.141211)
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 5 fractional variables

  %  Carefully choosing branching variable, nfrac = 5
DEBUG CAREFUL: Testing fvar[0] = var 29
DEBUG CAREFUL: Calling compare_branch_vars for var 29
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 29
DEBUG CAREFUL: New best var: 29
DEBUG CAREFUL: Testing fvar[1] = var 1
DEBUG CAREFUL: Calling compare_branch_vars for var 1
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 1
DEBUG CAREFUL: New best var: 1
DEBUG CAREFUL: Testing fvar[2] = var 27
DEBUG CAREFUL: Calling compare_branch_vars for var 27
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 27
DEBUG CAREFUL: Testing fvar[3] = var 32
DEBUG CAREFUL: Calling compare_branch_vars for var 32
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 32
DEBUG CAREFUL: Testing fvar[4] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
  % Initial guess is x1, Z0 = 27672886.3200973        , Z1 = 28610582.8645669        

DEBUG EVAL: Testing var 29 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=20, varin=105, theta=0.623848, up=1.000000
ITER 2: row=69, varin=67, theta=0.109975, up=999999999999999983222784.000000
ITER 3: row=64, varin=79, theta=0.188928, up=1.000000
ITER 4: row=65, varin=44, theta=0.981187, up=999999999999999983222784.000000
ITER 5: row=11, varin=118, theta=0.109082, up=1.000000
ITER 6: row=66, varin=119, theta=0.050931, up=1.000000
DEBUG EVAL: Branch var 29 = 0 gives z=27745427.234803
  % 	x29 = 0,	Z0 = 27745427.2348032        
DEBUG EVAL: First branch cutoff check: z=27745427.234803, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 29 = 1
ITER 1: row=20, varin=97, theta=2.187107, up=1.000000
ITER 2: row=20, varin=23, theta=0.219206, up=999999999999999983222784.000000
ITER 3: row=51, varin=97, theta=1.000000, up=1.000000
ITER 4: row=58, varin=60, theta=3.866665, up=999999999999999983222784.000000
ITER 5: row=1, varin=102, theta=2.429102, up=1.000000
ITER 6: row=1, varin=44, theta=7.895532, up=999999999999999983222784.000000
ITER 7: row=11, varin=74, theta=7.924139, up=1.000000
ITER 8: row=11, varin=114, theta=81.647530, up=1.000000
  % 	x29 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: Second branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=20, varin=105, theta=0.623848, up=1.000000
ITER 2: row=69, varin=67, theta=0.109975, up=999999999999999983222784.000000
ITER 3: row=64, varin=79, theta=0.188928, up=1.000000
ITER 4: row=65, varin=44, theta=0.981187, up=999999999999999983222784.000000
ITER 5: row=11, varin=118, theta=0.109082, up=1.000000
ITER 6: row=66, varin=119, theta=0.050931, up=1.000000
LP PHASE: Switching to primal (iter=6)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=70)
DEBUG SOLUTION: LP solution array indices: FST[71-110], not_covered[111-130]
DEBUG SOLUTION: lp->best_solution[0] = 27745427.234803
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 70 rows, 60 cols, 365 nonzeros, 0 slack, 70 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @PAP adding 7 rows, 29 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=77, varin=59, theta=0.015341, up=999999999999999983222784.000000
ITER 2: row=71, varin=20, theta=0.230288, up=999999999999999983222784.000000
ITER 3: row=61, varin=11, theta=1.572109, up=999999999999999983222784.000000
ITER 4: row=42, varin=104, theta=0.301664, up=1.000000
ITER 5: row=51, varin=68, theta=0.502378, up=999999999999999983222784.000000
ITER 6: row=76, varin=69, theta=0.046441, up=999999999999999983222784.000000
ITER 7: row=73, varin=94, theta=0.096894, up=1.000000
ITER 8: row=8, varin=77, theta=0.498768, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=8)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=77)
DEBUG SOLUTION: LP solution array indices: FST[78-117], not_covered[118-137]
DEBUG SOLUTION: lp->best_solution[0] = 27848815.882505
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 5.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 77 rows, 60 cols, 394 nonzeros, 3 slack, 74 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 3 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 0 at  27.84881588250470585422
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x55895154f600
% @LO 0.00  27.67288632009734428152 99.9000000000
% @LN 0.00  27.84881588250470585422 99.9000000000
% Resuming node 0 at  27.84881588250470585422
DEBUG CONSTRNT: LP rows=74, pool->nlprows=74, pool->npend=0
DEBUG CONSTRNT: Checking 74 LP rows (pool tracks 74, total LP rows 74)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 7
DEBUG CONSTRNT: Pool row 7 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 8
DEBUG CONSTRNT: Pool row 8 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 9
DEBUG CONSTRNT: Pool row 9 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 11
DEBUG CONSTRNT: Pool row 11 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 14
DEBUG CONSTRNT: Pool row 14 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 29
DEBUG CONSTRNT: Pool row 29 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 75
DEBUG CONSTRNT: Pool row 75 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 81
DEBUG CONSTRNT: Pool row 81 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=50, expected 50
DEBUG CONSTRNT: Checking LP row 51 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=51, expected 51
DEBUG CONSTRNT: Checking LP row 52 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=52, expected 52
DEBUG CONSTRNT: Checking LP row 53 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=53, expected 53
DEBUG CONSTRNT: Checking LP row 54 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=54, expected 54
DEBUG CONSTRNT: Checking LP row 55 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=55, expected 55
DEBUG CONSTRNT: Checking LP row 56 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=56, expected 56
DEBUG CONSTRNT: Checking LP row 57 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=57, expected 57
DEBUG CONSTRNT: Checking LP row 58 -> pool row 28
DEBUG CONSTRNT: Pool row 28 has lprow=58, expected 58
DEBUG CONSTRNT: Checking LP row 59 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=59, expected 59
DEBUG CONSTRNT: Checking LP row 60 -> pool row 76
DEBUG CONSTRNT: Pool row 76 has lprow=60, expected 60
DEBUG CONSTRNT: Checking LP row 61 -> pool row 44
DEBUG CONSTRNT: Pool row 44 has lprow=61, expected 61
DEBUG CONSTRNT: Checking LP row 62 -> pool row 55
DEBUG CONSTRNT: Pool row 55 has lprow=62, expected 62
DEBUG CONSTRNT: Checking LP row 63 -> pool row 45
DEBUG CONSTRNT: Pool row 45 has lprow=63, expected 63
DEBUG CONSTRNT: Checking LP row 64 -> pool row 54
DEBUG CONSTRNT: Pool row 54 has lprow=64, expected 64
DEBUG CONSTRNT: Checking LP row 65 -> pool row 79
DEBUG CONSTRNT: Pool row 79 has lprow=65, expected 65
DEBUG CONSTRNT: Checking LP row 66 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=66, expected 66
DEBUG CONSTRNT: Checking LP row 67 -> pool row 162
DEBUG CONSTRNT: Pool row 162 has lprow=67, expected 67
DEBUG CONSTRNT: Checking LP row 68 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=68, expected 68
DEBUG CONSTRNT: Checking LP row 69 -> pool row 26
DEBUG CONSTRNT: Pool row 26 has lprow=69, expected 69
DEBUG CONSTRNT: Checking LP row 70 -> pool row 60
DEBUG CONSTRNT: Pool row 60 has lprow=70, expected 70
DEBUG CONSTRNT: Checking LP row 71 -> pool row 62
DEBUG CONSTRNT: Pool row 62 has lprow=71, expected 71
DEBUG CONSTRNT: Checking LP row 72 -> pool row 65
DEBUG CONSTRNT: Pool row 65 has lprow=72, expected 72
DEBUG CONSTRNT: Checking LP row 73 -> pool row 71
DEBUG CONSTRNT: Pool row 71 has lprow=73, expected 73
 % @PAP adding 74 rows, 316 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 0 LP 10 Solution, length = 27848815.882505, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.055419 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.055419 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.055419 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.221675 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.000000 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.556650 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.055419 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 1.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 0.944581 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 0.944581 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.944581 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.944581 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.443350 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.778325 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.778325 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 6 fractional variables
DEBUG CG: LP optimal, z=27848815.882505, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27848815.882505, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 3 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 0 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 0
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.055419
DEBUG CAREFUL: Adding var 6 to fractional list (xi=0.055419)
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.055419
DEBUG CAREFUL: Adding var 8 to fractional list (xi=0.055419)
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.055419
DEBUG CAREFUL: Adding var 13 to fractional list (xi=0.055419)
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.221675
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.221675)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.000000
DEBUG CAREFUL: Skipping var 25: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.556650
DEBUG CAREFUL: Adding var 27 to fractional list (xi=0.556650)
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.055419
DEBUG CAREFUL: Adding var 34 to fractional list (xi=0.055419)
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 6 fractional variables

  %  Carefully choosing branching variable, nfrac = 6
DEBUG CAREFUL: Testing fvar[0] = var 13
DEBUG CAREFUL: Calling compare_branch_vars for var 13
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 13
DEBUG CAREFUL: New best var: 13
DEBUG CAREFUL: Testing fvar[1] = var 6
DEBUG CAREFUL: Calling compare_branch_vars for var 6
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 6
DEBUG CAREFUL: Testing fvar[2] = var 8
DEBUG CAREFUL: Calling compare_branch_vars for var 8
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 8
DEBUG CAREFUL: Testing fvar[3] = var 34
DEBUG CAREFUL: Calling compare_branch_vars for var 34
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 34
DEBUG CAREFUL: Testing fvar[4] = var 27
DEBUG CAREFUL: Calling compare_branch_vars for var 27
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 27
DEBUG CAREFUL: Testing fvar[5] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 21
  % Initial guess is x13, Z0 = 27848815.8825047        , Z1 = 31701363.4081952        

DEBUG EVAL: Testing var 13 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=23, varin=65, theta=1.586358, up=999999999999999983222784.000000
ITER 2: row=73, varin=8, theta=2.049698, up=999999999999999983222784.000000
ITER 3: row=57, varin=106, theta=2.656953, up=1.000000
ITER 4: row=57, varin=75, theta=2.081590, up=1.000000
ITER 5: row=57, varin=78, theta=0.883963, up=1.000000
ITER 6: row=30, varin=60, theta=1.643923, up=999999999999999983222784.000000
ITER 7: row=70, varin=75, theta=4.016258, up=1.000000
ITER 8: row=70, varin=42, theta=3.171057, up=999999999999999983222784.000000
ITER 9: row=11, varin=106, theta=5.465171, up=1.000000
ITER 10: row=11, varin=51, theta=2.285131, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 13 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x13 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=23, varin=75, theta=0.266024, up=1.000000
ITER 2: row=2, varin=82, theta=0.183298, up=1.000000
ITER 3: row=7, varin=78, theta=0.297614, up=1.000000
ITER 4: row=12, varin=131, theta=0.071199, up=1.000000
LP PHASE: Switching to primal (iter=4)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=74)
DEBUG SOLUTION: LP solution array indices: FST[75-114], not_covered[115-134]
DEBUG SOLUTION: lp->best_solution[0] = 27889083.116389
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 3.000000
DEBUG SOLUTION: lp->best_solution[6] = 0.928801
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 0.928801
DEBUG SOLUTION: lp->best_solution[11] = 4.857602
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 74 rows, 60 cols, 376 nonzeros, 5 slack, 69 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 5 slack rows
   % @PAP adding 8 rows, 44 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=74, varin=119, theta=0.291304, up=1.000000
ITER 2: row=65, varin=58, theta=0.012224, up=999999999999999983222784.000000
ITER 3: row=77, varin=20, theta=0.018061, up=999999999999999983222784.000000
ITER 4: row=70, varin=57, theta=0.033641, up=999999999999999983222784.000000
ITER 5: row=67, varin=74, theta=0.307229, up=999999999999999983222784.000000
ITER 6: row=61, varin=19, theta=0.088082, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=6)
ITER 7: row=6, varin=61, theta=0.000000, up=999999999999999983222784.000000
ITER 8: row=71, varin=83, theta=0.000000, up=1.000000
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=77)
DEBUG SOLUTION: LP solution array indices: FST[78-117], not_covered[118-137]
DEBUG SOLUTION: lp->best_solution[0] = 27908218.223091
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 0.823837
DEBUG SOLUTION: lp->best_solution[5] = 2.823837
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 77 rows, 60 cols, 405 nonzeros, 5 slack, 72 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 5 slack rows
   % @PAP adding 4 rows, 9 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=75, varin=84, theta=0.013526, up=1.000000
ITER 2: row=73, varin=75, theta=0.014650, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=76)
DEBUG SOLUTION: LP solution array indices: FST[77-116], not_covered[117-136]
DEBUG SOLUTION: lp->best_solution[0] = 27908428.624489
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 6.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 76 rows, 60 cols, 401 nonzeros, 10 slack, 66 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 10 slack rows
   % @PAP adding 4 rows, 12 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=69, varin=61, theta=0.187089, up=999999999999999983222784.000000
ITER 2: row=70, varin=69, theta=0.014535, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=70)
DEBUG SOLUTION: LP solution array indices: FST[71-110], not_covered[111-130]
DEBUG SOLUTION: lp->best_solution[0] = 27910001.576774
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 6.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 70 rows, 60 cols, 380 nonzeros, 4 slack, 66 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 4 slack rows
   % @PAP adding 4 rows, 8 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=67, varin=4, theta=0.019030, up=999999999999999983222784.000000
ITER 2: row=69, varin=60, theta=0.030151, up=999999999999999983222784.000000
ITER 3: row=68, varin=107, theta=0.077535, up=1.000000
LP PHASE: Switching to primal (iter=3)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=70)
DEBUG SOLUTION: LP solution array indices: FST[71-110], not_covered[111-130]
DEBUG SOLUTION: lp->best_solution[0] = 27914433.949070
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 6.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 70 rows, 60 cols, 367 nonzeros, 0 slack, 70 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @PAP adding 3 rows, 10 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=73, varin=56, theta=0.126258, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=73)
DEBUG SOLUTION: LP solution array indices: FST[74-113], not_covered[114-133]
DEBUG SOLUTION: lp->best_solution[0] = 27915982.320026
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 6.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 73 rows, 60 cols, 377 nonzeros, 1 slack, 72 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 1 slack rows
   % @PAP adding 2 rows, 5 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=73, varin=57, theta=0.036796, up=999999999999999983222784.000000
ITER 2: row=51, varin=62, theta=0.047163, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=74)
DEBUG SOLUTION: LP solution array indices: FST[75-114], not_covered[115-134]
DEBUG SOLUTION: lp->best_solution[0] = 27916481.378467
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 6.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 74 rows, 60 cols, 377 nonzeros, 1 slack, 73 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 1 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 0 at  27.91648137846676647200
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x55895154f600
% @LO 0.00  27.84881588250470585422 99.9000000000
% @LN 0.00  27.91648137846676647200 99.9000000000
% Resuming node 0 at  27.91648137846676647200
DEBUG CONSTRNT: LP rows=73, pool->nlprows=73, pool->npend=0
DEBUG CONSTRNT: Checking 73 LP rows (pool tracks 73, total LP rows 73)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 11
DEBUG CONSTRNT: Pool row 11 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 28
DEBUG CONSTRNT: Pool row 28 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 44
DEBUG CONSTRNT: Pool row 44 has lprow=50, expected 50
DEBUG CONSTRNT: Checking LP row 51 -> pool row 45
DEBUG CONSTRNT: Pool row 45 has lprow=51, expected 51
DEBUG CONSTRNT: Checking LP row 52 -> pool row 54
DEBUG CONSTRNT: Pool row 54 has lprow=52, expected 52
DEBUG CONSTRNT: Checking LP row 53 -> pool row 162
DEBUG CONSTRNT: Pool row 162 has lprow=53, expected 53
DEBUG CONSTRNT: Checking LP row 54 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=54, expected 54
DEBUG CONSTRNT: Checking LP row 55 -> pool row 60
DEBUG CONSTRNT: Pool row 60 has lprow=55, expected 55
DEBUG CONSTRNT: Checking LP row 56 -> pool row 62
DEBUG CONSTRNT: Pool row 62 has lprow=56, expected 56
DEBUG CONSTRNT: Checking LP row 57 -> pool row 71
DEBUG CONSTRNT: Pool row 71 has lprow=57, expected 57
DEBUG CONSTRNT: Checking LP row 58 -> pool row 49
DEBUG CONSTRNT: Pool row 49 has lprow=58, expected 58
DEBUG CONSTRNT: Checking LP row 59 -> pool row 61
DEBUG CONSTRNT: Pool row 61 has lprow=59, expected 59
DEBUG CONSTRNT: Checking LP row 60 -> pool row 68
DEBUG CONSTRNT: Pool row 68 has lprow=60, expected 60
DEBUG CONSTRNT: Checking LP row 61 -> pool row 22
DEBUG CONSTRNT: Pool row 22 has lprow=61, expected 61
DEBUG CONSTRNT: Checking LP row 62 -> pool row 27
DEBUG CONSTRNT: Pool row 27 has lprow=62, expected 62
DEBUG CONSTRNT: Checking LP row 63 -> pool row 77
DEBUG CONSTRNT: Pool row 77 has lprow=63, expected 63
DEBUG CONSTRNT: Checking LP row 64 -> pool row 78
DEBUG CONSTRNT: Pool row 78 has lprow=64, expected 64
DEBUG CONSTRNT: Checking LP row 65 -> pool row 79
DEBUG CONSTRNT: Pool row 79 has lprow=65, expected 65
DEBUG CONSTRNT: Checking LP row 66 -> pool row 82
DEBUG CONSTRNT: Pool row 82 has lprow=66, expected 66
DEBUG CONSTRNT: Checking LP row 67 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=67, expected 67
DEBUG CONSTRNT: Checking LP row 68 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=68, expected 68
DEBUG CONSTRNT: Checking LP row 69 -> pool row 14
DEBUG CONSTRNT: Pool row 14 has lprow=69, expected 69
DEBUG CONSTRNT: Checking LP row 70 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=70, expected 70
DEBUG CONSTRNT: Checking LP row 71 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=71, expected 71
DEBUG CONSTRNT: Checking LP row 72 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=72, expected 72
 % @PAP adding 73 rows, 308 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 0 LP 11 Solution, length = 27916481.378467, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.023581 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.023581 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.023581 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.023581 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.023581 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.023581 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.023581 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.235815 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.023581 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.023581 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.000000 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.481208 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.023581 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.023581 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.023581 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 0.976419 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 0.976419 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 0.976419 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 0.976419 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 1.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 0.976419 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 0.976419 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.976419 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 0.976419 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.976419 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.518792 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 0.976419 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 0.764185 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 0.764185 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 14 fractional variables
DEBUG CG: LP optimal, z=27916481.378467, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27916481.378467, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 0 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 0
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.023581
DEBUG CAREFUL: Adding var 0 to fractional list (xi=0.023581)
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.023581
DEBUG CAREFUL: Adding var 1 to fractional list (xi=0.023581)
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.023581
DEBUG CAREFUL: Adding var 5 to fractional list (xi=0.023581)
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.023581
DEBUG CAREFUL: Adding var 6 to fractional list (xi=0.023581)
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.023581
DEBUG CAREFUL: Adding var 7 to fractional list (xi=0.023581)
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.023581
DEBUG CAREFUL: Adding var 8 to fractional list (xi=0.023581)
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.023581
DEBUG CAREFUL: Adding var 16 to fractional list (xi=0.023581)
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.235815
DEBUG CAREFUL: Adding var 21 to fractional list (xi=0.235815)
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.023581
DEBUG CAREFUL: Adding var 23 to fractional list (xi=0.023581)
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.023581
DEBUG CAREFUL: Adding var 24 to fractional list (xi=0.023581)
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.000000
DEBUG CAREFUL: Skipping var 25: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.481208
DEBUG CAREFUL: Adding var 27 to fractional list (xi=0.481208)
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.023581
DEBUG CAREFUL: Adding var 32 to fractional list (xi=0.023581)
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.023581
DEBUG CAREFUL: Adding var 34 to fractional list (xi=0.023581)
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.023581
DEBUG CAREFUL: Adding var 36 to fractional list (xi=0.023581)
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 14 fractional variables

  %  Carefully choosing branching variable, nfrac = 14
DEBUG CAREFUL: Testing fvar[0] = var 21
DEBUG CAREFUL: Calling compare_branch_vars for var 21
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 21
DEBUG CAREFUL: New best var: 21
DEBUG CAREFUL: Testing fvar[1] = var 6
DEBUG CAREFUL: Calling compare_branch_vars for var 6
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 6
DEBUG CAREFUL: New best var: 6
DEBUG CAREFUL: Testing fvar[2] = var 8
DEBUG CAREFUL: Calling compare_branch_vars for var 8
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 8
DEBUG CAREFUL: New best var: 8
DEBUG CAREFUL: Testing fvar[3] = var 34
DEBUG CAREFUL: Calling compare_branch_vars for var 34
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 34
DEBUG CAREFUL: Testing fvar[4] = var 7
DEBUG CAREFUL: Calling compare_branch_vars for var 7
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 7
DEBUG CAREFUL: New best var: 7
DEBUG CAREFUL: Testing fvar[5] = var 16
DEBUG CAREFUL: Calling compare_branch_vars for var 16
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 16
DEBUG CAREFUL: New best var: 16
DEBUG CAREFUL: Testing fvar[6] = var 23
DEBUG CAREFUL: Calling compare_branch_vars for var 23
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 23
DEBUG CAREFUL: Testing fvar[7] = var 5
DEBUG CAREFUL: Calling compare_branch_vars for var 5
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 5
DEBUG CAREFUL: Testing fvar[8] = var 36
DEBUG CAREFUL: Calling compare_branch_vars for var 36
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 36
DEBUG CAREFUL: Testing fvar[9] = var 32
DEBUG CAREFUL: Calling compare_branch_vars for var 32
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 32
DEBUG CAREFUL: Testing fvar[10] = var 0
DEBUG CAREFUL: Calling compare_branch_vars for var 0
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 0
DEBUG CAREFUL: Testing fvar[11] = var 24
DEBUG CAREFUL: Calling compare_branch_vars for var 24
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 24
DEBUG CAREFUL: Testing fvar[12] = var 1
DEBUG CAREFUL: Calling compare_branch_vars for var 1
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 1
DEBUG CAREFUL: Testing fvar[13] = var 27
DEBUG CAREFUL: Calling compare_branch_vars for var 27
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 27
  % Initial guess is x16, Z0 = 27916481.3784668        , Z1 = 34155749.1654653        

DEBUG EVAL: Testing var 21 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=47, varin=72, theta=1.782623, up=999999999999999983222784.000000
ITER 2: row=22, varin=62, theta=0.192728, up=999999999999999983222784.000000
ITER 3: row=62, varin=71, theta=0.452990, up=999999999999999983222784.000000
ITER 4: row=58, varin=101, theta=0.445689, up=1.000000
DEBUG EVAL: Branch var 21 = 0 gives z=27935625.309996
  % 	x21 = 0,	Z0 = 27935625.3099955        
DEBUG EVAL: First branch cutoff check: z=27935625.309996, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 21 = 1
ITER 1: row=47, varin=105, theta=0.873295, up=1.000000
ITER 2: row=22, varin=72, theta=0.628953, up=999999999999999983222784.000000
ITER 3: row=49, varin=51, theta=1.000000, up=999999999999999983222784.000000
ITER 4: row=60, varin=6, theta=1.000000, up=999999999999999983222784.000000
ITER 5: row=22, varin=41, theta=1.492735, up=999999999999999983222784.000000
ITER 6: row=25, varin=91, theta=0.585459, up=1.000000
ITER 7: row=9, varin=14, theta=0.898127, up=999999999999999983222784.000000
ITER 8: row=2, varin=62, theta=0.929975, up=999999999999999983222784.000000
ITER 9: row=47, varin=83, theta=0.808167, up=1.000000
ITER 10: row=16, varin=54, theta=1.392800, up=999999999999999983222784.000000
  % 	x21 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: Second branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=47, varin=72, theta=1.782623, up=999999999999999983222784.000000
ITER 2: row=22, varin=62, theta=0.192728, up=999999999999999983222784.000000
ITER 3: row=62, varin=71, theta=0.452990, up=999999999999999983222784.000000
ITER 4: row=58, varin=101, theta=0.445689, up=1.000000
LP PHASE: Switching to primal (iter=4)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=73)
DEBUG SOLUTION: LP solution array indices: FST[74-113], not_covered[114-133]
DEBUG SOLUTION: lp->best_solution[0] = 27935625.309996
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 6.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 73 rows, 60 cols, 368 nonzeros, 2 slack, 71 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 2 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 0 at  27.93562530999552961930
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x55895154f600
% @LO 0.00  27.91648137846676647200 99.9000000000
% @LN 0.00  27.93562530999552961930 99.9000000000
% Resuming node 0 at  27.93562530999552961930
DEBUG CONSTRNT: LP rows=71, pool->nlprows=71, pool->npend=0
DEBUG CONSTRNT: Checking 71 LP rows (pool tracks 71, total LP rows 71)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 11
DEBUG CONSTRNT: Pool row 11 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 28
DEBUG CONSTRNT: Pool row 28 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 44
DEBUG CONSTRNT: Pool row 44 has lprow=50, expected 50
DEBUG CONSTRNT: Checking LP row 51 -> pool row 45
DEBUG CONSTRNT: Pool row 45 has lprow=51, expected 51
DEBUG CONSTRNT: Checking LP row 52 -> pool row 54
DEBUG CONSTRNT: Pool row 54 has lprow=52, expected 52
DEBUG CONSTRNT: Checking LP row 53 -> pool row 162
DEBUG CONSTRNT: Pool row 162 has lprow=53, expected 53
DEBUG CONSTRNT: Checking LP row 54 -> pool row 25
DEBUG CONSTRNT: Pool row 25 has lprow=54, expected 54
DEBUG CONSTRNT: Checking LP row 55 -> pool row 60
DEBUG CONSTRNT: Pool row 60 has lprow=55, expected 55
DEBUG CONSTRNT: Checking LP row 56 -> pool row 62
DEBUG CONSTRNT: Pool row 62 has lprow=56, expected 56
DEBUG CONSTRNT: Checking LP row 57 -> pool row 71
DEBUG CONSTRNT: Pool row 71 has lprow=57, expected 57
DEBUG CONSTRNT: Checking LP row 58 -> pool row 49
DEBUG CONSTRNT: Pool row 49 has lprow=58, expected 58
DEBUG CONSTRNT: Checking LP row 59 -> pool row 61
DEBUG CONSTRNT: Pool row 61 has lprow=59, expected 59
DEBUG CONSTRNT: Checking LP row 60 -> pool row 68
DEBUG CONSTRNT: Pool row 68 has lprow=60, expected 60
DEBUG CONSTRNT: Checking LP row 61 -> pool row 77
DEBUG CONSTRNT: Pool row 77 has lprow=61, expected 61
DEBUG CONSTRNT: Checking LP row 62 -> pool row 78
DEBUG CONSTRNT: Pool row 78 has lprow=62, expected 62
DEBUG CONSTRNT: Checking LP row 63 -> pool row 79
DEBUG CONSTRNT: Pool row 79 has lprow=63, expected 63
DEBUG CONSTRNT: Checking LP row 64 -> pool row 82
DEBUG CONSTRNT: Pool row 82 has lprow=64, expected 64
DEBUG CONSTRNT: Checking LP row 65 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=65, expected 65
DEBUG CONSTRNT: Checking LP row 66 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=66, expected 66
DEBUG CONSTRNT: Checking LP row 67 -> pool row 14
DEBUG CONSTRNT: Pool row 14 has lprow=67, expected 67
DEBUG CONSTRNT: Checking LP row 68 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=68, expected 68
DEBUG CONSTRNT: Checking LP row 69 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=69, expected 69
DEBUG CONSTRNT: Checking LP row 70 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=70, expected 70
 % @PAP adding 71 rows, 304 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 0 LP 12 Solution, length = 27935625.309996, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.222844 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.000000 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.000000 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.554311 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.222844 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 0.777156 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 0.777156 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 1.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 1.000000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 1.000000 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 0.777156 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 1.000000 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.445689 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 1.000000 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 1.000000 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 3 fractional variables
DEBUG CG: LP optimal, z=27935625.309996, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27935625.309996, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 0 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 0
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.222844
DEBUG CAREFUL: Adding var 1 to fractional list (xi=0.222844)
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.000000
DEBUG CAREFUL: Skipping var 21: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.000000
DEBUG CAREFUL: Skipping var 25: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.554311
DEBUG CAREFUL: Adding var 27 to fractional list (xi=0.554311)
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.222844
DEBUG CAREFUL: Adding var 32 to fractional list (xi=0.222844)
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 3 fractional variables

  %  Carefully choosing branching variable, nfrac = 3
DEBUG CAREFUL: Testing fvar[0] = var 32
DEBUG CAREFUL: Calling compare_branch_vars for var 32
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 32
DEBUG CAREFUL: New best var: 32
DEBUG CAREFUL: Testing fvar[1] = var 1
DEBUG CAREFUL: Calling compare_branch_vars for var 1
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 1
DEBUG CAREFUL: New best var: 1
DEBUG CAREFUL: Testing fvar[2] = var 27
DEBUG CAREFUL: Calling compare_branch_vars for var 27
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 27
  % Initial guess is x1, Z0 = 27935625.3099955        , Z1 = 28610582.8645669        

DEBUG EVAL: Testing var 32 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=54, varin=108, theta=1.382301, up=1.000000
ITER 2: row=54, varin=113, theta=0.165742, up=1.000000
ITER 3: row=68, varin=108, theta=1.168032, up=1.000000
ITER 4: row=68, varin=6, theta=0.176056, up=999999999999999983222784.000000
ITER 5: row=70, varin=62, theta=1.142192, up=999999999999999983222784.000000
ITER 6: row=22, varin=51, theta=1.304232, up=999999999999999983222784.000000
ITER 7: row=61, varin=103, theta=1.603902, up=1.000000
ITER 8: row=61, varin=5, theta=0.221004, up=999999999999999983222784.000000
ITER 9: row=70, varin=14, theta=0.551022, up=999999999999999983222784.000000
ITER 10: row=2, varin=41, theta=0.810159, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 32 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x32 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=54, varin=41, theta=0.377508, up=999999999999999983222784.000000
ITER 2: row=25, varin=7, theta=0.169717, up=999999999999999983222784.000000
ITER 3: row=7, varin=2, theta=0.182045, up=999999999999999983222784.000000
ITER 4: row=2, varin=62, theta=0.300733, up=999999999999999983222784.000000
ITER 5: row=14, varin=11, theta=0.145896, up=999999999999999983222784.000000
ITER 6: row=11, varin=55, theta=0.109950, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=6)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=71)
DEBUG SOLUTION: LP solution array indices: FST[72-111], not_covered[112-131]
DEBUG SOLUTION: lp->best_solution[0] = 27974818.424879
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 6.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 71 rows, 60 cols, 364 nonzeros, 7 slack, 64 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 7 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 0 at  27.97481842487878012093
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x55895154f600
% @LO 0.00  27.93562530999552961930 99.9000000000
% @LN 0.00  27.97481842487878012093 99.9000000000
% Resuming node 0 at  27.97481842487878012093
DEBUG CONSTRNT: LP rows=64, pool->nlprows=64, pool->npend=0
DEBUG CONSTRNT: Checking 64 LP rows (pool tracks 64, total LP rows 64)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 11
DEBUG CONSTRNT: Pool row 11 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 28
DEBUG CONSTRNT: Pool row 28 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 44
DEBUG CONSTRNT: Pool row 44 has lprow=50, expected 50
DEBUG CONSTRNT: Checking LP row 51 -> pool row 45
DEBUG CONSTRNT: Pool row 45 has lprow=51, expected 51
DEBUG CONSTRNT: Checking LP row 52 -> pool row 54
DEBUG CONSTRNT: Pool row 54 has lprow=52, expected 52
DEBUG CONSTRNT: Checking LP row 53 -> pool row 162
DEBUG CONSTRNT: Pool row 162 has lprow=53, expected 53
DEBUG CONSTRNT: Checking LP row 54 -> pool row 60
DEBUG CONSTRNT: Pool row 60 has lprow=54, expected 54
DEBUG CONSTRNT: Checking LP row 55 -> pool row 62
DEBUG CONSTRNT: Pool row 62 has lprow=55, expected 55
DEBUG CONSTRNT: Checking LP row 56 -> pool row 71
DEBUG CONSTRNT: Pool row 71 has lprow=56, expected 56
DEBUG CONSTRNT: Checking LP row 57 -> pool row 49
DEBUG CONSTRNT: Pool row 49 has lprow=57, expected 57
DEBUG CONSTRNT: Checking LP row 58 -> pool row 61
DEBUG CONSTRNT: Pool row 61 has lprow=58, expected 58
DEBUG CONSTRNT: Checking LP row 59 -> pool row 68
DEBUG CONSTRNT: Pool row 68 has lprow=59, expected 59
DEBUG CONSTRNT: Checking LP row 60 -> pool row 78
DEBUG CONSTRNT: Pool row 78 has lprow=60, expected 60
DEBUG CONSTRNT: Checking LP row 61 -> pool row 79
DEBUG CONSTRNT: Pool row 79 has lprow=61, expected 61
DEBUG CONSTRNT: Checking LP row 62 -> pool row 82
DEBUG CONSTRNT: Pool row 82 has lprow=62, expected 62
DEBUG CONSTRNT: Checking LP row 63 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=63, expected 63
 % @PAP adding 64 rows, 285 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 0 LP 13 Solution, length = 27974818.424879, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.109950 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.021990 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.021990 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.021990 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.021990 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.000000 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.021990 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.000000 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.758110 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.021990 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 0.978010 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 0.890050 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 0.890050 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 1.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 0.978010 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 0.978010 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.978010 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 0.890050 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.978010 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.241890 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 0.978010 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 1.000000 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 1.000000 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 8 fractional variables
DEBUG CG: LP optimal, z=27974818.424879, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27974818.424879, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 3 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 0 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 0
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.109950
DEBUG CAREFUL: Adding var 1 to fractional list (xi=0.109950)
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.021990
DEBUG CAREFUL: Adding var 6 to fractional list (xi=0.021990)
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.021990
DEBUG CAREFUL: Adding var 7 to fractional list (xi=0.021990)
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.021990
DEBUG CAREFUL: Adding var 8 to fractional list (xi=0.021990)
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.021990
DEBUG CAREFUL: Adding var 16 to fractional list (xi=0.021990)
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.000000
DEBUG CAREFUL: Skipping var 21: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.021990
DEBUG CAREFUL: Adding var 23 to fractional list (xi=0.021990)
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.000000
DEBUG CAREFUL: Skipping var 25: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.758110
DEBUG CAREFUL: Adding var 27 to fractional list (xi=0.758110)
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.021990
DEBUG CAREFUL: Adding var 34 to fractional list (xi=0.021990)
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 8 fractional variables

  %  Carefully choosing branching variable, nfrac = 8
DEBUG CAREFUL: Testing fvar[0] = var 27
DEBUG CAREFUL: Calling compare_branch_vars for var 27
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 27
DEBUG CAREFUL: New best var: 27
DEBUG CAREFUL: Testing fvar[1] = var 6
DEBUG CAREFUL: Calling compare_branch_vars for var 6
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 6
DEBUG CAREFUL: New best var: 6
DEBUG CAREFUL: Testing fvar[2] = var 8
DEBUG CAREFUL: Calling compare_branch_vars for var 8
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 8
DEBUG CAREFUL: New best var: 8
DEBUG CAREFUL: Testing fvar[3] = var 34
DEBUG CAREFUL: Calling compare_branch_vars for var 34
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 34
DEBUG CAREFUL: Testing fvar[4] = var 1
DEBUG CAREFUL: Calling compare_branch_vars for var 1
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 1
DEBUG CAREFUL: Testing fvar[5] = var 7
DEBUG CAREFUL: Calling compare_branch_vars for var 7
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 7
DEBUG CAREFUL: New best var: 7
DEBUG CAREFUL: Testing fvar[6] = var 23
DEBUG CAREFUL: Calling compare_branch_vars for var 23
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 23
DEBUG CAREFUL: Testing fvar[7] = var 16
DEBUG CAREFUL: Calling compare_branch_vars for var 16
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 16
DEBUG CAREFUL: New best var: 16
  % Initial guess is x16, Z0 = 27974818.4248788        , Z1 = 34155749.1654653        

DEBUG EVAL: Testing var 27 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=22, varin=6, theta=0.213073, up=999999999999999983222784.000000
ITER 2: row=6, varin=54, theta=0.159506, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 27 = 1 gives z=27992958.963616
  % 	x27 = 1,	Z1 = 27992958.9636162        
DEBUG EVAL: First branch cutoff check: z=27992958.963616, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 27 = 0
ITER 1: row=22, varin=87, theta=0.519979, up=1.000000
ITER 2: row=11, varin=91, theta=0.650486, up=1.000000
ITER 3: row=41, varin=106, theta=0.702664, up=1.000000
  % 	x27 = 0,	Z0 = 28066890.3930486        
DEBUG EVAL: Second branch cutoff check: z=28066890.393049, best_z=INF, threshold=INF
  %   New best:  x27, Z = 27992958.9636162        
DEBUG EVAL: Testing var 6 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=14, varin=63, theta=2.745831, up=999999999999999983222784.000000
ITER 2: row=4, varin=61, theta=1.519962, up=999999999999999983222784.000000
ITER 3: row=1, varin=87, theta=1.556711, up=1.000000
ITER 4: row=1, varin=91, theta=1.470500, up=1.000000
ITER 5: row=1, varin=65, theta=0.276961, up=1.000000
ITER 6: row=22, varin=91, theta=2.064363, up=1.000000
ITER 7: row=22, varin=6, theta=0.982990, up=999999999999999983222784.000000
ITER 8: row=6, varin=52, theta=4.000000, up=999999999999999983222784.000000
ITER 9: row=14, varin=54, theta=1.291158, up=999999999999999983222784.000000
ITER 10: row=64, varin=63, theta=2.329392, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 6 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x6 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=14, varin=51, theta=0.028013, up=999999999999999983222784.000000
ITER 2: row=59, varin=70, theta=0.073884, up=1.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=64)
DEBUG SOLUTION: LP solution array indices: FST[65-104], not_covered[105-124]
DEBUG SOLUTION: lp->best_solution[0] = 27978785.695625
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 6.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 64 rows, 60 cols, 345 nonzeros, 0 slack, 64 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @PAP adding 6 rows, 32 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=65, varin=55, theta=0.019320, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=70)
DEBUG SOLUTION: LP solution array indices: FST[71-110], not_covered[111-130]
DEBUG SOLUTION: lp->best_solution[0] = 27979581.339292
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 6.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 70 rows, 60 cols, 377 nonzeros, 5 slack, 65 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 5 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 0 at  27.97958133929213175861
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x55895154f600
% @LO 0.00  27.97481842487878012093 99.9000000000
% @LN 0.00  27.97958133929213175861 99.9000000000
% Resuming node 0 at  27.97958133929213175861
DEBUG CONSTRNT: LP rows=65, pool->nlprows=65, pool->npend=0
DEBUG CONSTRNT: Checking 65 LP rows (pool tracks 65, total LP rows 65)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 11
DEBUG CONSTRNT: Pool row 11 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 28
DEBUG CONSTRNT: Pool row 28 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 45
DEBUG CONSTRNT: Pool row 45 has lprow=50, expected 50
DEBUG CONSTRNT: Checking LP row 51 -> pool row 54
DEBUG CONSTRNT: Pool row 54 has lprow=51, expected 51
DEBUG CONSTRNT: Checking LP row 52 -> pool row 162
DEBUG CONSTRNT: Pool row 162 has lprow=52, expected 52
DEBUG CONSTRNT: Checking LP row 53 -> pool row 62
DEBUG CONSTRNT: Pool row 62 has lprow=53, expected 53
DEBUG CONSTRNT: Checking LP row 54 -> pool row 71
DEBUG CONSTRNT: Pool row 71 has lprow=54, expected 54
DEBUG CONSTRNT: Checking LP row 55 -> pool row 49
DEBUG CONSTRNT: Pool row 49 has lprow=55, expected 55
DEBUG CONSTRNT: Checking LP row 56 -> pool row 61
DEBUG CONSTRNT: Pool row 61 has lprow=56, expected 56
DEBUG CONSTRNT: Checking LP row 57 -> pool row 68
DEBUG CONSTRNT: Pool row 68 has lprow=57, expected 57
DEBUG CONSTRNT: Checking LP row 58 -> pool row 78
DEBUG CONSTRNT: Pool row 78 has lprow=58, expected 58
DEBUG CONSTRNT: Checking LP row 59 -> pool row 79
DEBUG CONSTRNT: Pool row 79 has lprow=59, expected 59
DEBUG CONSTRNT: Checking LP row 60 -> pool row 82
DEBUG CONSTRNT: Pool row 82 has lprow=60, expected 60
DEBUG CONSTRNT: Checking LP row 61 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=61, expected 61
DEBUG CONSTRNT: Checking LP row 62 -> pool row 9
DEBUG CONSTRNT: Pool row 9 has lprow=62, expected 62
DEBUG CONSTRNT: Checking LP row 63 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=63, expected 63
DEBUG CONSTRNT: Checking LP row 64 -> pool row 77
DEBUG CONSTRNT: Pool row 77 has lprow=64, expected 64
 % @PAP adding 65 rows, 287 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 0 LP 14 Solution, length = 27979581.339292, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.115922 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.019320 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.019320 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.019320 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.019320 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.000000 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.019320 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.000000 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.768155 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.019320 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 0.980680 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 0.884078 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 0.884078 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 1.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 0.980680 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.980680 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 0.884078 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.980680 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.231845 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 0.980680 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 1.000000 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 1.000000 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 8 fractional variables
DEBUG CG: LP optimal, z=27979581.339292, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27979581.339292, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 3 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 0 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 0
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.115922
DEBUG CAREFUL: Adding var 1 to fractional list (xi=0.115922)
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.019320
DEBUG CAREFUL: Adding var 5 to fractional list (xi=0.019320)
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.019320
DEBUG CAREFUL: Adding var 7 to fractional list (xi=0.019320)
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.019320
DEBUG CAREFUL: Adding var 8 to fractional list (xi=0.019320)
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.019320
DEBUG CAREFUL: Adding var 16 to fractional list (xi=0.019320)
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.000000
DEBUG CAREFUL: Skipping var 21: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.019320
DEBUG CAREFUL: Adding var 23 to fractional list (xi=0.019320)
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.000000
DEBUG CAREFUL: Skipping var 25: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.768155
DEBUG CAREFUL: Adding var 27 to fractional list (xi=0.768155)
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.019320
DEBUG CAREFUL: Adding var 34 to fractional list (xi=0.019320)
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 8 fractional variables

  %  Carefully choosing branching variable, nfrac = 8
DEBUG CAREFUL: Testing fvar[0] = var 8
DEBUG CAREFUL: Calling compare_branch_vars for var 8
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 8
DEBUG CAREFUL: New best var: 8
DEBUG CAREFUL: Testing fvar[1] = var 34
DEBUG CAREFUL: Calling compare_branch_vars for var 34
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 34
DEBUG CAREFUL: Testing fvar[2] = var 7
DEBUG CAREFUL: Calling compare_branch_vars for var 7
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 7
DEBUG CAREFUL: New best var: 7
DEBUG CAREFUL: Testing fvar[3] = var 23
DEBUG CAREFUL: Calling compare_branch_vars for var 23
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 23
DEBUG CAREFUL: Testing fvar[4] = var 16
DEBUG CAREFUL: Calling compare_branch_vars for var 16
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 16
DEBUG CAREFUL: New best var: 16
DEBUG CAREFUL: Testing fvar[5] = var 27
DEBUG CAREFUL: Calling compare_branch_vars for var 27
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 27
DEBUG CAREFUL: New best var: 27
DEBUG CAREFUL: Testing fvar[6] = var 1
DEBUG CAREFUL: Calling compare_branch_vars for var 1
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 1
DEBUG CAREFUL: Testing fvar[7] = var 5
DEBUG CAREFUL: Calling compare_branch_vars for var 5
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 5
  % Initial guess is x27, Z0 = 28066890.3930486        , Z1 = 27992958.9636162        

DEBUG EVAL: Testing var 8 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=51, varin=63, theta=3.750246, up=999999999999999983222784.000000
ITER 2: row=14, varin=59, theta=2.387702, up=999999999999999983222784.000000
ITER 3: row=54, varin=61, theta=2.298153, up=999999999999999983222784.000000
ITER 4: row=4, varin=57, theta=1.272149, up=999999999999999983222784.000000
ITER 5: row=1, varin=88, theta=1.569321, up=1.000000
ITER 6: row=1, varin=92, theta=1.503807, up=1.000000
ITER 7: row=1, varin=66, theta=0.296567, up=1.000000
ITER 8: row=22, varin=92, theta=1.805249, up=1.000000
ITER 9: row=22, varin=6, theta=0.743686, up=999999999999999983222784.000000
ITER 10: row=63, varin=53, theta=1.500000, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 8 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x8 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=51, varin=66, theta=0.087975, up=1.000000
ITER 2: row=2, varin=60, theta=0.023612, up=999999999999999983222784.000000
ITER 3: row=56, varin=88, theta=0.446262, up=1.000000
ITER 4: row=11, varin=102, theta=0.169288, up=1.000000
LP PHASE: Switching to primal (iter=4)
ITER 5: row=11, varin=11, theta=0.000000, up=999999999999999983222784.000000
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=65)
DEBUG SOLUTION: LP solution array indices: FST[66-105], not_covered[106-125]
DEBUG SOLUTION: lp->best_solution[0] = 27992891.427464
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 6.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 65 rows, 60 cols, 347 nonzeros, 0 slack, 65 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @PAP adding 4 rows, 19 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=66, varin=73, theta=0.091176, up=1.000000
ITER 2: row=7, varin=51, theta=0.022081, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=69)
DEBUG SOLUTION: LP solution array indices: FST[70-109], not_covered[110-129]
DEBUG SOLUTION: lp->best_solution[0] = 27994598.423909
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 6.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 69 rows, 60 cols, 366 nonzeros, 4 slack, 65 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 4 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 0 at  27.99459842390921693323
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x55895154f600
% @LO 0.00  27.97958133929213175861 99.9000000000
% @LN 0.00  27.99459842390921693323 99.9000000000
% Resuming node 0 at  27.99459842390921693323
DEBUG CONSTRNT: LP rows=65, pool->nlprows=65, pool->npend=0
DEBUG CONSTRNT: Checking 65 LP rows (pool tracks 65, total LP rows 65)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 11
DEBUG CONSTRNT: Pool row 11 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 28
DEBUG CONSTRNT: Pool row 28 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 54
DEBUG CONSTRNT: Pool row 54 has lprow=50, expected 50
DEBUG CONSTRNT: Checking LP row 51 -> pool row 162
DEBUG CONSTRNT: Pool row 162 has lprow=51, expected 51
DEBUG CONSTRNT: Checking LP row 52 -> pool row 71
DEBUG CONSTRNT: Pool row 71 has lprow=52, expected 52
DEBUG CONSTRNT: Checking LP row 53 -> pool row 49
DEBUG CONSTRNT: Pool row 49 has lprow=53, expected 53
DEBUG CONSTRNT: Checking LP row 54 -> pool row 61
DEBUG CONSTRNT: Pool row 61 has lprow=54, expected 54
DEBUG CONSTRNT: Checking LP row 55 -> pool row 68
DEBUG CONSTRNT: Pool row 68 has lprow=55, expected 55
DEBUG CONSTRNT: Checking LP row 56 -> pool row 78
DEBUG CONSTRNT: Pool row 78 has lprow=56, expected 56
DEBUG CONSTRNT: Checking LP row 57 -> pool row 82
DEBUG CONSTRNT: Pool row 82 has lprow=57, expected 57
DEBUG CONSTRNT: Checking LP row 58 -> pool row 83
DEBUG CONSTRNT: Pool row 83 has lprow=58, expected 58
DEBUG CONSTRNT: Checking LP row 59 -> pool row 9
DEBUG CONSTRNT: Pool row 9 has lprow=59, expected 59
DEBUG CONSTRNT: Checking LP row 60 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=60, expected 60
DEBUG CONSTRNT: Checking LP row 61 -> pool row 77
DEBUG CONSTRNT: Pool row 77 has lprow=61, expected 61
DEBUG CONSTRNT: Checking LP row 62 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=62, expected 62
DEBUG CONSTRNT: Checking LP row 63 -> pool row 14
DEBUG CONSTRNT: Pool row 14 has lprow=63, expected 63
DEBUG CONSTRNT: Checking LP row 64 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=64, expected 64
 % @PAP adding 65 rows, 291 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 0 LP 15 Solution, length = 27994598.423909, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.110406 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.022081 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.022081 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.022081 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.000000 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.022081 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.000000 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.757108 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.022081 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.022081 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 0.977919 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 0.889594 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 0.889594 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 1.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 0.977919 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.977919 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 0.889594 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.977919 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.242892 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 0.977919 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 1.000000 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 1.000000 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 8 fractional variables
DEBUG CG: LP optimal, z=27994598.423909, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=27994598.423909, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 3 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 0 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 0
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.110406
DEBUG CAREFUL: Adding var 1 to fractional list (xi=0.110406)
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.022081
DEBUG CAREFUL: Adding var 5 to fractional list (xi=0.022081)
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.022081
DEBUG CAREFUL: Adding var 7 to fractional list (xi=0.022081)
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.022081
DEBUG CAREFUL: Adding var 16 to fractional list (xi=0.022081)
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.000000
DEBUG CAREFUL: Skipping var 21: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.022081
DEBUG CAREFUL: Adding var 23 to fractional list (xi=0.022081)
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.000000
DEBUG CAREFUL: Skipping var 25: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.757108
DEBUG CAREFUL: Adding var 27 to fractional list (xi=0.757108)
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.022081
DEBUG CAREFUL: Adding var 34 to fractional list (xi=0.022081)
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.022081
DEBUG CAREFUL: Adding var 36 to fractional list (xi=0.022081)
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 8 fractional variables

  %  Carefully choosing branching variable, nfrac = 8
DEBUG CAREFUL: Testing fvar[0] = var 34
DEBUG CAREFUL: Calling compare_branch_vars for var 34
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 34
DEBUG CAREFUL: New best var: 34
DEBUG CAREFUL: Testing fvar[1] = var 7
DEBUG CAREFUL: Calling compare_branch_vars for var 7
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 7
DEBUG CAREFUL: New best var: 7
DEBUG CAREFUL: Testing fvar[2] = var 23
DEBUG CAREFUL: Calling compare_branch_vars for var 23
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 23
DEBUG CAREFUL: Testing fvar[3] = var 16
DEBUG CAREFUL: Calling compare_branch_vars for var 16
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 16
DEBUG CAREFUL: New best var: 16
DEBUG CAREFUL: Testing fvar[4] = var 27
DEBUG CAREFUL: Calling compare_branch_vars for var 27
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 27
DEBUG CAREFUL: Testing fvar[5] = var 5
DEBUG CAREFUL: Calling compare_branch_vars for var 5
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 5
DEBUG CAREFUL: Testing fvar[6] = var 1
DEBUG CAREFUL: Calling compare_branch_vars for var 1
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 1
DEBUG CAREFUL: Testing fvar[7] = var 36
DEBUG CAREFUL: Calling compare_branch_vars for var 36
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 36
  % Initial guess is x16, Z0 = 27994598.4239092        , Z1 = 34155749.1654653        

DEBUG EVAL: Testing var 34 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=52, varin=7, theta=4.037943, up=999999999999999983222784.000000
ITER 2: row=7, varin=55, theta=1.035699, up=999999999999999983222784.000000
ITER 3: row=59, varin=63, theta=7.497361, up=999999999999999983222784.000000
ITER 4: row=53, varin=58, theta=1.434174, up=999999999999999983222784.000000
ITER 5: row=64, varin=2, theta=2.199359, up=999999999999999983222784.000000
ITER 6: row=2, varin=6, theta=1.949822, up=999999999999999983222784.000000
ITER 7: row=63, varin=60, theta=0.915390, up=999999999999999983222784.000000
ITER 8: row=4, varin=122, theta=4.683524, up=1.000000
ITER 9: row=4, varin=57, theta=0.769646, up=999999999999999983222784.000000
ITER 10: row=1, varin=122, theta=7.754762, up=1.000000
DEBUG EVAL: Branch var 34 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x34 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=52, varin=88, theta=0.446262, up=1.000000
ITER 2: row=11, varin=75, theta=0.068235, up=1.000000
ITER 3: row=16, varin=107, theta=0.090575, up=1.000000
LP PHASE: Switching to primal (iter=3)
ITER 4: row=11, varin=11, theta=0.000000, up=999999999999999983222784.000000
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=65)
DEBUG SOLUTION: LP solution array indices: FST[66-105], not_covered[106-125]
DEBUG SOLUTION: lp->best_solution[0] = 27997639.243731
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 6.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 65 rows, 60 cols, 351 nonzeros, 0 slack, 65 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @PAP adding 2 rows, 5 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=66, varin=90, theta=0.446262, up=1.000000
ITER 2: row=11, varin=57, theta=0.024547, up=999999999999999983222784.000000
ITER 3: row=56, varin=5, theta=0.037102, up=999999999999999983222784.000000
ITER 4: row=61, varin=53, theta=0.019673, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=4)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=67)
DEBUG SOLUTION: LP solution array indices: FST[68-107], not_covered[108-127]
DEBUG SOLUTION: lp->best_solution[0] = 28002705.640927
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 6.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 67 rows, 60 cols, 356 nonzeros, 2 slack, 65 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 2 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 0 at  28.00270564092729230765
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x55895154f600
% @LO 0.00  27.99459842390921693323 99.9000000000
% @LN 0.00  28.00270564092729230765 99.9000000000
% Resuming node 0 at  28.00270564092729230765
DEBUG CONSTRNT: LP rows=65, pool->nlprows=65, pool->npend=0
DEBUG CONSTRNT: Checking 65 LP rows (pool tracks 65, total LP rows 65)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 11
DEBUG CONSTRNT: Pool row 11 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 28
DEBUG CONSTRNT: Pool row 28 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 54
DEBUG CONSTRNT: Pool row 54 has lprow=50, expected 50
DEBUG CONSTRNT: Checking LP row 51 -> pool row 162
DEBUG CONSTRNT: Pool row 162 has lprow=51, expected 51
DEBUG CONSTRNT: Checking LP row 52 -> pool row 49
DEBUG CONSTRNT: Pool row 49 has lprow=52, expected 52
DEBUG CONSTRNT: Checking LP row 53 -> pool row 61
DEBUG CONSTRNT: Pool row 61 has lprow=53, expected 53
DEBUG CONSTRNT: Checking LP row 54 -> pool row 68
DEBUG CONSTRNT: Pool row 68 has lprow=54, expected 54
DEBUG CONSTRNT: Checking LP row 55 -> pool row 78
DEBUG CONSTRNT: Pool row 78 has lprow=55, expected 55
DEBUG CONSTRNT: Checking LP row 56 -> pool row 82
DEBUG CONSTRNT: Pool row 82 has lprow=56, expected 56
DEBUG CONSTRNT: Checking LP row 57 -> pool row 9
DEBUG CONSTRNT: Pool row 9 has lprow=57, expected 57
DEBUG CONSTRNT: Checking LP row 58 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=58, expected 58
DEBUG CONSTRNT: Checking LP row 59 -> pool row 77
DEBUG CONSTRNT: Pool row 77 has lprow=59, expected 59
DEBUG CONSTRNT: Checking LP row 60 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=60, expected 60
DEBUG CONSTRNT: Checking LP row 61 -> pool row 14
DEBUG CONSTRNT: Pool row 14 has lprow=61, expected 61
DEBUG CONSTRNT: Checking LP row 62 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=62, expected 62
DEBUG CONSTRNT: Checking LP row 63 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=63, expected 63
DEBUG CONSTRNT: Checking LP row 64 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=64, expected 64
 % @PAP adding 65 rows, 292 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 0 LP 16 Solution, length = 28002705.640927, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.019673 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.118039 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.019673 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.019673 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.019673 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.000000 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.019673 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.019673 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.000000 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 0.744250 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.019673 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 0.980327 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 0.980327 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 0.881961 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 0.881961 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 1.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 0.980327 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.980327 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 0.881961 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.980327 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.255750 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 0.980327 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 1.000000 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 1.000000 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 9 fractional variables
DEBUG CG: LP optimal, z=28002705.640927, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=28002705.640927, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 0 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 0
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.019673
DEBUG CAREFUL: Adding var 0 to fractional list (xi=0.019673)
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.118039
DEBUG CAREFUL: Adding var 1 to fractional list (xi=0.118039)
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.019673
DEBUG CAREFUL: Adding var 5 to fractional list (xi=0.019673)
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.019673
DEBUG CAREFUL: Adding var 7 to fractional list (xi=0.019673)
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.019673
DEBUG CAREFUL: Adding var 16 to fractional list (xi=0.019673)
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.000000
DEBUG CAREFUL: Skipping var 21: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.019673
DEBUG CAREFUL: Adding var 23 to fractional list (xi=0.019673)
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.019673
DEBUG CAREFUL: Adding var 24 to fractional list (xi=0.019673)
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.000000
DEBUG CAREFUL: Skipping var 25: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=0.744250
DEBUG CAREFUL: Adding var 27 to fractional list (xi=0.744250)
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.019673
DEBUG CAREFUL: Adding var 36 to fractional list (xi=0.019673)
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 9 fractional variables

  %  Carefully choosing branching variable, nfrac = 9
DEBUG CAREFUL: Testing fvar[0] = var 27
DEBUG CAREFUL: Calling compare_branch_vars for var 27
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 27
DEBUG CAREFUL: New best var: 27
DEBUG CAREFUL: Testing fvar[1] = var 1
DEBUG CAREFUL: Calling compare_branch_vars for var 1
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 1
DEBUG CAREFUL: New best var: 1
DEBUG CAREFUL: Testing fvar[2] = var 7
DEBUG CAREFUL: Calling compare_branch_vars for var 7
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 7
DEBUG CAREFUL: New best var: 7
DEBUG CAREFUL: Testing fvar[3] = var 23
DEBUG CAREFUL: Calling compare_branch_vars for var 23
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 23
DEBUG CAREFUL: Testing fvar[4] = var 16
DEBUG CAREFUL: Calling compare_branch_vars for var 16
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 16
DEBUG CAREFUL: New best var: 16
DEBUG CAREFUL: Testing fvar[5] = var 5
DEBUG CAREFUL: Calling compare_branch_vars for var 5
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 5
DEBUG CAREFUL: Testing fvar[6] = var 24
DEBUG CAREFUL: Calling compare_branch_vars for var 24
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 24
DEBUG CAREFUL: Testing fvar[7] = var 0
DEBUG CAREFUL: Calling compare_branch_vars for var 0
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 0
DEBUG CAREFUL: Testing fvar[8] = var 36
DEBUG CAREFUL: Calling compare_branch_vars for var 36
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 36
  % Initial guess is x16, Z0 = 28002705.6409273        , Z1 = 34155749.1654653        

DEBUG EVAL: Testing var 27 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=22, varin=59, theta=0.121389, up=999999999999999983222784.000000
ITER 2: row=62, varin=11, theta=0.179234, up=999999999999999983222784.000000
ITER 3: row=11, varin=6, theta=0.075828, up=999999999999999983222784.000000
ITER 4: row=54, varin=52, theta=0.145038, up=999999999999999983222784.000000
ITER 5: row=4, varin=62, theta=0.018630, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 27 = 1 gives z=28013656.666642
  % 	x27 = 1,	Z1 = 28013656.6666417        
DEBUG EVAL: First branch cutoff check: z=28013656.666642, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 27 = 0
ITER 1: row=22, varin=92, theta=0.645687, up=1.000000
ITER 2: row=41, varin=101, theta=1.319141, up=1.000000
ITER 3: row=41, varin=16, theta=0.240686, up=999999999999999983222784.000000
ITER 4: row=16, varin=58, theta=0.070105, up=999999999999999983222784.000000
ITER 5: row=46, varin=101, theta=2.083048, up=1.000000
ITER 6: row=46, varin=55, theta=0.076603, up=999999999999999983222784.000000
ITER 7: row=63, varin=101, theta=1.507916, up=1.000000
ITER 8: row=63, varin=97, theta=0.296306, up=1.000000
ITER 9: row=62, varin=61, theta=0.035587, up=999999999999999983222784.000000
ITER 10: row=56, varin=101, theta=1.911336, up=1.000000
  % 	x27 = 0,	Z0 = 28165810.9950507        
DEBUG EVAL: Second branch cutoff check: z=28165810.995051, best_z=INF, threshold=INF
  %   New best:  x27, Z = 28013656.6666417        
DEBUG EVAL: Testing var 1 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=2, varin=83, theta=1.338846, up=1.000000
ITER 2: row=2, varin=101, theta=0.661728, up=1.000000
ITER 3: row=9, varin=83, theta=1.000000, up=1.000000
ITER 4: row=2, varin=92, theta=1.946157, up=1.000000
ITER 5: row=2, varin=97, theta=0.542091, up=1.000000
ITER 6: row=22, varin=92, theta=2.268587, up=1.000000
ITER 7: row=22, varin=86, theta=0.245641, up=1.000000
ITER 8: row=46, varin=55, theta=0.363946, up=999999999999999983222784.000000
ITER 9: row=4, varin=101, theta=6.460108, up=1.000000
ITER 10: row=4, varin=58, theta=0.655695, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 1 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x1 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=2, varin=59, theta=0.144204, up=999999999999999983222784.000000
ITER 2: row=62, varin=11, theta=0.160489, up=999999999999999983222784.000000
ITER 3: row=11, varin=6, theta=0.100711, up=999999999999999983222784.000000
ITER 4: row=54, varin=61, theta=0.165781, up=999999999999999983222784.000000
ITER 5: row=53, varin=7, theta=0.080904, up=999999999999999983222784.000000
ITER 6: row=7, varin=16, theta=0.115302, up=999999999999999983222784.000000
ITER 7: row=16, varin=2, theta=0.083603, up=999999999999999983222784.000000
ITER 8: row=1, varin=58, theta=0.099320, up=999999999999999983222784.000000
ITER 9: row=14, varin=3, theta=0.101485, up=999999999999999983222784.000000
ITER 10: row=64, varin=52, theta=0.600273, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=14)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=65)
DEBUG SOLUTION: LP solution array indices: FST[66-105], not_covered[106-125]
DEBUG SOLUTION: lp->best_solution[0] = 28047438.708196
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 0.972194
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 6.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 65 rows, 60 cols, 352 nonzeros, 12 slack, 53 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 12 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 0 at  28.04743870819644868675
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x55895154f600
% @LO 0.02  28.00270564092729230765 99.9000000000
% @LN 0.02  28.04743870819644868675 99.9000000000
% Resuming node 0 at  28.04743870819644868675
DEBUG CONSTRNT: LP rows=53, pool->nlprows=53, pool->npend=0
DEBUG CONSTRNT: Checking 53 LP rows (pool tracks 53, total LP rows 53)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 11
DEBUG CONSTRNT: Pool row 11 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 12
DEBUG CONSTRNT: Pool row 12 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 28
DEBUG CONSTRNT: Pool row 28 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 54
DEBUG CONSTRNT: Pool row 54 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 49
DEBUG CONSTRNT: Pool row 49 has lprow=50, expected 50
DEBUG CONSTRNT: Checking LP row 51 -> pool row 68
DEBUG CONSTRNT: Pool row 68 has lprow=51, expected 51
DEBUG CONSTRNT: Checking LP row 52 -> pool row 82
DEBUG CONSTRNT: Pool row 82 has lprow=52, expected 52
 % @PAP adding 53 rows, 225 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 0 LP 17 Solution, length = 28047438.708196, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.027806 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.055613 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.000000 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.055613 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.000000 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 1.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 0.944387 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 1.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 0.944387 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.944387 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.944387 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 0.944387 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 1.000000 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 1.000000 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 3 fractional variables
DEBUG CG: LP optimal, z=28047438.708196, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=28047438.708196, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 0 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 0
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.027806
DEBUG CAREFUL: Adding var 7 to fractional list (xi=0.027806)
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.055613
DEBUG CAREFUL: Adding var 16 to fractional list (xi=0.055613)
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.000000
DEBUG CAREFUL: Skipping var 21: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.055613
DEBUG CAREFUL: Adding var 23 to fractional list (xi=0.055613)
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.000000
DEBUG CAREFUL: Skipping var 25: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=1.000000
DEBUG CAREFUL: Skipping var 27: xi+FUZZ=1.000001 >= 1.0
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 3 fractional variables

  %  Carefully choosing branching variable, nfrac = 3
DEBUG CAREFUL: Testing fvar[0] = var 23
DEBUG CAREFUL: Calling compare_branch_vars for var 23
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 23
DEBUG CAREFUL: New best var: 23
DEBUG CAREFUL: Testing fvar[1] = var 16
DEBUG CAREFUL: Calling compare_branch_vars for var 16
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 16
DEBUG CAREFUL: New best var: 16
DEBUG CAREFUL: Testing fvar[2] = var 7
DEBUG CAREFUL: Calling compare_branch_vars for var 7
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 7
  % Initial guess is x16, Z0 = 28047438.7081965        , Z1 = 34155749.1654653        

DEBUG EVAL: Testing var 23 = 0, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=5, varin=5, theta=0.059261, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 23 = 0 gives z=28048492.111086
  % 	x23 = 0,	Z0 = 28048492.1110857        
DEBUG EVAL: First branch cutoff check: z=28048492.111086, best_z=INF, threshold=INF
DEBUG EVAL: About to test second branch var 23 = 1
ITER 1: row=5, varin=4, theta=1.360605, up=999999999999999983222784.000000
ITER 2: row=4, varin=107, theta=2.701613, up=1.000000
ITER 3: row=4, varin=78, theta=0.928156, up=1.000000
ITER 4: row=3, varin=76, theta=0.819785, up=1.000000
ITER 5: row=10, varin=54, theta=1.670899, up=1.000000
ITER 6: row=10, varin=57, theta=0.543157, up=1.000000
ITER 7: row=1, varin=54, theta=5.478641, up=1.000000
ITER 8: row=1, varin=85, theta=5.632643, up=1.000000
  % 	x23 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: Second branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=5, varin=5, theta=0.059261, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=53)
DEBUG SOLUTION: LP solution array indices: FST[54-93], not_covered[94-113]
DEBUG SOLUTION: lp->best_solution[0] = 28048492.111086
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 0.940739
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 6.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 53 rows, 60 cols, 285 nonzeros, 1 slack, 52 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 1 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 0 at  28.04849211108573570073
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x55895154f600
% @LO 0.02  28.04743870819644868675 99.9000000000
% @LN 0.02  28.04849211108573570073 99.9000000000
% Resuming node 0 at  28.04849211108573570073
DEBUG CONSTRNT: LP rows=52, pool->nlprows=52, pool->npend=0
DEBUG CONSTRNT: Checking 52 LP rows (pool tracks 52, total LP rows 52)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 11
DEBUG CONSTRNT: Pool row 11 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 129
DEBUG CONSTRNT: Pool row 129 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=41, expected 41
DEBUG CONSTRNT: Checking LP row 42 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=42, expected 42
DEBUG CONSTRNT: Checking LP row 43 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=43, expected 43
DEBUG CONSTRNT: Checking LP row 44 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=44, expected 44
DEBUG CONSTRNT: Checking LP row 45 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=45, expected 45
DEBUG CONSTRNT: Checking LP row 46 -> pool row 28
DEBUG CONSTRNT: Pool row 28 has lprow=46, expected 46
DEBUG CONSTRNT: Checking LP row 47 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=47, expected 47
DEBUG CONSTRNT: Checking LP row 48 -> pool row 54
DEBUG CONSTRNT: Pool row 54 has lprow=48, expected 48
DEBUG CONSTRNT: Checking LP row 49 -> pool row 49
DEBUG CONSTRNT: Pool row 49 has lprow=49, expected 49
DEBUG CONSTRNT: Checking LP row 50 -> pool row 68
DEBUG CONSTRNT: Pool row 68 has lprow=50, expected 50
DEBUG CONSTRNT: Checking LP row 51 -> pool row 82
DEBUG CONSTRNT: Pool row 82 has lprow=51, expected 51
 % @PAP adding 52 rows, 223 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 0 LP 18 Solution, length = 28048492.111086, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.029630 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.059261 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.000000 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.000000 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 1.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 0.940739 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 1.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 0.940739 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.940739 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.940739 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 1.000000 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 1.000000 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 2 fractional variables
DEBUG CG: LP optimal, z=28048492.111086, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=28048492.111086, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 0 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 0
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.029630
DEBUG CAREFUL: Adding var 7 to fractional list (xi=0.029630)
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.059261
DEBUG CAREFUL: Adding var 16 to fractional list (xi=0.059261)
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.000000
DEBUG CAREFUL: Skipping var 21: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.000000
DEBUG CAREFUL: Skipping var 25: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=1.000000
DEBUG CAREFUL: Skipping var 27: xi+FUZZ=1.000001 >= 1.0
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 2 fractional variables

  %  Carefully choosing branching variable, nfrac = 2
DEBUG CAREFUL: Testing fvar[0] = var 16
DEBUG CAREFUL: Calling compare_branch_vars for var 16
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 16
DEBUG CAREFUL: New best var: 16
DEBUG CAREFUL: Testing fvar[1] = var 7
DEBUG CAREFUL: Calling compare_branch_vars for var 7
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 7
  % Initial guess is x16, Z0 = 28048492.1110857        , Z1 = 34155749.1654653        

DEBUG EVAL: Testing var 16 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=4, varin=106, theta=9.529114, up=1.000000
ITER 2: row=4, varin=77, theta=4.652262, up=1.000000
ITER 3: row=4, varin=75, theta=3.225825, up=1.000000
ITER 4: row=4, varin=53, theta=4.536713, up=1.000000
ITER 5: row=4, varin=56, theta=2.863308, up=1.000000
ITER 6: row=4, varin=84, theta=2.860489, up=1.000000
ITER 7: row=4, varin=79, theta=9.254928, up=1.000000
ITER 8: row=4, varin=70, theta=3.161934, up=1.000000
ITER 9: row=4, varin=86, theta=6.826309, up=1.000000
ITER 10: row=4, varin=88, theta=15.619208, up=1.000000
DEBUG EVAL: Branch var 16 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x16 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=4, varin=42, theta=2.048321, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=52)
DEBUG SOLUTION: LP solution array indices: FST[53-92], not_covered[93-112]
DEBUG SOLUTION: lp->best_solution[0] = 28066216.913732
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 6.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 52 rows, 60 cols, 283 nonzeros, 10 slack, 42 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 10 slack rows
   % @PAP adding 6 rows, 35 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=46, varin=41, theta=0.008754, up=999999999999999983222784.000000
ITER 2: row=47, varin=42, theta=0.113796, up=999999999999999983222784.000000
ITER 3: row=43, varin=4, theta=0.113796, up=999999999999999983222784.000000
ITER 4: row=45, varin=46, theta=1.365547, up=999999999999999983222784.000000
ITER 5: row=1, varin=54, theta=0.037265, up=1.000000
LP PHASE: Switching to primal (iter=5)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=48)
DEBUG SOLUTION: LP solution array indices: FST[49-88], not_covered[89-108]
DEBUG SOLUTION: lp->best_solution[0] = 28068698.651277
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 0.925469
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 6.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 48 rows, 60 cols, 290 nonzeros, 6 slack, 42 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 6 slack rows
   % @PAP adding 2 rows, 13 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=43, varin=39, theta=0.055411, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=44)
DEBUG SOLUTION: LP solution array indices: FST[45-84], not_covered[85-104]
DEBUG SOLUTION: lp->best_solution[0] = 28069907.105865
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 6.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 44 rows, 60 cols, 268 nonzeros, 2 slack, 42 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 2 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 0 at  28.06990710586510218150
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x55895154f600
% @LO 0.02  28.04849211108573570073 99.9000000000
% @LN 0.02  28.06990710586510218150 99.9000000000
% Resuming node 0 at  28.06990710586510218150
DEBUG CONSTRNT: LP rows=42, pool->nlprows=42, pool->npend=0
DEBUG CONSTRNT: Checking 42 LP rows (pool tracks 42, total LP rows 42)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 28
DEBUG CONSTRNT: Pool row 28 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 54
DEBUG CONSTRNT: Pool row 54 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=38, expected 38
DEBUG CONSTRNT: Checking LP row 39 -> pool row 61
DEBUG CONSTRNT: Pool row 61 has lprow=39, expected 39
DEBUG CONSTRNT: Checking LP row 40 -> pool row 78
DEBUG CONSTRNT: Pool row 78 has lprow=40, expected 40
DEBUG CONSTRNT: Checking LP row 41 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=41, expected 41
 % @PAP adding 42 rows, 195 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 0 LP 19 Solution, length = 28069907.105865, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.055411 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.055411 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.000000 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.000000 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 1.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 0.944589 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 1.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 0.944589 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.944589 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.944589 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 1.000000 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 1.000000 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 2 fractional variables
DEBUG CG: LP optimal, z=28069907.105865, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=28069907.105865, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 0 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 0
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.055411
DEBUG CAREFUL: Adding var 5 to fractional list (xi=0.055411)
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.055411
DEBUG CAREFUL: Adding var 7 to fractional list (xi=0.055411)
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.000000
DEBUG CAREFUL: Skipping var 21: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.000000
DEBUG CAREFUL: Skipping var 25: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=1.000000
DEBUG CAREFUL: Skipping var 27: xi+FUZZ=1.000001 >= 1.0
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 2 fractional variables

  %  Carefully choosing branching variable, nfrac = 2
DEBUG CAREFUL: Testing fvar[0] = var 5
DEBUG CAREFUL: Calling compare_branch_vars for var 5
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 5
DEBUG CAREFUL: New best var: 5
DEBUG CAREFUL: Testing fvar[1] = var 7
DEBUG CAREFUL: Calling compare_branch_vars for var 7
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 7
  % Initial guess is x5, Z0 = 28069907.1058651        , Z1 = 32439494.9066783        

DEBUG EVAL: Testing var 5 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=1, varin=11, theta=1.939850, up=999999999999999983222784.000000
ITER 2: row=33, varin=96, theta=4.957721, up=1.000000
ITER 3: row=33, varin=19, theta=3.957721, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 5 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x5 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=1, varin=52, theta=0.035772, up=1.000000
ITER 2: row=13, varin=67, theta=0.098742, up=1.000000
ITER 3: row=3, varin=95, theta=0.052172, up=1.000000
LP PHASE: Switching to primal (iter=3)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=42)
DEBUG SOLUTION: LP solution array indices: FST[43-82], not_covered[83-102]
DEBUG SOLUTION: lp->best_solution[0] = 28078520.107146
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 6.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 0.947828
   % @PL 42 rows, 60 cols, 255 nonzeros, 5 slack, 37 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 5 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 0 at  28.07852010714604062969
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x55895154f600
% @LO 0.02  28.06990710586510218150 99.9000000000
% @LN 0.02  28.07852010714604062969 99.9000000000
% Resuming node 0 at  28.07852010714604062969
DEBUG CONSTRNT: LP rows=37, pool->nlprows=37, pool->npend=0
DEBUG CONSTRNT: Checking 37 LP rows (pool tracks 37, total LP rows 37)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 28
DEBUG CONSTRNT: Pool row 28 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 54
DEBUG CONSTRNT: Pool row 54 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 61
DEBUG CONSTRNT: Pool row 61 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 78
DEBUG CONSTRNT: Pool row 78 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=36, expected 36
 % @PAP adding 37 rows, 181 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 0 LP 20 Solution, length = 28078520.107146, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.052172 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.052172 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.000000 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.000000 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 1.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 0.947828 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 1.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 1.000000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.947828 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.947828 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 0.947828 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 1.000000 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 1.000000 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 2 fractional variables
DEBUG CG: LP optimal, z=28078520.107146, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=28078520.107146, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 0 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 0
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.052172
DEBUG CAREFUL: Adding var 7 to fractional list (xi=0.052172)
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.052172
DEBUG CAREFUL: Adding var 9 to fractional list (xi=0.052172)
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.000000
DEBUG CAREFUL: Skipping var 21: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.000000
DEBUG CAREFUL: Skipping var 25: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=1.000000
DEBUG CAREFUL: Skipping var 27: xi+FUZZ=1.000001 >= 1.0
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 2 fractional variables

  %  Carefully choosing branching variable, nfrac = 2
DEBUG CAREFUL: Testing fvar[0] = var 9
DEBUG CAREFUL: Calling compare_branch_vars for var 9
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 9
DEBUG CAREFUL: New best var: 9
DEBUG CAREFUL: Testing fvar[1] = var 7
DEBUG CAREFUL: Calling compare_branch_vars for var 7
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 7
  % Initial guess is x9, Z0 = 28078520.107146         , Z1 = 33353538.9110867        

DEBUG EVAL: Testing var 9 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=13, varin=3, theta=1.793881, up=999999999999999983222784.000000
ITER 2: row=3, varin=13, theta=2.067360, up=999999999999999983222784.000000
ITER 3: row=36, varin=11, theta=2.067360, up=999999999999999983222784.000000
ITER 4: row=28, varin=34, theta=1.067360, up=999999999999999983222784.000000
ITER 5: row=35, varin=36, theta=1.067360, up=999999999999999983222784.000000
ITER 6: row=1, varin=14, theta=5.630337, up=999999999999999983222784.000000
ITER 7: row=36, varin=90, theta=4.630337, up=1.000000
ITER 8: row=36, varin=91, theta=3.630337, up=1.000000
ITER 9: row=36, varin=62, theta=13.432416, up=1.000000
ITER 10: row=36, varin=60, theta=5.556024, up=1.000000
DEBUG EVAL: Branch var 9 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x9 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=13, varin=74, theta=0.074683, up=1.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=37)
DEBUG SOLUTION: LP solution array indices: FST[38-77], not_covered[78-97]
DEBUG SOLUTION: lp->best_solution[0] = 28078931.743351
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 6.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 37 rows, 60 cols, 241 nonzeros, 0 slack, 37 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 0 at  28.07893174335112718154
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x55895154f600
% @LO 0.02  28.07852010714604062969 99.9000000000
% @LN 0.02  28.07893174335112718154 99.9000000000
% Resuming node 0 at  28.07893174335112718154
DEBUG CONSTRNT: LP rows=37, pool->nlprows=37, pool->npend=0
DEBUG CONSTRNT: Checking 37 LP rows (pool tracks 37, total LP rows 37)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 33
DEBUG CONSTRNT: Pool row 33 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 86
DEBUG CONSTRNT: Pool row 86 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 105
DEBUG CONSTRNT: Pool row 105 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 28
DEBUG CONSTRNT: Pool row 28 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 54
DEBUG CONSTRNT: Pool row 54 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 10
DEBUG CONSTRNT: Pool row 10 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 61
DEBUG CONSTRNT: Pool row 61 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 78
DEBUG CONSTRNT: Pool row 78 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=36, expected 36
 % @PAP adding 37 rows, 181 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 0 LP 21 Solution, length = 28078931.743351, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.074683 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.000000 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.000000 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 1.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.074683 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 0.925317 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 1.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 1.000000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 0.925317 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.925317 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 1.000000 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 1.000000 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 2 fractional variables
DEBUG CG: LP optimal, z=28078931.743351, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=28078931.743351, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 0 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 0
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.074683
DEBUG CAREFUL: Adding var 7 to fractional list (xi=0.074683)
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.000000
DEBUG CAREFUL: Skipping var 21: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.000000
DEBUG CAREFUL: Skipping var 25: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=1.000000
DEBUG CAREFUL: Skipping var 27: xi+FUZZ=1.000001 >= 1.0
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.074683
DEBUG CAREFUL: Adding var 36 to fractional list (xi=0.074683)
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 2 fractional variables

  %  Carefully choosing branching variable, nfrac = 2
DEBUG CAREFUL: Testing fvar[0] = var 7
DEBUG CAREFUL: Calling compare_branch_vars for var 7
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 7
DEBUG CAREFUL: New best var: 7
DEBUG CAREFUL: Testing fvar[1] = var 36
DEBUG CAREFUL: Calling compare_branch_vars for var 36
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 36
  % Initial guess is x7, Z0 = 28078931.7433511        , Z1 = 32059539.2554504        

DEBUG EVAL: Testing var 7 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=1, varin=38, theta=5.863006, up=1.000000
ITER 2: row=1, varin=91, theta=6.168797, up=1.000000
ITER 3: row=1, varin=41, theta=3.427532, up=1.000000
ITER 4: row=1, varin=60, theta=1.663422, up=1.000000
ITER 5: row=1, varin=55, theta=1.329364, up=1.000000
ITER 6: row=1, varin=64, theta=0.695236, up=1.000000
ITER 7: row=28, varin=55, theta=3.778517, up=1.000000
ITER 8: row=28, varin=38, theta=6.918153, up=1.000000
ITER 9: row=28, varin=41, theta=8.390981, up=1.000000
DEBUG EVAL: Branch var 7 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x7 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=1, varin=3, theta=0.306513, up=999999999999999983222784.000000
ITER 2: row=3, varin=34, theta=0.217288, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=37)
DEBUG SOLUTION: LP solution array indices: FST[38-77], not_covered[78-97]
DEBUG SOLUTION: lp->best_solution[0] = 28103210.155828
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 6.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 37 rows, 60 cols, 241 nonzeros, 1 slack, 36 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 1 slack rows
   % @PAP adding 2 rows, 11 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=37, varin=35, theta=0.217288, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=38)
DEBUG SOLUTION: LP solution array indices: FST[39-78], not_covered[79-98]
DEBUG SOLUTION: lp->best_solution[0] = 28103210.155828
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 6.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 38 rows, 60 cols, 250 nonzeros, 2 slack, 36 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @PAP adding 2 rows, 8 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=40, varin=41, theta=0.018828, up=1.000000
ITER 2: row=39, varin=40, theta=0.490932, up=999999999999999983222784.000000
ITER 3: row=2, varin=82, theta=0.085519, up=1.000000
LP PHASE: Switching to primal (iter=3)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=40)
DEBUG SOLUTION: LP solution array indices: FST[41-80], not_covered[81-100]
DEBUG SOLUTION: lp->best_solution[0] = 28109166.193168
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 0.914481
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 6.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 40 rows, 60 cols, 258 nonzeros, 4 slack, 36 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 4 slack rows
   % @PAP adding 4 rows, 15 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=37, varin=10, theta=0.141021, up=999999999999999983222784.000000
ITER 2: row=39, varin=61, theta=0.027824, up=1.000000
ITER 3: row=6, varin=65, theta=0.168297, up=1.000000
LP PHASE: Switching to primal (iter=3)
ITER 4: row=5, varin=58, theta=0.000000, up=1.000000
ITER 5: row=19, varin=84, theta=0.000000, up=1.000000
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=40)
DEBUG SOLUTION: LP solution array indices: FST[41-80], not_covered[81-100]
DEBUG SOLUTION: lp->best_solution[0] = 28114672.648953
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 6.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 40 rows, 60 cols, 254 nonzeros, 0 slack, 40 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @PAP adding 4 rows, 11 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=41, varin=5, theta=0.031910, up=999999999999999983222784.000000
ITER 2: row=21, varin=100, theta=0.019041, up=1.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=44)
DEBUG SOLUTION: LP solution array indices: FST[45-84], not_covered[85-104]
DEBUG SOLUTION: lp->best_solution[0] = 28115553.179418
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 0.980959
DEBUG SOLUTION: lp->best_solution[4] = 0.980959
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 0.980959
DEBUG SOLUTION: lp->best_solution[8] = 0.980959
DEBUG SOLUTION: lp->best_solution[9] = 5.923838
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 44 rows, 60 cols, 265 nonzeros, 11 slack, 33 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 11 slack rows
   % @PAP adding 8 rows, 36 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=36, varin=6, theta=0.004315, up=999999999999999983222784.000000
ITER 2: row=41, varin=101, theta=0.004403, up=1.000000
ITER 3: row=37, varin=45, theta=0.064998, up=1.000000
LP PHASE: Switching to primal (iter=3)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=41)
DEBUG SOLUTION: LP solution array indices: FST[42-81], not_covered[82-101]
DEBUG SOLUTION: lp->best_solution[0] = 28117281.902003
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 0.992778
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 2.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 41 rows, 60 cols, 268 nonzeros, 3 slack, 38 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 3 slack rows
   % @PAP adding 5 rows, 21 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=39, varin=6, theta=0.016325, up=999999999999999983222784.000000
ITER 2: row=36, varin=54, theta=0.045635, up=1.000000
ITER 3: row=8, varin=38, theta=0.121364, up=999999999999999983222784.000000
ITER 4: row=41, varin=39, theta=0.016255, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=4)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=43)
DEBUG SOLUTION: LP solution array indices: FST[44-83], not_covered[84-103]
DEBUG SOLUTION: lp->best_solution[0] = 28118433.238134
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 0.978326
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 2.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 0.000000
   % @PL 43 rows, 60 cols, 283 nonzeros, 7 slack, 36 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 7 slack rows
   % @PAP adding 2 rows, 4 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=37, varin=32, theta=0.109871, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=38)
DEBUG SOLUTION: LP solution array indices: FST[39-78], not_covered[79-98]
DEBUG SOLUTION: lp->best_solution[0] = 28119045.241369
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 2.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 0.000000
DEBUG SOLUTION: lp->best_solution[14] = 150000.000000
   % @PL 38 rows, 60 cols, 250 nonzeros, 1 slack, 37 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 1 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 0 at  28.11904524136859251371
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x55895154f600
% @LO 0.02  28.07893174335112718154 99.9000000000
% @LN 0.02  28.11904524136859251371 99.9000000000
% Resuming node 0 at  28.11904524136859251371
DEBUG CONSTRNT: LP rows=37, pool->nlprows=37, pool->npend=0
DEBUG CONSTRNT: Checking 37 LP rows (pool tracks 37, total LP rows 37)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 18
DEBUG CONSTRNT: Pool row 18 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 103
DEBUG CONSTRNT: Pool row 103 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 28
DEBUG CONSTRNT: Pool row 28 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 54
DEBUG CONSTRNT: Pool row 54 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 61
DEBUG CONSTRNT: Pool row 61 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 22
DEBUG CONSTRNT: Pool row 22 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 26
DEBUG CONSTRNT: Pool row 26 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 27
DEBUG CONSTRNT: Pool row 27 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 32
DEBUG CONSTRNT: Pool row 32 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 8
DEBUG CONSTRNT: Pool row 8 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 127
DEBUG CONSTRNT: Pool row 127 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 34
DEBUG CONSTRNT: Pool row 34 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 37
DEBUG CONSTRNT: Pool row 37 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 39
DEBUG CONSTRNT: Pool row 39 has lprow=36, expected 36
 % @PAP adding 37 rows, 180 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 0 LP 22 Solution, length = 28119045.241369, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.018312 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.018312 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.018312 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.000000 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.000000 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 1.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.073247 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 0.926753 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 0.981688 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.981688 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 1.000000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 1.000000 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.926753 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 0.981688 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 0.981688 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 1.000000 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 1.000000 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 0.981688 (terminal 19)
 % 4 fractional variables
DEBUG CG: LP optimal, z=28119045.241369, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=28119045.241369, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 3 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 0 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 0
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.018312
DEBUG CAREFUL: Adding var 3 to fractional list (xi=0.018312)
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.018312
DEBUG CAREFUL: Adding var 17 to fractional list (xi=0.018312)
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.018312
DEBUG CAREFUL: Adding var 20 to fractional list (xi=0.018312)
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.000000
DEBUG CAREFUL: Skipping var 21: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.000000
DEBUG CAREFUL: Skipping var 25: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=1.000000
DEBUG CAREFUL: Skipping var 27: xi+FUZZ=1.000001 >= 1.0
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.073247
DEBUG CAREFUL: Adding var 36 to fractional list (xi=0.073247)
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 4 fractional variables

  %  Carefully choosing branching variable, nfrac = 4
DEBUG CAREFUL: Testing fvar[0] = var 20
DEBUG CAREFUL: Calling compare_branch_vars for var 20
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 20
DEBUG CAREFUL: New best var: 20
DEBUG CAREFUL: Testing fvar[1] = var 17
DEBUG CAREFUL: Calling compare_branch_vars for var 17
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 17
DEBUG CAREFUL: Testing fvar[2] = var 36
DEBUG CAREFUL: Calling compare_branch_vars for var 36
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 36
DEBUG CAREFUL: Testing fvar[3] = var 3
DEBUG CAREFUL: Calling compare_branch_vars for var 3
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 3
  % Initial guess is x20, Z0 = 28119045.2413686        , Z1 = 38767475.7655818        

DEBUG EVAL: Testing var 20 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=4, varin=10, theta=1.650761, up=999999999999999983222784.000000
ITER 2: row=34, varin=7, theta=1.960383, up=999999999999999983222784.000000
ITER 3: row=7, varin=33, theta=1.445865, up=999999999999999983222784.000000
ITER 4: row=14, varin=26, theta=4.392555, up=999999999999999983222784.000000
ITER 5: row=25, varin=48, theta=71.578611, up=1.000000
ITER 6: row=25, varin=73, theta=45.524855, up=1.000000
ITER 7: row=25, varin=91, theta=9.569965, up=1.000000
ITER 8: row=25, varin=60, theta=3.826195, up=1.000000
ITER 9: row=25, varin=64, theta=11.725973, up=1.000000
ITER 10: row=25, varin=69, theta=5.887367, up=1.000000
DEBUG EVAL: Branch var 20 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x20 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=4, varin=73, theta=0.112216, up=1.000000
LP PHASE: Switching to primal (iter=1)
ITER 2: row=30, varin=17, theta=0.000000, up=999999999999999983222784.000000
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=37)
DEBUG SOLUTION: LP solution array indices: FST[38-77], not_covered[78-97]
DEBUG SOLUTION: lp->best_solution[0] = 28119753.763065
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 2.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 0.000000
DEBUG SOLUTION: lp->best_solution[14] = 150000.000000
   % @PL 37 rows, 60 cols, 240 nonzeros, 0 slack, 37 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @PAP adding 4 rows, 29 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=38, varin=9, theta=0.087934, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=41)
DEBUG SOLUTION: LP solution array indices: FST[42-81], not_covered[82-101]
DEBUG SOLUTION: lp->best_solution[0] = 28120040.160222
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 0.912066
DEBUG SOLUTION: lp->best_solution[9] = 1.912066
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 0.000000
DEBUG SOLUTION: lp->best_solution[14] = 150000.000000
   % @PL 41 rows, 60 cols, 269 nonzeros, 2 slack, 39 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 2 slack rows
   % @PAP adding 4 rows, 20 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=40, varin=9, theta=0.035876, up=999999999999999983222784.000000
ITER 2: row=3, varin=34, theta=0.088540, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=43)
DEBUG SOLUTION: LP solution array indices: FST[44-83], not_covered[84-103]
DEBUG SOLUTION: lp->best_solution[0] = 28122378.718527
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 0.000000
DEBUG SOLUTION: lp->best_solution[12] = 150000.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 43 rows, 60 cols, 284 nonzeros, 2 slack, 41 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 2 slack rows
   % @PAP adding 4 rows, 19 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=42, varin=4, theta=0.042971, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=45)
DEBUG SOLUTION: LP solution array indices: FST[46-85], not_covered[86-105]
DEBUG SOLUTION: lp->best_solution[0] = 28124917.498034
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 0.957029
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 0.957029
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 0.000000
DEBUG SOLUTION: lp->best_solution[12] = 150000.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 45 rows, 60 cols, 299 nonzeros, 7 slack, 38 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 7 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 0 at  28.12491749803389495810
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x55895154f600
% @LO 0.02  28.11904524136859251371 99.9000000000
% @LN 0.02  28.12491749803389495810 99.9000000000
% Resuming node 0 at  28.12491749803389495810
DEBUG CONSTRNT: LP rows=38, pool->nlprows=38, pool->npend=0
DEBUG CONSTRNT: Checking 38 LP rows (pool tracks 38, total LP rows 38)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 17
DEBUG CONSTRNT: Pool row 17 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 23
DEBUG CONSTRNT: Pool row 23 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 101
DEBUG CONSTRNT: Pool row 101 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 28
DEBUG CONSTRNT: Pool row 28 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 54
DEBUG CONSTRNT: Pool row 54 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 61
DEBUG CONSTRNT: Pool row 61 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 22
DEBUG CONSTRNT: Pool row 22 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 26
DEBUG CONSTRNT: Pool row 26 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 27
DEBUG CONSTRNT: Pool row 27 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 32
DEBUG CONSTRNT: Pool row 32 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 8
DEBUG CONSTRNT: Pool row 8 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 89
DEBUG CONSTRNT: Pool row 89 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 125
DEBUG CONSTRNT: Pool row 125 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 34
DEBUG CONSTRNT: Pool row 34 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 52
DEBUG CONSTRNT: Pool row 52 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 53
DEBUG CONSTRNT: Pool row 53 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 72
DEBUG CONSTRNT: Pool row 72 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 73
DEBUG CONSTRNT: Pool row 73 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=37, expected 37
 % @PAP adding 38 rows, 206 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 0 LP 23 Solution, length = 28124917.498034, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.042971 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.042971 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.000000 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.000000 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 1.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.042971 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 0.957029 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 0.957029 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.957029 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 1.000000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 1.000000 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 0.957029 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 0.957029 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 1.000000 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 1.000000 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 0.957029 (terminal 19)
 % 3 fractional variables
DEBUG CG: LP optimal, z=28124917.498034, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=28124917.498034, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 3 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 0 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 0
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.042971
DEBUG CAREFUL: Adding var 3 to fractional list (xi=0.042971)
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.042971
DEBUG CAREFUL: Adding var 17 to fractional list (xi=0.042971)
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.000000
DEBUG CAREFUL: Skipping var 21: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.000000
DEBUG CAREFUL: Skipping var 25: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=1.000000
DEBUG CAREFUL: Skipping var 27: xi+FUZZ=1.000001 >= 1.0
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.042971
DEBUG CAREFUL: Adding var 36 to fractional list (xi=0.042971)
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 3 fractional variables

  %  Carefully choosing branching variable, nfrac = 3
DEBUG CAREFUL: Testing fvar[0] = var 17
DEBUG CAREFUL: Calling compare_branch_vars for var 17
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 17
DEBUG CAREFUL: New best var: 17
DEBUG CAREFUL: Testing fvar[1] = var 36
DEBUG CAREFUL: Calling compare_branch_vars for var 36
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 36
DEBUG CAREFUL: Testing fvar[2] = var 3
DEBUG CAREFUL: Calling compare_branch_vars for var 3
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 3
  % Initial guess is x17, Z0 = 28124917.4980339        , Z1 = 34858271.2396166        

DEBUG EVAL: Testing var 17 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=3, varin=24, theta=-8.948016, up=999999999999999983222784.000000
ITER 2: row=23, varin=37, theta=1.971896, up=999999999999999983222784.000000
ITER 3: row=19, varin=35, theta=0.965247, up=999999999999999983222784.000000
ITER 4: row=6, varin=31, theta=1.231785, up=999999999999999983222784.000000
ITER 5: row=31, varin=30, theta=0.690523, up=999999999999999983222784.000000
ITER 6: row=30, varin=22, theta=1.131588, up=999999999999999983222784.000000
ITER 7: row=21, varin=20, theta=1.567890, up=999999999999999983222784.000000
ITER 8: row=25, varin=18, theta=2.385152, up=999999999999999983222784.000000
ITER 9: row=18, varin=2, theta=2.423089, up=999999999999999983222784.000000
ITER 10: row=2, varin=65, theta=5.741771, up=1.000000
DEBUG EVAL: Branch var 17 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x17 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=3, varin=65, theta=0.165659, up=1.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=38)
DEBUG SOLUTION: LP solution array indices: FST[39-78], not_covered[79-98]
DEBUG SOLUTION: lp->best_solution[0] = 28129184.660928
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 0.000000
DEBUG SOLUTION: lp->best_solution[10] = 150000.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 38 rows, 60 cols, 266 nonzeros, 0 slack, 38 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @PAP adding 4 rows, 17 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=39, varin=28, theta=0.078086, up=999999999999999983222784.000000
ITER 2: row=42, varin=61, theta=0.041662, up=1.000000
ITER 3: row=36, varin=39, theta=0.061092, up=999999999999999983222784.000000
ITER 4: row=1, varin=29, theta=0.004415, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=4)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=42)
DEBUG SOLUTION: LP solution array indices: FST[43-82], not_covered[83-102]
DEBUG SOLUTION: lp->best_solution[0] = 28131116.075651
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 0.000000
DEBUG SOLUTION: lp->best_solution[10] = 150000.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 42 rows, 60 cols, 283 nonzeros, 5 slack, 37 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 5 slack rows
   % @PAP adding 7 rows, 28 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=38, varin=71, theta=0.180991, up=1.000000
LP PHASE: Switching to primal (iter=1)
ITER 2: row=19, varin=24, theta=0.114880, up=999999999999999983222784.000000
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=44)
DEBUG SOLUTION: LP solution array indices: FST[45-84], not_covered[85-104]
DEBUG SOLUTION: lp->best_solution[0] = 28131475.236145
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 0.885120
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 0.000000
DEBUG SOLUTION: lp->best_solution[10] = 150000.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 0.885120
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 44 rows, 60 cols, 300 nonzeros, 8 slack, 36 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 8 slack rows
   % @PAP adding 3 rows, 7 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=1, varin=76, theta=19.000000, up=1.000000
ITER 2: row=1, varin=40, theta=9.000000, up=1.000000
ITER 3: row=1, varin=58, theta=5.333333, up=1.000000
ITER 4: row=1, varin=75, theta=13.000000, up=1.000000
ITER 5: row=1, varin=67, theta=12.000000, up=1.000000
ITER 6: row=1, varin=50, theta=5.500000, up=1.000000
ITER 7: row=1, varin=43, theta=4.500000, up=1.000000
ITER 8: row=1, varin=51, theta=3.500000, up=1.000000
ITER 9: row=1, varin=44, theta=2.500000, up=1.000000
ITER 10: row=1, varin=73, theta=3.000000, up=1.000000
LP PHASE: Switching to primal (iter=69)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=39)
DEBUG SOLUTION: LP solution array indices: FST[40-79], not_covered[80-99]
DEBUG SOLUTION: lp->best_solution[0] = 28133572.131448
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 0.000000
DEBUG SOLUTION: lp->best_solution[9] = 150000.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 39 rows, 60 cols, 282 nonzeros, 4 slack, 35 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 4 slack rows
   % @PAP adding 1 rows, 2 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=36, varin=22, theta=0.025200, up=999999999999999983222784.000000
ITER 2: row=33, varin=34, theta=0.129379, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=36)
DEBUG SOLUTION: LP solution array indices: FST[37-76], not_covered[77-96]
DEBUG SOLUTION: lp->best_solution[0] = 28135181.988605
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 0.974124
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 0.974124
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 0.000000
DEBUG SOLUTION: lp->best_solution[9] = 150000.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 36 rows, 60 cols, 271 nonzeros, 4 slack, 32 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 4 slack rows
   % @PAP adding 3 rows, 10 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=33, varin=30, theta=0.149429, up=999999999999999983222784.000000
ITER 2: row=20, varin=28, theta=0.131353, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=35)
DEBUG SOLUTION: LP solution array indices: FST[36-75], not_covered[76-95]
DEBUG SOLUTION: lp->best_solution[0] = 28136793.564770
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 0.000000
DEBUG SOLUTION: lp->best_solution[7] = 150000.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 35 rows, 60 cols, 259 nonzeros, 2 slack, 33 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 2 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 0 at  28.13679356477032200701
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x55895154f600
% @LO 0.02  28.12491749803389495810 99.9000000000
% @LN 0.02  28.13679356477032200701 99.9000000000
% Resuming node 0 at  28.13679356477032200701
DEBUG CONSTRNT: LP rows=33, pool->nlprows=33, pool->npend=0
DEBUG CONSTRNT: Checking 33 LP rows (pool tracks 33, total LP rows 33)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 54
DEBUG CONSTRNT: Pool row 54 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 61
DEBUG CONSTRNT: Pool row 61 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 22
DEBUG CONSTRNT: Pool row 22 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 27
DEBUG CONSTRNT: Pool row 27 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 34
DEBUG CONSTRNT: Pool row 34 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 52
DEBUG CONSTRNT: Pool row 52 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 53
DEBUG CONSTRNT: Pool row 53 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 72
DEBUG CONSTRNT: Pool row 72 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 73
DEBUG CONSTRNT: Pool row 73 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 38
DEBUG CONSTRNT: Pool row 38 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=32, expected 32
 % @PAP adding 33 rows, 183 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 0 LP 24 Solution, length = 28136793.564770, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.043784 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.021892 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.021892 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.021892 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.000000 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.000000 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.021892 (FST 26)
  % DEBUG LP_VARS: x[27] = 1.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 0.956216 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 0.978108 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 0.956216 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 0.956216 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.978108 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 1.000000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 1.000000 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 1.000000 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 0.978108 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 0.978108 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 0.978108 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 1.000000 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 1.000000 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 0.978108 (terminal 19)
 % 5 fractional variables
DEBUG CG: LP optimal, z=28136793.564770, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=28136793.564770, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 3 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 0 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 0
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.043784
DEBUG CAREFUL: Adding var 0 to fractional list (xi=0.043784)
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.021892
DEBUG CAREFUL: Adding var 3 to fractional list (xi=0.021892)
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.021892
DEBUG CAREFUL: Adding var 10 to fractional list (xi=0.021892)
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.021892
DEBUG CAREFUL: Adding var 18 to fractional list (xi=0.021892)
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.000000
DEBUG CAREFUL: Skipping var 21: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.000000
DEBUG CAREFUL: Skipping var 25: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.021892
DEBUG CAREFUL: Adding var 26 to fractional list (xi=0.021892)
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=1.000000
DEBUG CAREFUL: Skipping var 27: xi+FUZZ=1.000001 >= 1.0
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 5 fractional variables

  %  Carefully choosing branching variable, nfrac = 5
DEBUG CAREFUL: Testing fvar[0] = var 18
DEBUG CAREFUL: Calling compare_branch_vars for var 18
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 18
DEBUG CAREFUL: New best var: 18
DEBUG CAREFUL: Testing fvar[1] = var 3
DEBUG CAREFUL: Calling compare_branch_vars for var 3
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 3
DEBUG CAREFUL: Testing fvar[2] = var 0
DEBUG CAREFUL: Calling compare_branch_vars for var 0
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 0
DEBUG CAREFUL: Testing fvar[3] = var 10
DEBUG CAREFUL: Calling compare_branch_vars for var 10
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 10
DEBUG CAREFUL: Testing fvar[4] = var 26
DEBUG CAREFUL: Calling compare_branch_vars for var 26
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 26
  % Initial guess is x18, Z0 = 28136793.5647703        , Z1 = 38643430.1384466        

DEBUG EVAL: Testing var 18 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=7, varin=20, theta=6.676224, up=999999999999999983222784.000000
ITER 2: row=29, varin=70, theta=17.950587, up=1.000000
ITER 3: row=29, varin=25, theta=2.758302, up=999999999999999983222784.000000
ITER 4: row=33, varin=30, theta=4.948630, up=999999999999999983222784.000000
ITER 5: row=1, varin=70, theta=5.576723, up=1.000000
ITER 6: row=1, varin=27, theta=5.254511, up=999999999999999983222784.000000
ITER 7: row=26, varin=31, theta=4.192482, up=999999999999999983222784.000000
ITER 8: row=20, varin=56, theta=2.919767, up=1.000000
ITER 9: row=20, varin=65, theta=2.993734, up=1.000000
ITER 10: row=20, varin=67, theta=2.865472, up=1.000000
DEBUG EVAL: Branch var 18 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x18 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=7, varin=67, theta=0.088825, up=1.000000
LP PHASE: Switching to primal (iter=1)
ITER 2: row=23, varin=81, theta=0.000000, up=1.000000
ITER 3: row=2, varin=45, theta=0.039642, up=1.000000
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=33)
DEBUG SOLUTION: LP solution array indices: FST[34-73], not_covered[74-93]
DEBUG SOLUTION: lp->best_solution[0] = 28138815.003765
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 0.000000
DEBUG SOLUTION: lp->best_solution[7] = 150000.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 33 rows, 60 cols, 243 nonzeros, 0 slack, 33 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @PAP adding 6 rows, 34 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=34, varin=73, theta=0.088825, up=1.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=39)
DEBUG SOLUTION: LP solution array indices: FST[40-79], not_covered[80-99]
DEBUG SOLUTION: lp->best_solution[0] = 28138872.271833
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 0.000000
DEBUG SOLUTION: lp->best_solution[7] = 150000.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 39 rows, 60 cols, 277 nonzeros, 0 slack, 39 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 0 at  28.13887227183328576530
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x55895154f600
% @LO 0.02  28.13679356477032200701 99.9000000000
% @LN 0.02  28.13887227183328576530 99.9000000000
% Resuming node 0 at  28.13887227183328576530
DEBUG CONSTRNT: LP rows=39, pool->nlprows=39, pool->npend=0
DEBUG CONSTRNT: Checking 39 LP rows (pool tracks 39, total LP rows 39)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 54
DEBUG CONSTRNT: Pool row 54 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 61
DEBUG CONSTRNT: Pool row 61 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 22
DEBUG CONSTRNT: Pool row 22 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 27
DEBUG CONSTRNT: Pool row 27 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 34
DEBUG CONSTRNT: Pool row 34 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 52
DEBUG CONSTRNT: Pool row 52 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 53
DEBUG CONSTRNT: Pool row 53 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 72
DEBUG CONSTRNT: Pool row 72 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 73
DEBUG CONSTRNT: Pool row 73 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 38
DEBUG CONSTRNT: Pool row 38 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 102
DEBUG CONSTRNT: Pool row 102 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 88
DEBUG CONSTRNT: Pool row 88 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 126
DEBUG CONSTRNT: Pool row 126 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 36
DEBUG CONSTRNT: Pool row 36 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 42
DEBUG CONSTRNT: Pool row 42 has lprow=34, expected 34
DEBUG CONSTRNT: Checking LP row 35 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=35, expected 35
DEBUG CONSTRNT: Checking LP row 36 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=36, expected 36
DEBUG CONSTRNT: Checking LP row 37 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=37, expected 37
DEBUG CONSTRNT: Checking LP row 38 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=38, expected 38
 % @PAP adding 39 rows, 217 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 0 LP 25 Solution, length = 28138872.271833, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.088825 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.000000 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.000000 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 1.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.088825 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 0.911175 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 0.911175 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 0.911175 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 1.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 1.000000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 1.000000 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 1.000000 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 1.000000 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 1.000000 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 2 fractional variables
DEBUG CG: LP optimal, z=28138872.271833, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=28138872.271833, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 0 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 0
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.088825
DEBUG CAREFUL: Adding var 0 to fractional list (xi=0.088825)
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.000000
DEBUG CAREFUL: Skipping var 21: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.000000
DEBUG CAREFUL: Skipping var 25: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=1.000000
DEBUG CAREFUL: Skipping var 27: xi+FUZZ=1.000001 >= 1.0
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.088825
DEBUG CAREFUL: Adding var 33 to fractional list (xi=0.088825)
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 2 fractional variables

  %  Carefully choosing branching variable, nfrac = 2
DEBUG CAREFUL: Testing fvar[0] = var 33
DEBUG CAREFUL: Calling compare_branch_vars for var 33
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 33
DEBUG CAREFUL: New best var: 33
DEBUG CAREFUL: Testing fvar[1] = var 0
DEBUG CAREFUL: Calling compare_branch_vars for var 0
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 0
DEBUG CAREFUL: New best var: 0
  % Initial guess is x0, Z0 = 28138872.2718333        , Z1 = 31263805.7670246        

DEBUG EVAL: Testing var 33 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=2, varin=34, theta=0.406656, up=999999999999999983222784.000000
ITER 2: row=34, varin=76, theta=4.121440, up=1.000000
ITER 3: row=34, varin=30, theta=0.911287, up=999999999999999983222784.000000
ITER 4: row=1, varin=23, theta=1.802918, up=999999999999999983222784.000000
ITER 5: row=22, varin=20, theta=1.160933, up=999999999999999983222784.000000
ITER 6: row=37, varin=25, theta=1.147593, up=999999999999999983222784.000000
ITER 7: row=39, varin=76, theta=1.128786, up=1.000000
ITER 8: row=39, varin=27, theta=0.160378, up=999999999999999983222784.000000
ITER 9: row=30, varin=76, theta=0.373946, up=1.000000
ITER 10: row=20, varin=31, theta=0.635857, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 33 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x33 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=2, varin=44, theta=0.038964, up=1.000000
ITER 2: row=35, varin=28, theta=0.004890, up=999999999999999983222784.000000
ITER 3: row=39, varin=32, theta=0.005344, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=3)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=39)
DEBUG SOLUTION: LP solution array indices: FST[40-79], not_covered[80-99]
DEBUG SOLUTION: lp->best_solution[0] = 28141380.389522
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 0.000000
DEBUG SOLUTION: lp->best_solution[7] = 150000.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 39 rows, 60 cols, 277 nonzeros, 6 slack, 33 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 6 slack rows
   % @PAP adding 4 rows, 13 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=34, varin=31, theta=0.113560, up=999999999999999983222784.000000
ITER 2: row=37, varin=33, theta=0.085185, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=37)
DEBUG SOLUTION: LP solution array indices: FST[38-77], not_covered[78-97]
DEBUG SOLUTION: lp->best_solution[0] = 28143301.622162
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 0.000000
DEBUG SOLUTION: lp->best_solution[7] = 150000.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 37 rows, 60 cols, 272 nonzeros, 3 slack, 34 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 3 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 0 at  28.14330162216162278810
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x55895154f600
% @LO 0.02  28.13887227183328576530 99.9000000000
% @LN 0.02  28.14330162216162278810 99.9000000000
% Resuming node 0 at  28.14330162216162278810
DEBUG CONSTRNT: LP rows=34, pool->nlprows=34, pool->npend=0
DEBUG CONSTRNT: Checking 34 LP rows (pool tracks 34, total LP rows 34)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 54
DEBUG CONSTRNT: Pool row 54 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 61
DEBUG CONSTRNT: Pool row 61 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 22
DEBUG CONSTRNT: Pool row 22 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 27
DEBUG CONSTRNT: Pool row 27 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 34
DEBUG CONSTRNT: Pool row 34 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 52
DEBUG CONSTRNT: Pool row 52 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 53
DEBUG CONSTRNT: Pool row 53 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 72
DEBUG CONSTRNT: Pool row 72 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 73
DEBUG CONSTRNT: Pool row 73 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 36
DEBUG CONSTRNT: Pool row 36 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 16
DEBUG CONSTRNT: Pool row 16 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 35
DEBUG CONSTRNT: Pool row 35 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 122
DEBUG CONSTRNT: Pool row 122 has lprow=33, expected 33
 % @PAP adding 34 rows, 185 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 0 LP 26 Solution, length = 28143301.622162, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.051111 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.017037 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.017037 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.017037 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.017037 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.000000 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.000000 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.017037 (FST 26)
  % DEBUG LP_VARS: x[27] = 1.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 0.948889 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 0.982963 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 0.948889 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 0.948889 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.982963 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 1.000000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 1.000000 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 1.000000 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 0.982963 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 0.982963 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 0.982963 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 1.000000 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 1.000000 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 0.982963 (terminal 19)
 % 6 fractional variables
DEBUG CG: LP optimal, z=28143301.622162, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=28143301.622162, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 3 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 0 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 0
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.051111
DEBUG CAREFUL: Adding var 0 to fractional list (xi=0.051111)
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.017037
DEBUG CAREFUL: Adding var 3 to fractional list (xi=0.017037)
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.017037
DEBUG CAREFUL: Adding var 4 to fractional list (xi=0.017037)
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.017037
DEBUG CAREFUL: Adding var 10 to fractional list (xi=0.017037)
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.017037
DEBUG CAREFUL: Adding var 11 to fractional list (xi=0.017037)
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.000000
DEBUG CAREFUL: Skipping var 21: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.000000
DEBUG CAREFUL: Skipping var 25: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.017037
DEBUG CAREFUL: Adding var 26 to fractional list (xi=0.017037)
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=1.000000
DEBUG CAREFUL: Skipping var 27: xi+FUZZ=1.000001 >= 1.0
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 6 fractional variables

  %  Carefully choosing branching variable, nfrac = 6
DEBUG CAREFUL: Testing fvar[0] = var 4
DEBUG CAREFUL: Calling compare_branch_vars for var 4
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 4
DEBUG CAREFUL: New best var: 4
DEBUG CAREFUL: Testing fvar[1] = var 3
DEBUG CAREFUL: Calling compare_branch_vars for var 3
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 3
DEBUG CAREFUL: Testing fvar[2] = var 11
DEBUG CAREFUL: Calling compare_branch_vars for var 11
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 11
DEBUG CAREFUL: Testing fvar[3] = var 0
DEBUG CAREFUL: Calling compare_branch_vars for var 0
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 0
DEBUG CAREFUL: Testing fvar[4] = var 10
DEBUG CAREFUL: Calling compare_branch_vars for var 10
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 10
DEBUG CAREFUL: Testing fvar[5] = var 26
DEBUG CAREFUL: Calling compare_branch_vars for var 26
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 26
  % Initial guess is x4, Z0 = 28143301.6221616        , Z1 = 35103042.1772642        

DEBUG EVAL: Testing var 4 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=7, varin=71, theta=23.180643, up=1.000000
ITER 2: row=7, varin=30, theta=2.188530, up=999999999999999983222784.000000
ITER 3: row=1, varin=71, theta=2.961467, up=1.000000
ITER 4: row=1, varin=23, theta=4.608151, up=999999999999999983222784.000000
ITER 5: row=22, varin=26, theta=2.967277, up=999999999999999983222784.000000
ITER 6: row=33, varin=29, theta=2.933181, up=999999999999999983222784.000000
ITER 7: row=4, varin=66, theta=5.250188, up=1.000000
ITER 8: row=4, varin=57, theta=2.310414, up=1.000000
ITER 9: row=4, varin=62, theta=3.607106, up=1.000000
ITER 10: row=4, varin=20, theta=3.710374, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 4 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x4 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=7, varin=66, theta=0.098814, up=1.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=34)
DEBUG SOLUTION: LP solution array indices: FST[35-74], not_covered[75-94]
DEBUG SOLUTION: lp->best_solution[0] = 28144494.478928
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 0.000000
DEBUG SOLUTION: lp->best_solution[7] = 150000.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 34 rows, 60 cols, 245 nonzeros, 0 slack, 34 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @PAP adding 2 rows, 12 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=35, varin=32, theta=0.028615, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=36)
DEBUG SOLUTION: LP solution array indices: FST[37-76], not_covered[77-96]
DEBUG SOLUTION: lp->best_solution[0] = 28145068.359177
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 0.000000
DEBUG SOLUTION: lp->best_solution[7] = 150000.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 36 rows, 60 cols, 257 nonzeros, 3 slack, 33 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 3 slack rows
   % @PAP adding 2 rows, 12 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=34, varin=32, theta=0.023175, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=35)
DEBUG SOLUTION: LP solution array indices: FST[36-75], not_covered[76-95]
DEBUG SOLUTION: lp->best_solution[0] = 28145178.966454
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 0.000000
DEBUG SOLUTION: lp->best_solution[7] = 150000.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 35 rows, 60 cols, 255 nonzeros, 2 slack, 33 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 2 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 0 at  28.14517896645372019293
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x55895154f600
% @LO 0.02  28.14330162216162278810 99.9000000000
% @LN 0.02  28.14517896645372019293 99.9000000000
% Resuming node 0 at  28.14517896645372019293
DEBUG CONSTRNT: LP rows=33, pool->nlprows=33, pool->npend=0
DEBUG CONSTRNT: Checking 33 LP rows (pool tracks 33, total LP rows 33)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 54
DEBUG CONSTRNT: Pool row 54 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 61
DEBUG CONSTRNT: Pool row 61 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 22
DEBUG CONSTRNT: Pool row 22 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 27
DEBUG CONSTRNT: Pool row 27 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 34
DEBUG CONSTRNT: Pool row 34 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 52
DEBUG CONSTRNT: Pool row 52 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 53
DEBUG CONSTRNT: Pool row 53 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 72
DEBUG CONSTRNT: Pool row 72 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 73
DEBUG CONSTRNT: Pool row 73 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 36
DEBUG CONSTRNT: Pool row 36 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 40
DEBUG CONSTRNT: Pool row 40 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=32, expected 32
 % @PAP adding 33 rows, 183 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 0 LP 27 Solution, length = 28145178.966454, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.046349 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.023175 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.023175 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.023175 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.000000 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.000000 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.023175 (FST 26)
  % DEBUG LP_VARS: x[27] = 1.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.023175 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 0.953651 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 0.976825 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 0.953651 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 0.953651 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.976825 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 1.000000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 1.000000 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 1.000000 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 0.976825 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 0.976825 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 0.976825 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 1.000000 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 1.000000 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 0.976825 (terminal 19)
 % 6 fractional variables
DEBUG CG: LP optimal, z=28145178.966454, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=28145178.966454, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.01/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 0 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 0
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.046349
DEBUG CAREFUL: Adding var 0 to fractional list (xi=0.046349)
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.023175
DEBUG CAREFUL: Adding var 3 to fractional list (xi=0.023175)
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.023175
DEBUG CAREFUL: Adding var 10 to fractional list (xi=0.023175)
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.023175
DEBUG CAREFUL: Adding var 11 to fractional list (xi=0.023175)
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.000000
DEBUG CAREFUL: Skipping var 21: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.000000
DEBUG CAREFUL: Skipping var 25: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.023175
DEBUG CAREFUL: Adding var 26 to fractional list (xi=0.023175)
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=1.000000
DEBUG CAREFUL: Skipping var 27: xi+FUZZ=1.000001 >= 1.0
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.023175
DEBUG CAREFUL: Adding var 31 to fractional list (xi=0.023175)
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 6 fractional variables

  %  Carefully choosing branching variable, nfrac = 6
DEBUG CAREFUL: Testing fvar[0] = var 3
DEBUG CAREFUL: Calling compare_branch_vars for var 3
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 3
DEBUG CAREFUL: New best var: 3
DEBUG CAREFUL: Testing fvar[1] = var 11
DEBUG CAREFUL: Calling compare_branch_vars for var 11
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 11
DEBUG CAREFUL: New best var: 11
DEBUG CAREFUL: Testing fvar[2] = var 10
DEBUG CAREFUL: Calling compare_branch_vars for var 10
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 10
DEBUG CAREFUL: Testing fvar[3] = var 26
DEBUG CAREFUL: Calling compare_branch_vars for var 26
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 26
DEBUG CAREFUL: Testing fvar[4] = var 0
DEBUG CAREFUL: Calling compare_branch_vars for var 0
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 0
DEBUG CAREFUL: Testing fvar[5] = var 31
DEBUG CAREFUL: Calling compare_branch_vars for var 31
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 31
  % Initial guess is x11, Z0 = 28145178.9664537        , Z1 = 34732807.5404185        

DEBUG EVAL: Testing var 3 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=2, varin=32, theta=4.165102, up=999999999999999983222784.000000
ITER 2: row=28, varin=30, theta=0.958151, up=999999999999999983222784.000000
ITER 3: row=1, varin=23, theta=3.554223, up=999999999999999983222784.000000
ITER 4: row=22, varin=65, theta=2.322382, up=1.000000
ITER 5: row=22, varin=29, theta=1.288191, up=999999999999999983222784.000000
ITER 6: row=4, varin=56, theta=1.644597, up=1.000000
ITER 7: row=4, varin=61, theta=2.051838, up=1.000000
ITER 8: row=4, varin=71, theta=2.596808, up=1.000000
ITER 9: row=4, varin=73, theta=2.541331, up=1.000000
ITER 10: row=4, varin=72, theta=0.998886, up=1.000000
DEBUG EVAL: Branch var 3 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x3 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=2, varin=33, theta=0.121888, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=33)
DEBUG SOLUTION: LP solution array indices: FST[34-73], not_covered[74-93]
DEBUG SOLUTION: lp->best_solution[0] = 28145650.104225
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 1.000000
DEBUG SOLUTION: lp->best_solution[6] = 0.000000
DEBUG SOLUTION: lp->best_solution[7] = 150000.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 33 rows, 60 cols, 243 nonzeros, 1 slack, 32 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 1 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 0 at  28.14565010422488811059
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x55895154f600
% @LO 0.03  28.14517896645372019293 99.9000000000
% @LN 0.03  28.14565010422488811059 99.9000000000
% Resuming node 0 at  28.14565010422488811059
DEBUG CONSTRNT: LP rows=32, pool->nlprows=32, pool->npend=0
DEBUG CONSTRNT: Checking 32 LP rows (pool tracks 32, total LP rows 32)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 107
DEBUG CONSTRNT: Pool row 107 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 54
DEBUG CONSTRNT: Pool row 54 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 61
DEBUG CONSTRNT: Pool row 61 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 22
DEBUG CONSTRNT: Pool row 22 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 27
DEBUG CONSTRNT: Pool row 27 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 109
DEBUG CONSTRNT: Pool row 109 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 34
DEBUG CONSTRNT: Pool row 34 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 52
DEBUG CONSTRNT: Pool row 52 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 53
DEBUG CONSTRNT: Pool row 53 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 72
DEBUG CONSTRNT: Pool row 72 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 73
DEBUG CONSTRNT: Pool row 73 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 15
DEBUG CONSTRNT: Pool row 15 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 99
DEBUG CONSTRNT: Pool row 99 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 128
DEBUG CONSTRNT: Pool row 128 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 123
DEBUG CONSTRNT: Pool row 123 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 36
DEBUG CONSTRNT: Pool row 36 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 40
DEBUG CONSTRNT: Pool row 40 has lprow=31, expected 31
 % @PAP adding 32 rows, 181 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 0 LP 28 Solution, length = 28145650.104225, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.121888 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.000000 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.000000 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.121888 (FST 26)
  % DEBUG LP_VARS: x[27] = 1.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 1.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 1.000000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 1.000000 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 1.000000 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 0.878112 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 0.878112 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 1.000000 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 1.000000 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 0.878112 (terminal 19)
 % 2 fractional variables
DEBUG CG: LP optimal, z=28145650.104225, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=28145650.104225, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 % @cutset: 2 connected components.
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 0 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 0
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.121888
DEBUG CAREFUL: Adding var 10 to fractional list (xi=0.121888)
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.000000
DEBUG CAREFUL: Skipping var 11: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.000000
DEBUG CAREFUL: Skipping var 21: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.000000
DEBUG CAREFUL: Skipping var 25: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.121888
DEBUG CAREFUL: Adding var 26 to fractional list (xi=0.121888)
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=1.000000
DEBUG CAREFUL: Skipping var 27: xi+FUZZ=1.000001 >= 1.0
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.000000
DEBUG CAREFUL: Skipping var 31: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 2 fractional variables

  %  Carefully choosing branching variable, nfrac = 2
DEBUG CAREFUL: Testing fvar[0] = var 10
DEBUG CAREFUL: Calling compare_branch_vars for var 10
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 10
DEBUG CAREFUL: New best var: 10
DEBUG CAREFUL: Testing fvar[1] = var 26
DEBUG CAREFUL: Calling compare_branch_vars for var 26
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 26
  % Initial guess is x10, Z0 = 28145650.1042249        , Z1 = 31196545.6314285        

DEBUG EVAL: Testing var 10 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=2, varin=32, theta=0.711885, up=999999999999999983222784.000000
ITER 2: row=17, varin=23, theta=1.671829, up=999999999999999983222784.000000
ITER 3: row=22, varin=30, theta=1.445028, up=999999999999999983222784.000000
ITER 4: row=2, varin=17, theta=1.015950, up=999999999999999983222784.000000
ITER 5: row=1, varin=55, theta=1.571043, up=1.000000
ITER 6: row=1, varin=60, theta=1.571879, up=1.000000
DEBUG EVAL: Branch var 10 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x10 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=2, varin=20, theta=0.035393, up=999999999999999983222784.000000
ITER 2: row=31, varin=27, theta=0.047252, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=2)
ITER 3: row=1, varin=89, theta=0.746441, up=1.000000
ITER 4: row=2, varin=55, theta=0.000000, up=1.000000
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=32)
DEBUG SOLUTION: LP solution array indices: FST[33-72], not_covered[73-92]
DEBUG SOLUTION: lp->best_solution[0] = 28154049.374660
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 0.253559
DEBUG SOLUTION: lp->best_solution[6] = 0.000000
DEBUG SOLUTION: lp->best_solution[7] = 150000.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 32 rows, 60 cols, 241 nonzeros, 2 slack, 30 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 2 slack rows
   % @PAP adding 2 rows, 6 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=31, varin=44, theta=0.076126, up=1.000000
ITER 2: row=1, varin=33, theta=0.044439, up=1.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=32)
DEBUG SOLUTION: LP solution array indices: FST[33-72], not_covered[73-92]
DEBUG SOLUTION: lp->best_solution[0] = 28158525.928683
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 0.000000
DEBUG SOLUTION: lp->best_solution[6] = 150000.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 32 rows, 60 cols, 242 nonzeros, 3 slack, 29 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 3 slack rows
   % @PAP adding 2 rows, 12 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=30, varin=71, theta=0.070197, up=1.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=31)
DEBUG SOLUTION: LP solution array indices: FST[32-71], not_covered[72-91]
DEBUG SOLUTION: lp->best_solution[0] = 28160967.478573
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 0.000000
DEBUG SOLUTION: lp->best_solution[6] = 150000.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 31 rows, 60 cols, 246 nonzeros, 0 slack, 31 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @PAP adding 4 rows, 21 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=32, varin=25, theta=0.041776, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=35)
DEBUG SOLUTION: LP solution array indices: FST[36-75], not_covered[76-95]
DEBUG SOLUTION: lp->best_solution[0] = 28161761.694982
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 0.000000
DEBUG SOLUTION: lp->best_solution[6] = 150000.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 35 rows, 60 cols, 267 nonzeros, 4 slack, 31 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 4 slack rows
   % @PAP adding 2 rows, 5 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=32, varin=56, theta=0.106760, up=1.000000
ITER 2: row=31, varin=71, theta=0.071455, up=1.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=33)
DEBUG SOLUTION: LP solution array indices: FST[34-73], not_covered[74-93]
DEBUG SOLUTION: lp->best_solution[0] = 28167963.356354
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 0.000000
DEBUG SOLUTION: lp->best_solution[6] = 150000.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 33 rows, 60 cols, 248 nonzeros, 0 slack, 33 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @PAP adding 4 rows, 20 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=34, varin=23, theta=0.018994, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=37)
DEBUG SOLUTION: LP solution array indices: FST[38-77], not_covered[78-97]
DEBUG SOLUTION: lp->best_solution[0] = 28168827.385150
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 0.000000
DEBUG SOLUTION: lp->best_solution[6] = 150000.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 37 rows, 60 cols, 268 nonzeros, 1 slack, 36 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 1 slack rows
   % @PAP adding 5 rows, 24 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=40, varin=23, theta=0.040647, up=999999999999999983222784.000000
ITER 2: row=37, varin=40, theta=0.071063, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=41)
DEBUG SOLUTION: LP solution array indices: FST[42-81], not_covered[82-101]
DEBUG SOLUTION: lp->best_solution[0] = 28181877.491557
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 0.000000
DEBUG SOLUTION: lp->best_solution[6] = 150000.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 41 rows, 60 cols, 290 nonzeros, 7 slack, 34 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 7 slack rows
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 0 at  28.18187749155702803705
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x55895154f600
% @LO 0.03  28.14565010422488811059 99.9000000000
% @LN 0.03  28.18187749155702803705 99.9000000000
% Resuming node 0 at  28.18187749155702803705
DEBUG CONSTRNT: LP rows=34, pool->nlprows=34, pool->npend=0
DEBUG CONSTRNT: Checking 34 LP rows (pool tracks 34, total LP rows 34)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 161
DEBUG CONSTRNT: Pool row 161 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 54
DEBUG CONSTRNT: Pool row 54 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 61
DEBUG CONSTRNT: Pool row 61 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 22
DEBUG CONSTRNT: Pool row 22 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 27
DEBUG CONSTRNT: Pool row 27 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 52
DEBUG CONSTRNT: Pool row 52 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 53
DEBUG CONSTRNT: Pool row 53 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 72
DEBUG CONSTRNT: Pool row 72 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 73
DEBUG CONSTRNT: Pool row 73 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 36
DEBUG CONSTRNT: Pool row 36 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 100
DEBUG CONSTRNT: Pool row 100 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 40
DEBUG CONSTRNT: Pool row 40 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 21
DEBUG CONSTRNT: Pool row 21 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=33, expected 33
 % @PAP adding 34 rows, 194 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 0 LP 29 Solution, length = 28181877.491557, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.071063 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.000000 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.000000 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 1.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.071063 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 0.928937 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 1.000000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 1.000000 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 1.000000 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 0.928937 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 1.000000 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 1.000000 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 0.928937 (terminal 19)
 % 2 fractional variables
DEBUG CG: LP optimal, z=28181877.491557, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG CG: integer_feasible_solution returned: FALSE
DEBUG CG: Second cutoff check: z=28181877.491557, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
 %   Final iteration: 0.00/0.00/0.00/0.00/0.00/0.00/0.00
DEBUG BB: compute_good_lower_bound returned status=4
DEBUG BB: Node 0 is FRACTIONAL - need to branch
DEBUG BB: Choosing branching variable for node 0
DEBUG CAREFUL: Checking var 0: edge_mask=ON, x[0]=0.000000
DEBUG CAREFUL: Skipping var 0: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 1: edge_mask=ON, x[1]=0.000000
DEBUG CAREFUL: Skipping var 1: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 2: edge_mask=ON, x[2]=0.000000
DEBUG CAREFUL: Skipping var 2: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 3: edge_mask=ON, x[3]=0.000000
DEBUG CAREFUL: Skipping var 3: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 4: edge_mask=ON, x[4]=0.000000
DEBUG CAREFUL: Skipping var 4: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 5: edge_mask=ON, x[5]=0.000000
DEBUG CAREFUL: Skipping var 5: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 6: edge_mask=ON, x[6]=0.000000
DEBUG CAREFUL: Skipping var 6: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 7: edge_mask=ON, x[7]=0.000000
DEBUG CAREFUL: Skipping var 7: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 8: edge_mask=ON, x[8]=0.000000
DEBUG CAREFUL: Skipping var 8: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 9: edge_mask=ON, x[9]=0.000000
DEBUG CAREFUL: Skipping var 9: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 10: edge_mask=ON, x[10]=0.000000
DEBUG CAREFUL: Skipping var 10: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 11: edge_mask=ON, x[11]=0.071063
DEBUG CAREFUL: Adding var 11 to fractional list (xi=0.071063)
DEBUG CAREFUL: Checking var 12: edge_mask=ON, x[12]=0.000000
DEBUG CAREFUL: Skipping var 12: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 13: edge_mask=ON, x[13]=0.000000
DEBUG CAREFUL: Skipping var 13: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 14: edge_mask=ON, x[14]=0.000000
DEBUG CAREFUL: Skipping var 14: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 15: edge_mask=ON, x[15]=0.000000
DEBUG CAREFUL: Skipping var 15: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 16: edge_mask=ON, x[16]=0.000000
DEBUG CAREFUL: Skipping var 16: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 17: edge_mask=ON, x[17]=0.000000
DEBUG CAREFUL: Skipping var 17: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 18: edge_mask=ON, x[18]=0.000000
DEBUG CAREFUL: Skipping var 18: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 19: edge_mask=ON, x[19]=0.000000
DEBUG CAREFUL: Skipping var 19: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 20: edge_mask=ON, x[20]=0.000000
DEBUG CAREFUL: Skipping var 20: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 21: edge_mask=ON, x[21]=0.000000
DEBUG CAREFUL: Skipping var 21: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 22: edge_mask=ON, x[22]=0.000000
DEBUG CAREFUL: Skipping var 22: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 23: edge_mask=ON, x[23]=0.000000
DEBUG CAREFUL: Skipping var 23: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 24: edge_mask=ON, x[24]=0.000000
DEBUG CAREFUL: Skipping var 24: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 25: edge_mask=ON, x[25]=0.000000
DEBUG CAREFUL: Skipping var 25: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 26: edge_mask=ON, x[26]=0.000000
DEBUG CAREFUL: Skipping var 26: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 27: edge_mask=ON, x[27]=1.000000
DEBUG CAREFUL: Skipping var 27: xi+FUZZ=1.000001 >= 1.0
DEBUG CAREFUL: Checking var 28: edge_mask=ON, x[28]=0.000000
DEBUG CAREFUL: Skipping var 28: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 29: edge_mask=ON, x[29]=0.000000
DEBUG CAREFUL: Skipping var 29: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 30: edge_mask=ON, x[30]=0.000000
DEBUG CAREFUL: Skipping var 30: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 31: edge_mask=ON, x[31]=0.071063
DEBUG CAREFUL: Adding var 31 to fractional list (xi=0.071063)
DEBUG CAREFUL: Checking var 32: edge_mask=ON, x[32]=0.000000
DEBUG CAREFUL: Skipping var 32: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 33: edge_mask=ON, x[33]=0.000000
DEBUG CAREFUL: Skipping var 33: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 34: edge_mask=ON, x[34]=0.000000
DEBUG CAREFUL: Skipping var 34: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 35: edge_mask=ON, x[35]=0.000000
DEBUG CAREFUL: Skipping var 35: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 36: edge_mask=ON, x[36]=0.000000
DEBUG CAREFUL: Skipping var 36: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 37: edge_mask=ON, x[37]=0.000000
DEBUG CAREFUL: Skipping var 37: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 38: edge_mask=ON, x[38]=0.000000
DEBUG CAREFUL: Skipping var 38: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Checking var 39: edge_mask=ON, x[39]=0.000000
DEBUG CAREFUL: Skipping var 39: xi=0.000000 <= FUZZ=0.000001
DEBUG CAREFUL: Found 2 fractional variables

  %  Carefully choosing branching variable, nfrac = 2
DEBUG CAREFUL: Testing fvar[0] = var 11
DEBUG CAREFUL: Calling compare_branch_vars for var 11
DEBUG CAREFUL: compare_branch_vars returned TRUE for var 11
DEBUG CAREFUL: New best var: 11
DEBUG CAREFUL: Testing fvar[1] = var 31
DEBUG CAREFUL: Calling compare_branch_vars for var 31
DEBUG CAREFUL: compare_branch_vars returned FALSE for var 31
  % Initial guess is x11, Z0 = 28181877.491557         , Z1 = 34732807.5404185        

DEBUG EVAL: Testing var 11 = 1, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
ITER 1: row=2, varin=34, theta=0.993151, up=999999999999999983222784.000000
ITER 2: row=15, varin=32, theta=3.772505, up=999999999999999983222784.000000
ITER 3: row=32, varin=28, theta=2.679340, up=999999999999999983222784.000000
ITER 4: row=25, varin=26, theta=9.757505, up=999999999999999983222784.000000
ITER 5: row=17, varin=20, theta=3.033510, up=999999999999999983222784.000000
ITER 6: row=19, varin=2, theta=1.843428, up=999999999999999983222784.000000
ITER 7: row=1, varin=62, theta=7.846790, up=1.000000
ITER 8: row=1, varin=25, theta=5.985296, up=999999999999999983222784.000000
ITER 9: row=6, varin=18, theta=5.581026, up=999999999999999983222784.000000
DEBUG EVAL: Branch var 11 = 1 gives z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000
  % 	x11 = 1,	Z1 = 1.79769313486232e+308   
DEBUG EVAL: First branch cutoff check: z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, best_z=INF, threshold=INF
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=2, varin=29, theta=0.263477, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=34)
DEBUG SOLUTION: LP solution array indices: FST[35-74], not_covered[75-94]
DEBUG SOLUTION: lp->best_solution[0] = 28184819.659936
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 0.000000
DEBUG SOLUTION: lp->best_solution[6] = 150000.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 34 rows, 60 cols, 254 nonzeros, 1 slack, 33 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 1 slack rows
   % @PAP adding 4 rows, 22 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=34, varin=76, theta=0.071350, up=1.000000
ITER 2: row=37, varin=24, theta=0.011151, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=2)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=37)
DEBUG SOLUTION: LP solution array indices: FST[38-77], not_covered[78-97]
DEBUG SOLUTION: lp->best_solution[0] = 28191098.704721
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 0.000000
DEBUG SOLUTION: lp->best_solution[6] = 150000.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 37 rows, 60 cols, 269 nonzeros, 2 slack, 35 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 2 slack rows
   % @PAP adding 3 rows, 14 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=37, varin=23, theta=0.058803, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=38)
DEBUG SOLUTION: LP solution array indices: FST[39-78], not_covered[79-98]
DEBUG SOLUTION: lp->best_solution[0] = 28195379.547959
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 0.000000
DEBUG SOLUTION: lp->best_solution[6] = 150000.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 38 rows, 60 cols, 279 nonzeros, 3 slack, 35 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 3 slack rows
   % @PAP adding 1 rows, 2 nz to LP
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=36, varin=32, theta=0.330161, up=999999999999999983222784.000000
LP PHASE: Switching to primal (iter=1)
ITER 2: row=35, varin=4, theta=0.000000, up=999999999999999983222784.000000
ITER 3: row=17, varin=6, theta=56266.000000, up=999999999999999983222784.000000
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=36)
DEBUG SOLUTION: LP solution array indices: FST[37-76], not_covered[77-96]
DEBUG SOLUTION: lp->best_solution[0] = 28212734.596329
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 0.000000
DEBUG SOLUTION: lp->best_solution[6] = 93734.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 36 rows, 60 cols, 267 nonzeros, 1 slack, 35 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
   % @D deleting 1 slack rows
LP PHASE: Starting dual phase (iter=0)
ITER 1: row=1, varin=72, theta=19.000000, up=1.000000
ITER 2: row=1, varin=36, theta=9.000000, up=1.000000
ITER 3: row=1, varin=71, theta=16.000000, up=1.000000
ITER 4: row=1, varin=63, theta=15.000000, up=1.000000
ITER 5: row=1, varin=60, theta=14.000000, up=1.000000
ITER 6: row=1, varin=62, theta=13.000000, up=1.000000
ITER 7: row=1, varin=76, theta=12.000000, up=1.000000
ITER 8: row=1, varin=77, theta=11.000000, up=1.000000
ITER 9: row=1, varin=78, theta=10.000000, up=1.000000
ITER 10: row=1, varin=79, theta=9.000000, up=1.000000
LP PHASE: Switching to primal (iter=49)
DEBUG SOLUTION: Read 40 FST + 20 not_covered variables from LP solution (lp->rows=35)
DEBUG SOLUTION: LP solution array indices: FST[36-75], not_covered[76-95]
DEBUG SOLUTION: lp->best_solution[0] = 28212734.596329
DEBUG SOLUTION: lp->best_solution[1] = 19.000000
DEBUG SOLUTION: lp->best_solution[2] = 1.000000
DEBUG SOLUTION: lp->best_solution[3] = 1.000000
DEBUG SOLUTION: lp->best_solution[4] = 1.000000
DEBUG SOLUTION: lp->best_solution[5] = 0.000000
DEBUG SOLUTION: lp->best_solution[6] = 1.000000
DEBUG SOLUTION: lp->best_solution[7] = 1.000000
DEBUG SOLUTION: lp->best_solution[8] = 1.000000
DEBUG SOLUTION: lp->best_solution[9] = 1.000000
DEBUG SOLUTION: lp->best_solution[10] = 1.000000
DEBUG SOLUTION: lp->best_solution[11] = 1.000000
DEBUG SOLUTION: lp->best_solution[12] = 1.000000
DEBUG SOLUTION: lp->best_solution[13] = 1.000000
DEBUG SOLUTION: lp->best_solution[14] = 1.000000
   % @PL 35 rows, 60 cols, 227 nonzeros, 0 slack, 35 tight.
DEBUG COPY: Copied 40 FST + 20 not_covered variables to nodep->x
DEBUG BB: Branching variable chosen: j=-1
 % suspending node 0 at  28.21273459632921287721
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=0x55895154f600
% @LO 0.03  28.18187749155702803705 99.9000000000
% @LN 0.03  28.21273459632921287721 99.9000000000
% Resuming node 0 at  28.21273459632921287721
DEBUG CONSTRNT: LP rows=35, pool->nlprows=35, pool->npend=0
DEBUG CONSTRNT: Checking 35 LP rows (pool tracks 35, total LP rows 35)
DEBUG CONSTRNT: Checking LP row 0 -> pool row 0
DEBUG CONSTRNT: Pool row 0 has lprow=0, expected 0
DEBUG CONSTRNT: Checking LP row 1 -> pool row 5
DEBUG CONSTRNT: Pool row 5 has lprow=1, expected 1
DEBUG CONSTRNT: Checking LP row 2 -> pool row 93
DEBUG CONSTRNT: Pool row 93 has lprow=2, expected 2
DEBUG CONSTRNT: Checking LP row 3 -> pool row 96
DEBUG CONSTRNT: Pool row 96 has lprow=3, expected 3
DEBUG CONSTRNT: Checking LP row 4 -> pool row 132
DEBUG CONSTRNT: Pool row 132 has lprow=4, expected 4
DEBUG CONSTRNT: Checking LP row 5 -> pool row 113
DEBUG CONSTRNT: Pool row 113 has lprow=5, expected 5
DEBUG CONSTRNT: Checking LP row 6 -> pool row 119
DEBUG CONSTRNT: Pool row 119 has lprow=6, expected 6
DEBUG CONSTRNT: Checking LP row 7 -> pool row 74
DEBUG CONSTRNT: Pool row 74 has lprow=7, expected 7
DEBUG CONSTRNT: Checking LP row 8 -> pool row 54
DEBUG CONSTRNT: Pool row 54 has lprow=8, expected 8
DEBUG CONSTRNT: Checking LP row 9 -> pool row 61
DEBUG CONSTRNT: Pool row 61 has lprow=9, expected 9
DEBUG CONSTRNT: Checking LP row 10 -> pool row 43
DEBUG CONSTRNT: Pool row 43 has lprow=10, expected 10
DEBUG CONSTRNT: Checking LP row 11 -> pool row 84
DEBUG CONSTRNT: Pool row 84 has lprow=11, expected 11
DEBUG CONSTRNT: Checking LP row 12 -> pool row 13
DEBUG CONSTRNT: Pool row 13 has lprow=12, expected 12
DEBUG CONSTRNT: Checking LP row 13 -> pool row 22
DEBUG CONSTRNT: Pool row 22 has lprow=13, expected 13
DEBUG CONSTRNT: Checking LP row 14 -> pool row 27
DEBUG CONSTRNT: Pool row 27 has lprow=14, expected 14
DEBUG CONSTRNT: Checking LP row 15 -> pool row 108
DEBUG CONSTRNT: Pool row 108 has lprow=15, expected 15
DEBUG CONSTRNT: Checking LP row 16 -> pool row 52
DEBUG CONSTRNT: Pool row 52 has lprow=16, expected 16
DEBUG CONSTRNT: Checking LP row 17 -> pool row 53
DEBUG CONSTRNT: Pool row 53 has lprow=17, expected 17
DEBUG CONSTRNT: Checking LP row 18 -> pool row 72
DEBUG CONSTRNT: Pool row 72 has lprow=18, expected 18
DEBUG CONSTRNT: Checking LP row 19 -> pool row 73
DEBUG CONSTRNT: Pool row 73 has lprow=19, expected 19
DEBUG CONSTRNT: Checking LP row 20 -> pool row 87
DEBUG CONSTRNT: Pool row 87 has lprow=20, expected 20
DEBUG CONSTRNT: Checking LP row 21 -> pool row 40
DEBUG CONSTRNT: Pool row 40 has lprow=21, expected 21
DEBUG CONSTRNT: Checking LP row 22 -> pool row 6
DEBUG CONSTRNT: Pool row 6 has lprow=22, expected 22
DEBUG CONSTRNT: Checking LP row 23 -> pool row 124
DEBUG CONSTRNT: Pool row 124 has lprow=23, expected 23
DEBUG CONSTRNT: Checking LP row 24 -> pool row 20
DEBUG CONSTRNT: Pool row 20 has lprow=24, expected 24
DEBUG CONSTRNT: Checking LP row 25 -> pool row 97
DEBUG CONSTRNT: Pool row 97 has lprow=25, expected 25
DEBUG CONSTRNT: Checking LP row 26 -> pool row 98
DEBUG CONSTRNT: Pool row 98 has lprow=26, expected 26
DEBUG CONSTRNT: Checking LP row 27 -> pool row 90
DEBUG CONSTRNT: Pool row 90 has lprow=27, expected 27
DEBUG CONSTRNT: Checking LP row 28 -> pool row 91
DEBUG CONSTRNT: Pool row 91 has lprow=28, expected 28
DEBUG CONSTRNT: Checking LP row 29 -> pool row 19
DEBUG CONSTRNT: Pool row 19 has lprow=29, expected 29
DEBUG CONSTRNT: Checking LP row 30 -> pool row 41
DEBUG CONSTRNT: Pool row 41 has lprow=30, expected 30
DEBUG CONSTRNT: Checking LP row 31 -> pool row 106
DEBUG CONSTRNT: Pool row 106 has lprow=31, expected 31
DEBUG CONSTRNT: Checking LP row 32 -> pool row 130
DEBUG CONSTRNT: Pool row 130 has lprow=32, expected 32
DEBUG CONSTRNT: Checking LP row 33 -> pool row 131
DEBUG CONSTRNT: Pool row 131 has lprow=33, expected 33
DEBUG CONSTRNT: Checking LP row 34 -> pool row 104
DEBUG CONSTRNT: Pool row 104 has lprow=34, expected 34
 % @PAP adding 35 rows, 167 nz to LP
DEBUG BB: Processing node 0, calling compute_good_lower_bound
  % 	Constraint pool unchanged, skip LP solve.
  % Node 0 LP 30 Solution, length = 28212734.596329, 0.00 0
  % DEBUG LP_VARS: Optimal variable values:
  % DEBUG LP_VARS: x[0] = 0.000000 (FST 0)
  % DEBUG LP_VARS: x[1] = 0.000000 (FST 1)
  % DEBUG LP_VARS: x[2] = 0.000000 (FST 2)
  % DEBUG LP_VARS: x[3] = 0.000000 (FST 3)
  % DEBUG LP_VARS: x[4] = 0.000000 (FST 4)
  % DEBUG LP_VARS: x[5] = 0.000000 (FST 5)
  % DEBUG LP_VARS: x[6] = 0.000000 (FST 6)
  % DEBUG LP_VARS: x[7] = 0.000000 (FST 7)
  % DEBUG LP_VARS: x[8] = 0.000000 (FST 8)
  % DEBUG LP_VARS: x[9] = 0.000000 (FST 9)
  % DEBUG LP_VARS: x[10] = 0.000000 (FST 10)
  % DEBUG LP_VARS: x[11] = 0.000000 (FST 11)
  % DEBUG LP_VARS: x[12] = 0.000000 (FST 12)
  % DEBUG LP_VARS: x[13] = 0.000000 (FST 13)
  % DEBUG LP_VARS: x[14] = 0.000000 (FST 14)
  % DEBUG LP_VARS: x[15] = 0.000000 (FST 15)
  % DEBUG LP_VARS: x[16] = 0.000000 (FST 16)
  % DEBUG LP_VARS: x[17] = 0.000000 (FST 17)
  % DEBUG LP_VARS: x[18] = 0.000000 (FST 18)
  % DEBUG LP_VARS: x[19] = 0.000000 (FST 19)
  % DEBUG LP_VARS: x[20] = 0.000000 (FST 20)
  % DEBUG LP_VARS: x[21] = 0.000000 (FST 21)
  % DEBUG LP_VARS: x[22] = 0.000000 (FST 22)
  % DEBUG LP_VARS: x[23] = 0.000000 (FST 23)
  % DEBUG LP_VARS: x[24] = 0.000000 (FST 24)
  % DEBUG LP_VARS: x[25] = 0.000000 (FST 25)
  % DEBUG LP_VARS: x[26] = 0.000000 (FST 26)
  % DEBUG LP_VARS: x[27] = 1.000000 (FST 27)
  % DEBUG LP_VARS: x[28] = 0.000000 (FST 28)
  % DEBUG LP_VARS: x[29] = 0.000000 (FST 29)
  % DEBUG LP_VARS: x[30] = 0.000000 (FST 30)
  % DEBUG LP_VARS: x[31] = 0.000000 (FST 31)
  % DEBUG LP_VARS: x[32] = 0.000000 (FST 32)
  % DEBUG LP_VARS: x[33] = 0.000000 (FST 33)
  % DEBUG LP_VARS: x[34] = 0.000000 (FST 34)
  % DEBUG LP_VARS: x[35] = 0.000000 (FST 35)
  % DEBUG LP_VARS: x[36] = 0.000000 (FST 36)
  % DEBUG LP_VARS: x[37] = 0.000000 (FST 37)
  % DEBUG LP_VARS: x[38] = 0.000000 (FST 38)
  % DEBUG LP_VARS: x[39] = 0.000000 (FST 39)
  % DEBUG LP_VARS: not_covered[0] = 0.000000 (terminal 0)
  % DEBUG LP_VARS: not_covered[1] = 1.000000 (terminal 1)
  % DEBUG LP_VARS: not_covered[2] = 1.000000 (terminal 2)
  % DEBUG LP_VARS: not_covered[3] = 1.000000 (terminal 3)
  % DEBUG LP_VARS: not_covered[4] = 1.000000 (terminal 4)
  % DEBUG LP_VARS: not_covered[5] = 1.000000 (terminal 5)
  % DEBUG LP_VARS: not_covered[6] = 1.000000 (terminal 6)
  % DEBUG LP_VARS: not_covered[7] = 1.000000 (terminal 7)
  % DEBUG LP_VARS: not_covered[8] = 1.000000 (terminal 8)
  % DEBUG LP_VARS: not_covered[9] = 1.000000 (terminal 9)
  % DEBUG LP_VARS: not_covered[10] = 1.000000 (terminal 10)
  % DEBUG LP_VARS: not_covered[11] = 1.000000 (terminal 11)
  % DEBUG LP_VARS: not_covered[12] = 1.000000 (terminal 12)
  % DEBUG LP_VARS: not_covered[13] = 0.000000 (terminal 13)
  % DEBUG LP_VARS: not_covered[14] = 1.000000 (terminal 14)
  % DEBUG LP_VARS: not_covered[15] = 1.000000 (terminal 15)
  % DEBUG LP_VARS: not_covered[16] = 1.000000 (terminal 16)
  % DEBUG LP_VARS: not_covered[17] = 1.000000 (terminal 17)
  % DEBUG LP_VARS: not_covered[18] = 1.000000 (terminal 18)
  % DEBUG LP_VARS: not_covered[19] = 1.000000 (terminal 19)
 % 0 fractional variables
DEBUG CG: LP optimal, z=28212734.596329, best_z=179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000, z>=best_z? NO
DEBUG IFS: Budget mode - accepting integer solution with 1 edges covering 2 vertices
DEBUG CG: integer_feasible_solution returned: TRUE
DEBUG CG: Solution is integer feasible, returning LB_INTEGRAL
DEBUG BB: compute_good_lower_bound returned status=3
DEBUG BB: Node 0 is INTEGRAL (integer solution found)
 % @UO 0.03   1.21273459632921043472 -2226.3733616346
 % @UN 0.03   1.21273459632921043472 -2226.3733616346
DEBUG BB: Calling heuristic UB for integer solution, current best_z=1212734.596329
DEBUG BB: Heuristic did not improve integer solution
 % *     0     0  1212734.5963  1212734.5963
DEBUG BB: Starting new iteration, preempt=0
DEBUG BB: Selected node=(nil)
DEBUG BB: No more nodes to process, exiting
%%Page: 1 1
BeginPlot
	Plot_Terminals
 % fs27: 0 13
	0 T	13 T	S
  (Euclidean SMT:  20 points,  length = 1.212734596329210,  0.03 seconds)
EndPlot

% @0 Euclidean SMT
% N M Nodes LPs P1CPU P2CPU TotCPU
% @1 20 40 1 30 0.00 0.03 0.03
% Z RootZ %Gap RootLPs RootCPU RedMST
% @2 1.212734596329210 1212734.596329 0.00000 30 0.03 61.2145
% InitPRows InitPNZ InitLPRows InitLPNZ
% @3 163 594 135 555
% RootPRows RootPNZ RootLPRows RootLPNZ
% @4 163 594 35 227
% FinalPRows FinalPNZ FinalLPRows FinalLPNZ
% @5 163 594 35 227
% SMTFSTs SMTAvgFSTSz SMTMaxFSTSz #2FSTs #3FSTs ... #10FSTS #>10FSTs
% @6 1 2.000000 2 1 0 0 0 0 0 0 0 0 0
